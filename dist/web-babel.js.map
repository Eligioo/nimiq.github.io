{"version":3,"sources":["babel.js","src/main/platform/browser/index.prefix.js","node_modules/@nimiq/jungle-db/dist/loader/browser/prefix.js.template","node_modules/@nimiq/jungle-db/dist/main/platform/browser/Class.js","node_modules/@nimiq/jungle-db/dist/main/platform/browser/utils/LogNative.js","node_modules/@nimiq/jungle-db/dist/main/backend/indexeddb/utils/IDBTools.js","node_modules/@nimiq/jungle-db/dist/main/backend/indexeddb/IDBBackend.js","node_modules/@nimiq/jungle-db/dist/main/backend/indexeddb/JungleDB.js","node_modules/@nimiq/jungle-db/dist/main/backend/indexeddb/PersistentIndex.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/ArrayUtils.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/BTree.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/BufferUtils.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/ComparisonUtils.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/JSONUtils.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/Log.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/LRUMap.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/ObjectUtils.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/SetUtils.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/SortedList.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/Synchronizer.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/EncodedTransaction.js","node_modules/@nimiq/jungle-db/dist/main/generic/utils/GenericValueEncoding.js","node_modules/@nimiq/jungle-db/dist/main/generic/CachedBackend.js","node_modules/@nimiq/jungle-db/dist/main/generic/InMemoryIndex.js","node_modules/@nimiq/jungle-db/dist/main/generic/InMemoryBackend.js","node_modules/@nimiq/jungle-db/dist/main/generic/KeyRange.js","node_modules/@nimiq/jungle-db/dist/main/generic/ObjectStore.js","node_modules/@nimiq/jungle-db/dist/main/generic/Query.js","node_modules/@nimiq/jungle-db/dist/main/generic/TransactionIndex.js","node_modules/@nimiq/jungle-db/dist/main/generic/Transaction.js","node_modules/@nimiq/jungle-db/dist/main/generic/SynchronousTransaction.js","node_modules/@nimiq/jungle-db/dist/main/generic/Snapshot.js","node_modules/@nimiq/jungle-db/dist/main/generic/SnapshotManager.js","node_modules/@nimiq/jungle-db/dist/main/generic/CombinedTransaction.js","node_modules/@nimiq/jungle-db/dist/loader/browser/suffix.js.template","src/main/platform/browser/Class.js","src/main/platform/browser/utils/LogNative.js","src/main/generic/utils/Log.js","src/main/generic/utils/Observable.js","src/main/generic/network/DataChannel.js","src/main/platform/browser/crypto/CryptoLib.js","src/main/platform/browser/network/webrtc/WebRtcFactory.js","src/main/platform/browser/network/websocket/WebSocketFactory.js","src/main/platform/browser/network/DnsUtils.js","src/main/generic/utils/ConstantHelper.js","src/main/generic/utils/Services.js","src/main/generic/utils/Timers.js","src/main/generic/utils/Version.js","src/main/generic/utils/Time.js","src/main/generic/utils/array/ArrayUtils.js","src/main/generic/utils/array/HashMap.js","src/main/generic/utils/array/HashSet.js","src/main/generic/utils/array/LimitIterable.js","src/main/generic/utils/array/Queue.js","src/main/generic/utils/array/UniqueQueue.js","src/main/generic/utils/array/ThrottledQueue.js","src/main/generic/utils/array/SortedList.js","src/main/generic/utils/assert/Assert.js","src/main/generic/utils/buffer/BufferUtils.js","src/main/generic/utils/buffer/SerialBuffer.js","src/main/generic/utils/synchronizer/Synchronizer.js","src/main/generic/utils/synchronizer/MultiSynchronizer.js","src/main/generic/utils/synchronizer/PrioritySynchronizer.js","src/main/generic/utils/RateLimit.js","src/main/generic/utils/IWorker.js","src/main/generic/utils/WasmHelper.js","src/main/generic/utils/crypto/CryptoWorker.js","src/main/generic/utils/crypto/CryptoWorkerImpl.js","src/main/generic/utils/crc/CRC32.js","src/main/generic/utils/number/NumberUtils.js","src/main/generic/utils/merkle/MerkleTree.js","src/main/generic/utils/merkle/MerklePath.js","src/main/generic/utils/merkle/MerkleProof.js","src/main/generic/utils/platform/PlatformUtils.js","src/main/generic/utils/string/StringUtils.js","src/main/generic/consensus/Policy.js","src/main/generic/consensus/base/primitive/Serializable.js","src/main/generic/consensus/base/primitive/Hash.js","src/main/generic/consensus/base/primitive/PrivateKey.js","src/main/generic/consensus/base/primitive/PublicKey.js","src/main/generic/consensus/base/primitive/KeyPair.js","src/main/generic/consensus/base/primitive/RandomSecret.js","src/main/generic/consensus/base/primitive/Signature.js","src/main/generic/consensus/base/primitive/Commitment.js","src/main/generic/consensus/base/primitive/CommitmentPair.js","src/main/generic/consensus/base/primitive/PartialSignature.js","src/main/generic/consensus/base/account/Address.js","src/main/generic/consensus/base/account/Account.js","src/main/generic/consensus/base/account/PrunedAccount.js","src/main/generic/consensus/base/account/BasicAccount.js","src/main/generic/consensus/base/account/Contract.js","src/main/generic/consensus/base/account/HashedTimeLockedContract.js","src/main/generic/consensus/base/account/VestingContract.js","src/main/generic/consensus/base/account/tree/AccountsTreeNode.js","src/main/generic/consensus/base/account/tree/AccountsTreeStore.js","src/main/generic/consensus/base/account/tree/SynchronousAccountsTreeStore.js","src/main/generic/consensus/base/account/tree/AccountsProof.js","src/main/generic/consensus/base/account/tree/AccountsTreeChunk.js","src/main/generic/consensus/base/account/tree/AccountsTree.js","src/main/generic/consensus/base/account/tree/SynchronousAccountsTree.js","src/main/generic/consensus/base/account/tree/PartialAccountsTree.js","src/main/generic/consensus/base/account/Accounts.js","src/main/generic/consensus/base/block/BlockHeader.js","src/main/generic/consensus/base/block/BlockInterlink.js","src/main/generic/consensus/base/block/BlockBody.js","src/main/generic/consensus/base/block/BlockUtils.js","src/main/generic/consensus/base/subscription/Subscription.js","src/main/generic/consensus/base/transaction/Transaction.js","src/main/generic/consensus/base/transaction/SignatureProof.js","src/main/generic/consensus/base/transaction/BasicTransaction.js","src/main/generic/consensus/base/transaction/ExtendedTransaction.js","src/main/generic/consensus/base/transaction/TransactionsProof.js","src/main/generic/consensus/base/transaction/TransactionCache.js","src/main/generic/consensus/base/transaction/index/TransactionStoreEntry.js","src/main/generic/consensus/base/transaction/index/TransactionStore.js","src/main/generic/consensus/base/transaction/index/TransactionReceipt.js","src/main/generic/consensus/base/block/Block.js","src/main/generic/consensus/base/blockchain/IBlockchain.js","src/main/generic/consensus/base/blockchain/BaseChain.js","src/main/generic/consensus/base/blockchain/BlockChain.js","src/main/generic/consensus/base/blockchain/HeaderChain.js","src/main/generic/consensus/base/blockchain/ChainProof.js","src/main/generic/consensus/base/blockchain/ChainData.js","src/main/generic/consensus/base/blockchain/ChainDataStore.js","src/main/generic/consensus/base/mempool/MempoolTransactionSet.js","src/main/generic/consensus/base/mempool/Mempool.js","src/main/generic/consensus/InvRequestManager.js","src/main/generic/consensus/BaseConsensusAgent.js","src/main/generic/consensus/BaseConsensus.js","src/main/generic/consensus/full/FullChain.js","src/main/generic/consensus/full/FullConsensusAgent.js","src/main/generic/consensus/full/FullConsensus.js","src/main/generic/consensus/light/LightChain.js","src/main/generic/consensus/light/LightConsensusAgent.js","src/main/generic/consensus/light/LightConsensus.js","src/main/generic/consensus/light/PartialLightChain.js","src/main/generic/consensus/nano/NanoChain.js","src/main/generic/consensus/nano/NanoConsensusAgent.js","src/main/generic/consensus/nano/NanoConsensus.js","src/main/generic/consensus/nano/NanoMempool.js","src/main/generic/consensus/ConsensusDB.js","src/main/generic/consensus/Consensus.js","src/main/generic/network/Protocol.js","src/main/generic/network/message/Message.js","src/main/generic/network/message/AddrMessage.js","src/main/generic/network/message/BlockMessage.js","src/main/generic/network/message/RawBlockMessage.js","src/main/generic/network/message/GetAddrMessage.js","src/main/generic/network/message/GetBlocksMessage.js","src/main/generic/network/message/HeaderMessage.js","src/main/generic/network/message/InventoryMessage.js","src/main/generic/network/message/MempoolMessage.js","src/main/generic/network/message/PingMessage.js","src/main/generic/network/message/PongMessage.js","src/main/generic/network/message/RejectMessage.js","src/main/generic/network/message/SignalMessage.js","src/main/generic/network/message/SubscribeMessage.js","src/main/generic/network/message/TxMessage.js","src/main/generic/network/message/VersionMessage.js","src/main/generic/network/message/VerAckMessage.js","src/main/generic/network/message/AccountsProofMessage.js","src/main/generic/network/message/GetAccountsProofMessage.js","src/main/generic/network/message/ChainProofMessage.js","src/main/generic/network/message/GetChainProofMessage.js","src/main/generic/network/message/AccountsTreeChunkMessage.js","src/main/generic/network/message/GetAccountsTreeChunkMessage.js","src/main/generic/network/message/TransactionsProofMessage.js","src/main/generic/network/message/GetTransactionsProofMessage.js","src/main/generic/network/message/GetTransactionReceiptsMessage.js","src/main/generic/network/message/TransactionReceiptsMessage.js","src/main/generic/network/message/GetBlockProofMessage.js","src/main/generic/network/message/BlockProofMessage.js","src/main/generic/network/message/GetHeadMessage.js","src/main/generic/network/message/HeadMessage.js","src/main/generic/network/message/MessageFactory.js","src/main/generic/network/webrtc/WebRtcConnector.js","src/main/generic/network/webrtc/WebRtcDataChannel.js","src/main/generic/network/webrtc/WebRtcUtils.js","src/main/generic/network/websocket/WebSocketConnector.js","src/main/generic/network/websocket/WebSocketDataChannel.js","src/main/generic/network/address/NetAddress.js","src/main/generic/network/address/PeerId.js","src/main/generic/network/address/PeerAddress.js","src/main/generic/network/address/PeerAddressState.js","src/main/generic/network/address/PeerAddressBook.js","src/main/generic/consensus/GenesisConfig.js","src/main/generic/network/connection/CloseType.js","src/main/generic/network/connection/NetworkConnection.js","src/main/generic/network/connection/PeerChannel.js","src/main/generic/network/connection/NetworkAgent.js","src/main/generic/network/connection/PeerConnectionStatistics.js","src/main/generic/network/connection/PeerConnection.js","src/main/generic/network/connection/SignalProcessor.js","src/main/generic/network/connection/ConnectionPool.js","src/main/generic/network/PeerScorer.js","src/main/generic/network/NetworkConfig.js","src/main/generic/network/Network.js","src/main/generic/network/NetUtils.js","src/main/generic/network/PeerKeyStore.js","src/main/generic/network/Peer.js","src/main/generic/miner/Miner.js","src/main/generic/wallet/Wallet.js","src/main/generic/wallet/MultiSigWallet.js","src/main/generic/wallet/WalletStore.js","src/main/generic/miner/MinerWorker.js","src/main/generic/miner/MinerWorkerImpl.js","src/main/generic/miner/MinerWorkerPool.js","src/main/platform/browser/index.suffix.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","Array","from","../../modules/_core","../../modules/es6.array.from","../../modules/es6.string.iterator","2","../modules/core.get-iterator","../modules/es6.string.iterator","../modules/web.dom.iterable","3","core","$JSON","JSON","stringify","it","apply","arguments","4","Math","clz32","../../modules/es6.math.clz32","5","fround","../../modules/es6.math.fround","6","imul","../../modules/es6.math.imul","7","trunc","../../modules/es6.math.trunc","8","Number","isInteger","../../modules/es6.number.is-integer","9","../../modules/es6.number.max-safe-integer","10","Object","freeze","../../modules/es6.object.freeze","11","keys","../../modules/es6.object.keys","12","values","../../modules/es7.object.values","13","Promise","../modules/_core","../modules/es6.object.to-string","../modules/es6.promise","../modules/es7.promise.finally","../modules/es7.promise.try","14","TypeError","15","16","Constructor","name","forbiddenField","undefined","17","isObject","./_is-object","18","toIObject","toLength","toAbsoluteIndex","IS_INCLUDES","$this","el","fromIndex","value","O","index","./_to-absolute-index","./_to-iobject","./_to-length","19","cof","TAG","ARG","T","B","key","tryGet","callee","./_cof","./_wks","20","toString","slice","21","version","__e","22","$defineProperty","createDesc","object","./_object-dp","./_property-desc","23","aFunction","fn","that","b","./_a-function","24","25","defineProperty","get","./_fails","26","document","is","createElement","./_global","27","split","28","global","ctx","hide","has","$export","type","source","own","out","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","P","IS_BIND","IS_WRAP","W","expProto","target","C","this","Function","virtual","R","U","./_core","./_ctx","./_has","./_hide","29","exec","30","isArrayIter","anObject","getIterFn","BREAK","RETURN","iterable","entries","ITERATOR","step","iterator","result","iterFn","next","done","./_an-object","./_is-array-iter","./_iter-call","./core.get-iterator-method","31","window","self","__g","32","hasOwnProperty","33","dP","./_descriptors","34","documentElement","35","./_dom-create","36","args","un","37","propertyIsEnumerable","38","Iterators","ArrayProto","prototype","./_iterators","39","floor","isFinite","40","41","ret","42","create","descriptor","setToStringTag","IteratorPrototype","NAME","./_object-create","./_set-to-string-tag","43","LIBRARY","redefine","$iterCreate","getPrototypeOf","BUGGY","returnThis","Base","DEFAULT","IS_SET","FORCED","methods","getMethod","kind","proto","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","./_export","./_iter-create","./_library","./_object-gpo","./_redefine","44","SAFE_CLOSING","riter","skipClosing","safe","arr","iter","45","46","47","48","sign","pow","EPSILON","EPSILON32","MAX32","MIN32","x","$abs","abs","$sign","Infinity","./_math-sign","49","50","META","setDesc","id","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","KEY","NEED","fastKey","getWeak","onFreeze","./_uid","51","macrotask","set","Observer","MutationObserver","WebKitMutationObserver","process","isNode","head","last","notify","flush","parent","domain","exit","enter","nextTick","navigator","standalone","resolve","promise","then","toggle","node","createTextNode","observe","characterData","data","task","./_task","52","PromiseCapability","reject","$$resolve","$$reject","53","dPs","enumBugKeys","IE_PROTO","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","open","write","lt","close","Properties","./_enum-bug-keys","./_html","./_object-dps","./_shared-key","54","IE8_DOM_DEFINE","toPrimitive","Attributes","./_ie8-dom-define","./_to-primitive","55","getKeys","defineProperties","./_object-keys","56","toObject","ObjectProto","constructor","./_to-object","57","arrayIndexOf","names","push","./_array-includes","58","$keys","./_object-keys-internal","59","60","fails","exp","61","isEnum","isEntries","./_object-pie","62","v","63","newPromiseCapability","promiseCapability","./_new-promise-capability","64","bitmap","enumerable","configurable","writable","65","66","67","DESCRIPTORS","SPECIES","68","def","tag","stat","69","shared","uid","./_shared","70","store","71","D","72","toInteger","defined","TO_STRING","pos","s","String","l","charCodeAt","charAt","./_defined","./_to-integer","73","defer","channel","port","invoke","html","cel","setTask","setImmediate","clearTask","clearImmediate","MessageChannel","Dispatch","counter","queue","run","listener","event","now","port2","port1","onmessage","postMessage","addEventListener","importScripts","removeChild","setTimeout","clear","./_invoke","74","max","min","75","ceil","isNaN","76","IObject","./_iobject","77","78","79","val","valueOf","80","px","random","concat","81","Symbol","USE_SYMBOL","82","classof","getIteratorMethod","./_classof","83","getIterator","84","createProperty","arrayLike","aLen","mapfn","mapping","./_create-property","./_iter-detect","85","addToUnscopables","iterated","_t","_i","_k","Arguments","./_add-to-unscopables","./_iter-define","./_iter-step","86","log","LOG2E","87","./_math-fround","88","$imul","y","xn","yn","xl","yl","89","90","./_is-integer","91","MAX_SAFE_INTEGER","92","$freeze","./_meta","./_object-sap","93","94","95","Internal","newGenericPromiseCapability","OwnPromiseCapability","Wrapper","anInstance","forOf","speciesConstructor","microtask","newPromiseCapabilityModule","perform","promiseResolve","$Promise","empty","USE_NATIVE","FakePromise","PromiseRejectionEvent","isThenable","isReject","_n","chain","_c","_v","ok","_s","reaction","exited","handler","fail","_h","onHandleUnhandled","onUnhandled","console","unhandled","isUnhandled","emit","onunhandledrejection","reason","error","_a","onrejectionhandled","$reject","_d","_w","$resolve","wrapper","executor","err","onFulfilled","onRejected","catch","capability","all","remaining","$index","alreadyCalled","race","./_an-instance","./_for-of","./_microtask","./_perform","./_promise-resolve","./_redefine-all","./_set-species","./_species-constructor","96","$at","point","./_string-at","97","$values","./_object-to-array","98","finally","onFinally","isFunction","99","try","callbackfn","100","TO_STRING_TAG","DOMIterables","Collection","./es6.array.iterator","101","g","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","./runtime","102","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","getProto","NativeIteratorPrototype","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","reverse","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","stop","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","abrupt","finallyEntry","complete","afterLoc","finish","thrown","delegateYield","resultName","nextLoc","protoGenerator","generator","_invoke","makeInvokeMethod","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","obj","previousPromise","enqueue","callInvokeWithMethodAndArg","unwrapped","return","info","pushTryEntry","locs","iteratorMethod","babel-runtime/core-js/array/from","default","__esModule","core-js/library/fn/array/from","babel-runtime/core-js/get-iterator","core-js/library/fn/get-iterator","babel-runtime/core-js/json/stringify","core-js/library/fn/json/stringify","babel-runtime/core-js/math/clz32","core-js/library/fn/math/clz32","babel-runtime/core-js/math/fround","core-js/library/fn/math/fround","babel-runtime/core-js/math/imul","core-js/library/fn/math/imul","babel-runtime/core-js/math/trunc","core-js/library/fn/math/trunc","babel-runtime/core-js/number/is-integer","core-js/library/fn/number/is-integer","babel-runtime/core-js/number/max-safe-integer","core-js/library/fn/number/max-safe-integer","babel-runtime/core-js/object/freeze","core-js/library/fn/object/freeze","babel-runtime/core-js/object/keys","core-js/library/fn/object/keys","babel-runtime/core-js/object/values","core-js/library/fn/object/values","babel-runtime/core-js/promise","core-js/library/fn/promise","babel-runtime/helpers/asyncToGenerator","_promise2","_interopRequireDefault","gen","../core-js/promise","babel-runtime/regenerator","regenerator-runtime","Proxy","JDB","Class","[object Object]","cls","register","LogNative","_global_level","Log","TRACE","_tag_levels","localStorage","getItem","parse","warn","isLoggable","level","setLoggable","setItem","msg","unshift","Level","Date","toTimeString","substr","ERROR","WARNING","INFO","debug","DEBUG","trace","IDBTools","keyRange","KeyRange","exactMatch","IDBKeyRange","only","lower","upper","lowerBound","lowerOpen","upperBound","upperOpen","bound","IDBBackend","db","tableName","codec","_db","_tableName","_indices","Map","_indicesToCreate","_indicesToDelete","_codec","connected","_backend","backend","indices","init","objectStore","oldVersion","newVersion","indexName","upgradeCondition","indexNames","contains","deleteIndex","keyPath","isArray","join","createIndex","unique","multiEntry","decode","encode","options","_this","_asyncToGenerator3","getTx","transaction","onsuccess","raw","onerror","query","limit","_this2","Query","convertKeyRange","results","openCursorRequest","openCursor","cursor","primaryKey","continue","_this3","Set","openKeyCursor","size","add","keyStream","callback","ascending","valueStream","maxValue","_this4","maxKey","_this5","minValue","_this6","minKey","_this7","count","_this8","request","_apply","tx","_this9","idbTx","objSt","_truncated","_removed","delete","_modified","put","oncomplete","onabort","truncate","_this10","getRequest","PersistentIndex","applyCombined","_this11","encodedTx","EncodedTransaction","remove","isSynchronous","JungleDB","dbVersion","_databaseDir","_dbVersion","_onUpgradeNeeded","onUpgradeNeeded","_connected","_objectStores","_objectStoreBackends","_objectStoresToDelete","_indexedDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","connect","onupgradeneeded","_initDB","_this12","objectStoreNames","deleteObjectStore","IDBobjStore","createObjectStore","getObjectStore","ObjectStore","InMemoryBackend","persistent","enableLruCache","lruCacheSize","CachedBackend","MAX_CACHE_SIZE","rawLruCacheSize","cachedBackend","objStore","_this13","destroy","_this14","req","deleteDatabase","tx1","tx2","txs","CombinedTransaction","functions","encodedTxs","tableNames","infos","transactions","map","tmp","innerInfo","truncated","removed","modified","every","Transaction","commit","JSON_ENCODING","BINARY_ENCODING","STRING_ENCODING","NUMBER_ENCODING","GENERIC_ENCODING","_objectStore","_indexName","_keyPath","_multiEntry","_unique","_index","_this15","_this16","maxValues","_this17","ComparisonUtils","equals","maxKeys","_this18","minValues","_this19","minKeys","_this20","_this21","_this22","_this23","nextIndex","hasNext","peek","Node","_keys","LeafNode","records","super","_records","prevLeaf","nextLeaf","isLeaf","near","BTree","NEAR_MODE","GE","len","compare","LE","addKey","insertPos","splice","mov","newKeys","newRecords","newL","merge","frNod","paNod","frKey","nodePointers","InnerNode","_nodePointers","ptrL","ptrR","newNodePointers","paItm","del","order","_root","_maxkey","_minkyl","_minkyn","_leaf","_item","_key","_record","_length","_eof","_found","currentKey","currentRecord","insert","rec","stack","pL","pR","ky","newN","nod","_del","seek","NONE","skip","cnt","goto","goBottom","goTop","keynum","ptr","pack","toN","toI","frN","frI","parKey","parNod","kidKey","kidNod","delKey","parPtr","_fixNodes","sibL","sibR","shift","parItm","curNod","stk","toKey","lvl","mor","goToLowerBound","success","goToUpperBound","BufferUtils","u8","TextDecoder","_ISO_8859_15_DECODER","replace","num","_BASE64_LOOKUP","start","end","output","_tripletToBase64","extraBytes","parts","len2","_base64encodeChunk","buffer","Buffer","btoa","_codePointTextDecoder","Uint8Array","_base64fromByteArray","base64","test","atob","toBase64","base64lex","BASE64_TO_BASE64_LEX","BASE64_LEX_TO_BASE64","fromBase64","viewA","viewB","BASE64_ALPHABET","BASE64_LEX_ALPHABET","=","-","isUint8Array","ArrayBuffer","isView","JSONUtils","jsonifyType","parseType","TYPE_SYMBOL","VALUE_SYMBOL","typedObject","instance","_instance","native","_native","message","VERBOSE","ASSERT","d","bind","LRUMap","maxSize","_maxSize","_map","_numAccesses","_accessQueue","thisArg","access","evict","k","oldest","accesses","ObjectUtils","path","component","union","setB","elem","intersection","difference","limitedResults","sampleElement","SortedList","sortedList","_list","_compare","currentIndex","currentElement","round","_insertionIndex","peekFirst","peekLast","copy","Synchronizer","_queue","_working","_doWork","_this24","job","working","GenericValueEncoding","binary","dv","DataView","setUint8","Type","INTEGER","setUint32","getUint32","string","STRING","buf","fromCharCode","subarray","_encodeString","json","_decodeString","byteLength","BUFFER","_encodeInteger","_encodeBuffer","_encodeOther","_decodeInteger","_decodeBuffer","_decodeOther","encoding","Encoding","BINARY","cacheSize","rawCacheSize","_cache","_rawCache","_retrieveValues","_this25","valuePromises","_has","_get","getSync","expectPresence","isCached","_this26","_applyLocally","_this27","_this28","InMemoryIndex","_tree","_indexKey","byKeyPath","_insert","iKey","tree","oldValue","oldIKey","newIKey","_remove","_this29","_this30","_this31","resultSet","includes","outer","_this32","_this33","_this34","isRange","_this35","_this36","_this37","_primaryIndex","_this38","_this39","_this40","_this41","_this42","_this43","_this44","truncateSync","originalValues","_indexApply","_this45","func","_this46","_this47","_lower","_upper","_lowerOpen","_upperOpen","_name","_stateStack","_backendInfo","TransactionInfo","_transactions","BACKEND_ID","_snapshotManager","SnapshotManager","_synchronizer","jungleDB","_currentState","_currentStateInfo","_currentStateId","_this48","abort","_this49","_this50","_isCommittable","_commitInternal","STATE","OPEN","isCommittable","_commitBackend","_this51","MAX_STACK_SIZE","toStringFull","isFlushable","_flattenState","_setParent","_this52","Snapshot","abortSnapshot","numOpenChildren","_flattenStateInternal","_this53","cleanup","statePosition","dependency","isBackend","applyTx","_setAborted","onFlushable","enableWatchdog","synchronousTransaction","SynchronousTransaction","snapshot","createSnapshot","_this54","toStringShort","_openTransactions","parentInfo","children","_parentInfo","_open","addChild","child","isOpen","filter","op","value2","OPERATORS","GT","LT","EQ","BETWEEN","WITHIN","var_args","AND","OR","MAX","MIN","some","COMBINED_OPERATORS","_queryType","COMBINED","_queries","_op","RANGE_OPERATORS","RANGE","_keyRange","_parseKeyRange","ADVANCED_OPERATORS","ADVANCED","_this55","_execute","resultPromises","_this56","_executeCombined","_executeAdvanced","_executeRange","_this57","firstResult","_this58","_this59","TransactionIndex","checkUniqueConstraint","_this60","secondaryKey","_this61","promises","_this62","_this63","_this64","backendKeys","maxIKey","tmpQuery","valueTx","iKeyBackend","iKeyTx","_this65","_this66","minIKey","_this67","managingBackend","_id","_instanceCount","_parent","_managingBackend","derive","_state","_nested","_nestedCommitted","_dependency","_startTime","_enableWatchdog","_watchdog","WATCHDOG_TIMER","nested","_applySync","_put","_this68","_this69","_this70","constraints","putSync","_this71","removeSync","_this72","_this73","_this74","txIt","sort","stopped","currentTxKey","_this75","_this76","_this77","_this78","_this79","_this80","NESTED","COMMITTED","inherit","_this81","_checkConstraints","_this82","_abortBackend","_this83","_this84","clearTimeout","commitStart","_performanceCheck","CONFLICTED","startTime","functionName","executionTime","toFixed","_this85","_this86","ABORTED","abortStart","localOldValue","_this87","constraintChecks","preload","_this88","_getCached","_this89","_this90","_snapshots","_this91","applications","isConsistent","_flushable","_preprocessing","_jdb","objectStores","preprocessing","_this92","preprocessings","commitCombined","_this93","_this94","_this95","_this96","_loaded","_onload","Nimiq","_currentScript","currentScript","scripts","getElementsByTagName","_path","substring","lastIndexOf","scope","parseInt","toLowerCase","Observable","WILDCARD","_listeners","on","off","fire","res","bubble","observable","types","DataChannel","_buffer","_msgType","_receivingTag","_sendingTag","_expectedMessagesByType","_timers","Timers","_lastChunkReceivedAt","isExpectingMessage","confirmExpectedMessage","expectedMsg","timeoutCallback","expectMessage","msgTimeout","MESSAGE_TIMEOUT","chunkTimeout","CHUNK_TIMEOUT","ExpectedMessage","resetTimeout","_onTimeout","_onClose","clearAll","_error","_onMessage","readyState","ReadyState","SerialBuffer","CHUNK_SIZE_MAX","readUint8","effectiveChunkLength","readPos","chunk","read","NumberUtils","UINT8_MAX","chunkBuffer","messageSize","Message","peekLength","MESSAGE_SIZE_MAX","peekType","remainingBytes","writePos","send","Assert","_sendChunked","writeUint8","sendChunk","lastMessageReceivedAt","CONNECTING","CLOSING","CLOSED","fromString","str","CryptoLib","getRandomValues","crypto","msCrypto","WebRtcFactory","configuration","RTCPeerConnection","rtcSessionDescriptionInit","RTCSessionDescription","rtcIceCandidateInit","RTCIceCandidate","WebSocketFactory","url","WebSocket","DnsUtils","host","NetAddress","UNSPECIFIED","ConstantHelper","_originalValues","isConstant","constant","clazz","startsWith","toUpperCase","_ensureIsConstant","Services","provided","accepted","_provided","_accepted","services","FULL","LIGHT","NANO","_timeouts","_intervals","waitTime","timeoutExists","setInterval","intervalTime","clearInterval","resetInterval","intervalExists","Version","CODE","Time","offset","_offset","ArrayUtils","uintarr","begin","clamp","byteOffset","list","reverseRange","found","j","HashMap","fnHash","_hash","_fnHash","hashCode","keyIterator","valueIterator","isEmpty","HashSet","addAll","collection","removeAll","LimitIterable","_iterator","_limit","Queue","enqueueFirst","dequeue","hash","dequeueMulti","dequeueUntil","UniqueQueue","_set","enqueueUnique","enqueueAllNew","ThrottledQueue","maxAtOnce","POSITIVE_INFINITY","allowanceNum","allowanceInterval","allowanceCallback","_maxAtOnce","_availableNow","isAvailable","available","condition","PlatformUtils","isNodeJs","alphabet","BASE32_ALPHABET","NIMIQ","byte","symbol","carry","base32","charmap","char","hex","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","_view","_readPos","_writePos","array","getUint8","readUint16","getUint16","writeUint16","setUint16","readUint32","writeUint32","readUint64","isUint64","writeUint64","readVarUint","writeVarUint","readFloat64","getFloat64","writeFloat64","setFloat64","readString","bytes","toAscii","writeString","isMultibyte","fromAscii","readPaddedString","view","writePaddedString","padding","readVarLengthString","writeVarLengthString","isUint8","_this97","MultiSynchronizer","_synchronizers","synchonizer","synchronizer","isWorking","PrioritySynchronizer","numPriorities","_queues","priority","_this98","RateLimit","allowedOccurences","timeRange","_allowedEntries","_timeRange","_lastReset","_counter","note","number","IWorker","worker","workerScript","_workersSupported","createProxy","Worker","URL","createObjectURL","Blob","_workerImplementation","Pool","startWorkerForProxy","command","status","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","baseClazz","impl","stubBaseOnMessage","script","onreadystatechange","onload","proxyClass","_messageId","_worker","_receive","_waiting","cb","WorkerProxy","funcName","Stub","_result","_onmessage","finalRes","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_this99","_updateToSize","poolSize","_size","_step","_this100","_this101","workerPromises","createdWorkers","idx","_moduleLoadedCallbacks","WasmHelper","_importStarted","importWasmBrowser","importScriptBrowser","_importFinished","importWasmNodeJs","importScriptNodeJs","wasm","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","responseType","wasmBinary","response","fs","readFileSync","toUint8Array","asm","_adjustScriptPath","moduleSettings","_ref","onRuntimeInitialized","_loadBrowserScript","_x","_x2","__dirname","CryptoWorker","lib","_workerAsync","startWorkerPoolForProxy","computeArgon2d","input","computeArgon2dBatch","inputs","kdf","salt","iterations","blockVerify","block","transactionValid","timeNow","genesisHash","networkId","CryptoWorkerImpl","_superInit","_this102","doImportBrowser","Hash","getSize","Algorithm","ARGON2D","NodeNative","node_argon2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","_nimiq_argon2","stackRestore","hashes","stackTmp","node_kdf","wasmSalt","_nimiq_kdf","blockSerialized","GenesisConfig","GENESIS_HASH","unserialize","NETWORK_ID","Block","body","_valid","valid","_verify","header","interlinkHash","interlink","bodyHash","serialize","prepareForWorkerUse","CRC32","table","_POLYNOMIAL","_table","_createTable","_hex_chars","crc","UINT16_MAX","UINT32_MAX","UINT64_MAX","MerkleTree","_computeRoot","light","mid","left","right","leftHash","rightHash","concatTypedArrays","MerklePath","nodes","MerklePathNode","_nodes","leafValue","leafHash","_compute","containsLeaf","inner","leftLeaf","rightLeaf","computeRoot","root","serializedSize","leftBitsSize","leftBits","_compress","reduce","sum","_left","MerkleProof","operations","isUint16","_operations","leafValues","leafHashes","fnCompare","leaves","leafIndex","valueIndex","comparisonResult","compute","Operation","CONSUME_PROOF","h","CONSUME_INPUT","leftOps","leftPath","rightOps","rightPath","HASH","proofNodes","hashStack","opBitsSize","opBits","opCount","countNodes","isBrowser","webkitRTCPeerConnection","onLine","isHex","str1","str2","Policy","coins","SATOSHIS_PER_COIN","satoshis","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","BLOCK_TARGET_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","_obj","algorithm","BLAKE2B","_algorithm","blake2b","computeBlake2b","argon2d","getInstanceAsync","computeSha256","SHA256","sha256","SIZE","fromHex","node_blake2","_nimiq_blake2","node_sha256","_nimiq_sha256","SHA512","NULL","PrivateKey","privateKey","overwrite","publicKey","publicKeysHash","PublicKey","node_ed25519_derive_delinearized_private_key","wasmInPrivateKey","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_derive_delinearized_private_key","delinearizedPrivateKey","_publicKeyDerive","publicKeys","_delinearizeAndAggregatePublicKeys","toAddress","Address","fromHash","toPeerId","PeerId","publicKeysObj","_publicKeysHash","_publicKeysDelinearizeAndAggregate","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","KeyPair","locked","lockSalt","_locked","_lockedInternally","_lockSalt","_publicKey","_internalPrivateKey","generate","hexBuf","roundsLog","rounds","encryptedKey","EXPORT_SALT_LENGTH","check","EXPORT_CHECKSUM_LENGTH","_otpKdf","keyPair","pubHash","_privateKey","isLocked","_unlockedPrivateKey","exportEncrypted","unlockKey","_this103","wasLocked","unlock","encryptedSize","log2","EXPORT_KDF_ROUNDS","relock","lock","_this104","_otpPrivateKey","_clearUnlockedPrivateKey","_this105","_this106","LOCK_KDF_ROUNDS","xor","RandomSecret","Signature","_signatureCreate","commitment","signatures","_combinePartialSignatures","verify","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","Commitment","commitments","_commitmentsAggregate","concatenatedCommitments","node_ed25519_aggregate_commitments","wasmInCommitments","_ed25519_aggregate_commitments","aggCommitments","CommitmentPair","secret","_secret","_commitment","randomness","RANDOMNESS_SIZE","_commitmentCreate","node_ed25519_create_commitment","wasmOutCommitment","wasmOutSecret","_ed25519_create_commitment","SERIALIZED_SIZE","aggregateCommitment","_delinearizedPartialSignatureCreate","node_ed25519_delinearized_partial_sign","wasmInSecret","wasmInCommitment","_ed25519_delinearized_partial_sign","partialSignature","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","toUserFriendlyAddress","withSpaces","toBase32","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","withBalance","withOutgoingTransaction","transactionsCache","revert","validityStartHeight","fee","newBalance","containsTransaction","withIncomingTransaction","withContractCommand","isInitial","INITIAL","isToBePruned","BASIC","VESTING","HTLC","PrunedAccount","address","account","_address","_account","BasicAccount","SignatureProof","verifyTransaction","hasFlag","Flag","recipientType","Contract","recipient","getContractCreationAddress","HashedTimeLockedContract","sender","hashRoot","hashCount","timeout","totalAmount","isUint32","_sender","_recipient","_hashRoot","_hashCount","_timeout","_totalAmount","hashAlgorithm","proof","ProofType","REGULAR_TRANSFER","hashDepth","preImage","serializeContent","EARLY_RESOLVE","TIMEOUT_RESOLVE","verifyIncomingTransaction","minCap","isSignedBy","VestingContract","owner","vestingStart","vestingStepBlocks","vestingStepAmount","vestingTotalAmount","_owner","_vestingStart","_vestingStepBlocks","_vestingStepAmount","_vestingTotalAmount","getMinCap","AccountsTreeNode","prefix","TERMINAL","childrenSuffixes","childrenHashes","BRANCH","arg2","_prefix","isBranch","_childrenSuffixes","_childrenHashes","isTerminal","isTerminalType","terminalNode","isBranchType","childCount","childSuffix","childHash","childIndex","branchNode","payloadSize","varLengthStringSize","getChildHash","_getChildIndex","getChild","suffix","withChild","withoutChild","hasChildren","hasSingleChild","getFirstChild","find","getLastChild","getChildren","withAccount","isChildOf","ourChild","otherChild","AccountsTreeStore","jdb","AccountsTreeStoreCodec","createVolatileObjectStore","_store","_this107","_this108","getRootNode","getTerminalNodes","startPrefix","_this109","relevantKeys","SynchronousAccountsTreeStore","valueEncoding","_syncStore","_this110","expectedToBePresent","getRootNodeSync","AccountsProof","getAccount","rootNode","_getAccount","commonPrefix","childKey","childNode","AccountsTreeChunk","_proof","lastPrefix","tail","terminalNodes","SIZE_MAX","EMPTY","AccountsTree","getPersistent","_init","createVolatile","_this111","_this112","rootPath","_this113","newChild","newChildHash","newParent","newParentHash","_updateKeys","_prune","nodeHash","childPrefix","_this114","_this115","_this116","getAccountsProof","addresses","_this117","prefixes","_getAccountsProof","_this118","includeNode","subPrefixes","getChunk","_this119","lastNode","SynchronousAccountsTree","partialTree","_this120","PartialAccountsTree","_this121","_this122","_this123","preloadAddresses","_this124","_preloadAddresses","_this125","putBatch","finalizeBatch","_updateHashes","_insertBatch","_updateKeysBatch","_pruneBatch","zeroHash","subHashes","currentHash","newNode","rootSync","_complete","_lastPrefix","pushChunk","_this126","Status","ERR_INCORRECT_PROOF","_putLight","_mergeProof","ERR_UNMERGEABLE","OK_COMPLETE","OK_UNFINISHED","nodeChildren","proofNode","proofChildren","nextChild","insertedNode","proofChild","proofHash","missingPrefix","ERR_HASH_MISMATCH","Accounts","accountsTree","initialize","genesisBlock","encodedAccounts","_this127","_commitBlockBody","height","TransactionCache","accountsHash","getAccountsTreeChunk","commitBlock","transactionCache","_this128","getAddresses","commitBlockBody","_this129","gatherToBePrunedAccounts","_this130","_processSenderAccounts","_processRecipientAccounts","_processContracts","toBePruned","senderAccount","_getSync","revertBlock","_this131","revertBlockBody","_this132","_revertBlockBody","accountType","_this133","_this134","partialAccountsTree","senderType","recipientAccount","prunedAccounts","accIdx","findIndex","acc","_rewardMiner","txFees","coinbaseTransaction","ExtendedTransaction","minerAddr","blockRewardAt","BlockHeader","prevHash","_prevHash","_interlinkHash","_bodyHash","_accountsHash","_nBits","_height","_timestamp","_nonce","_version","nBits","timestamp","nonce","CURRENT_VERSION","isHash","BlockUtils","isValidCompact","SUPPORTED_VERSIONS","verifyProofOfWork","_this135","isProofOfWork","isImmediateSuccessorOf","prevHeader","_this136","_pow","hard","compactToTarget","difficulty","compactToDifficulty","V1","BlockInterlink","_hashes","repeatBits","_repeatBits","compressed","_compressed","repeatBitsSize","lastHash","BlockBody","extraData","_minerAddr","_extraData","_prunedAccounts","extraDataLength","numTransactions","numPrunedAccounts","previousTx","compareBlockOrder","previousAcc","getMerkleLeafs","transactionCount","compact","getTargetHeight","targetToCompact","difficultyToTarget","targetToDifficulty","hashToTarget","getTargetDepth","isValidTarget","headBlock","tailBlock","deltaTotalDifficulty","actualTime","adjustment","averageDifficulty","nextTarget","Subscription","ADDRESSES","minFeePerByte","MIN_FEE","_addresses","_minFeePerByte","additionalSize","matchesBlock","ANY","matchesTransaction","BLOCKS_ONLY","format","flags","ALL","_format","_senderType","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","FORMAT_MAP","serializedContentSize","verifyOutgoingTransaction","recCompare","senderCompare","feePerByte","flag","Format","EXTENDED","signerKey","merklePath","_merklePath","_signature","merkleRoot","BasicTransaction","senderPubKey","singleSig","_signatureProof","dataSize","proofSize","TransactionsProof","blockOrder","_blockOrder","pushBlock","shiftBlock","missingBlocks","blockFromOrder","prependBlocks","blocks","clone","TransactionStoreEntry","transactionHash","blockHash","_transactionHash","_blockHeight","_blockHash","senderBuffer","recipientBuffer","transactionHashBuffer","toJSON","TransactionStore","TransactionStoreCodec","keyEncoding","_currentId","_this137","_idForHash","_this138","_this139","getBySender","_this140","getByRecipient","_this141","_this142","indexedTransactions","fromBlock","currentId","indexedTransaction","_this143","fromJSON","TransactionReceipt","_header","_interlink","_body","time","_this144","isLight","_this145","TIMESTAMP_DRIFT_MAX","_verifyInterlink","isFull","_verifyBody","predecessor","_this146","getNextInterlink","isInterlinkSuccessorOf","_this147","prevPow","targetHeight","blockFound","depth","depthDiff","commonBlock","thisInterlink","prevInterlink","isSuccessorOf","_this148","nextVersion","_this149","thisPowDepth","getHashDepth","nextTargetDepth","numOccurrences","toLight","toFull","IBlockchain","headHash","BaseChain","getBlock","includeForks","includeBody","_this150","chainData","getChainData","onMainChain","getRawBlock","getBlockAt","getNearestBlockAt","getBlockLocators","_this151","locators","getNextTarget","_this152","headData","_mainChain","tailHeight","tailData","getChainDataAt","prevData","totalDifficulty","_getChainProof","_prove","m","delta","_this153","BlockChain","superBlockCounts","getCandidateDepth","alpha","_getSuperChain","_isGoodSuperChain","_getHeaderChain","ChainProof","_this154","reference","ChainData","initial","GENESIS_BLOCK","superchain","_hasSuperQuality","_hasMultiLevelQuality","underlyingLength","_isLocallyGood","k1","mu","upperChainLength","MULTILEVEL_STRATEGY","MultilevelStrategy","STRICT","lowerChainLength","MODERATE","RELAXED","superLength","_this155","headers","HeaderChain","_extendChainProof","failOnBadness","suffixTail","prefixHead","chains","getSuperChains","deletedBlockHeights","_superchain","referenceBlock","numBlocksToDelete","candidateBlock","newPrefix","_getBlockProof","blockToProve","knownBlock","_this156","getInterlinkReference","hashToProve","proveTarget","proveDepth","nextBlock","partitions","part","pows","proof1","proof2","lca","lowestCommonAncestor","score1","NanoChain","_getProofScore","score2","counts","maxScore","score","chain1","chain2","merged","i1","i2","block1","block2","superChains","_blocks","_chains","_this157","denseSuffix","denseSuffixHead","_this158","isAnchored","_headers","_this159","_suffix","_this160","_verifyDifficulty","denseChain","totalDifficulties","headIndex","tailIndex","checkBlock","totalWork","realDifficulty","copyAndAdd","SuperBlockCounts","mainChainSuccessor","_head","_totalDifficulty","_totalWork","_superBlockCounts","_onMainChain","_mainChainSuccessor","toObj","hashBase64","successor","nextChainData","_this161","previousChainData","_this162","copyAndSubtract","_arr","subtract","ChainDataStore","chainStore","ChainDataStoreCodec","CHAINDATA_CACHING_ENABLED","CHAINDATA_CACHE_SIZE","_createIndexes","BlockStoreCodec","BLOCKS_CACHING_ENABLED","BLOCKS_CACHE_SIZE","BLOCKS_RAW_CACHE_SIZE","blockStore","lmdbKeyEncoding","leveldbKeyEncoding","_chainStore","_blockStore","_this163","putChainData","chainTx","blockTx","putChainDataSync","_this164","_this165","_this166","candidates","eq","_this167","_this168","getBlocks","startBlockHash","forward","getBlocksForward","getBlocksBackward","_this169","_this170","getHead","_this171","setHead","setHeadSync","chainSnapshot","blockSnapshot","fromObj","MempoolTransactionSet","sortedTransactions","numBelowFeePerByte","Mempool","blockchain","accounts","_blockchain","_accounts","_transactionsByFeePerByte","_transactionsByHash","_transactionSetBySender","_transactionSetByRecipient","_evictTransactions","_restoreTransactions","pushTransaction","_pushTransaction","_this172","ReturnCode","KNOWN","TRANSACTION_RELAY_FEE_MIN","FREE_TRANSACTIONS_PER_SENDER_MAX","FEE_TOO_LOW","INVALID","tmpAccount","TRANSACTIONS_PER_SENDER_MAX","_removeTransaction","_popLowFeeTransaction","byRecipient","ACCEPTED","getTransaction","txSize","getTransactions","transactionGenerator","getTransactionsForBlock","_this173","getPendingTransactions","getTransactionsBySender","getTransactionsByRecipient","getTransactionsByAddresses","maxTransactions","bySender","evictBelowMinFeePerByte","_this174","__evictTransactions","_this175","InvRequestManager","_vectorsToRequest","askToRequestVector","agent","vector","syncing","MAX_INV_MANAGED","requestVector","current","peer","closed","_request","waiting","noteVectorNotReceived","MAX_TIME_PER_VECTOR","noteVectorReceived","BaseConsensusAgent","invRequestManager","targetSubscription","_time","_peer","_synced","_knownObjects","InvVector","BLOCK","_blocksToRequest","_txsToRequest","TRANSACTIONS_AT_ONCE","FREE_TRANSACTIONS_AT_ONCE","TRANSACTIONS_PER_SECOND","FREE_TRANSACTIONS_PER_SECOND","REQUEST_TRANSACTIONS_WAITING_MAX","_objectsInFlight","_objectsThatFlew","_objectsProcessing","_remoteSubscription","_localSubscription","_lastSubscriptionChange","_targetSubscription","_waitingInvVectors","_sendWaitingInvVectors","TRANSACTION_RELAY_INTERVAL","_waitingFreeInvVectors","_sendFreeWaitingInvVectors","FREE_TRANSACTION_RELAY_INTERVAL","_blockProofRequest","_transactionsProofRequest","_transactionReceiptsRequest","_invRequestManager","_onInv","_onBlock","_onHeader","_onTx","_onNotFound","_onSubscribe","_onGetData","_onGetHeader","_onBlockProof","_onTransactionsProof","_onTransactionReceipts","_onGetHead","_onHead","_requestHead","onHeadUpdated","HEAD_REQUEST_INTERVAL","subscribe","subscription","_subscribe","_subscribeTarget","relayBlock","inv","BaseInventoryMessage","VECTORS_MAX_COUNT","invVectors","peerAddress","FREE_TRANSACTION_SIZE_PER_INTERVAL","relayTransaction","fromTransaction","knowsBlock","_this176","vectors","unknownBlocks","unknownTxs","_shouldRequestData","_getBlock","_onKnownBlockAnnounced","_onNewBlockAnnounced","TRANSACTION","_getTransaction","_onKnownTransactionAnnounced","_onNewTransactionAnnounced","_onNoUnknownObjects","REQUEST_THRESHOLD","_requestData","REQUEST_THROTTLE","_getRawBlock","vectorsMaxCount","_doRequestData","_noMoreData","REQUEST_TIMEOUT","getData","_this177","transactionPromises","_onObjectReceived","_processBlock","_onObjectProcessed","_this178","_processHeader","_this179","_processTransaction","SUBSCRIPTION_CHANGE_GRACE_PERIOD","CloseType","RECEIVED_TRANSACTION_NOT_MATCHING_OUR_SUBSCRIPTION","_onAllObjectsReceived","_onAllObjectsProcessed","_this180","unknownObjects","rawBlock","notFound","_this181","getBlockProof","blockHashToProve","BLOCK_PROOF","BLOCK_PROOF_REQUEST_TIMEOUT","_this182","hasProof","INVALID_BLOCK_PROOF","getTransactionsProof","_getTransactionsProof","TRANSACTIONS_PROOF","GET_TRANSACTIONS_PROOF_TIMEOUT","TRANSACTIONS_PROOF_REQUEST_TIMEOUT","INVALID_TRANSACTION_PROOF","getTransactionReceipts","_getTransactionReceipts","TRANSACTION_RECEIPTS","GET_TRANSACTION_RECEIPTS_TIMEOUT","TRANSACTION_RECEIPTS_REQUEST_TIMEOUT","transactionReceipts","synced","REQUEST_BLOCKS_WAITING_MAX","BaseConsensus","mempool","network","_network","_agents","_established","_syncPeer","_subscription","_onPeerJoined","_onPeerLeft","_onHeadChanged","_onTransactionAdded","_newConsensusAgent","_onPeerSynced","_onPeerOutOfSync","_syncBlockchain","SYNC_THROTTLE","numSyncedFullNodes","isFullNode","MIN_FULL_NODES","randomElement","syncBlockchain","allowInboundConnections","_requestBlockProof","blockHeightToProve","_this183","agents","knownBlockHash","_requestTransactionsProof","_this184","isNanoNode","_requestTransactionReceipts","_this185","_requestTransactionHistory","_this186","receipts","blockRequests","lastBlockHash","receipt","transactionRequests","flat","established","FullChain","transactionStore","_snapshotOrder","_transactionCache","_transactionStore","_blockKnownCount","_blockInvalidCount","_blockOrphanCount","_blockExtendedCount","_blockRebranchedCount","_blockForkedCount","_this187","_headHash","genesis","GENESIS_ACCOUNTS","_pushBlock","_this188","OK_KNOWN","ERR_INVALID","ERR_ORPHAN","_extend","OK_EXTENDED","_rebranch","OK_REBRANCHED","OK_FORKED","_this189","_this190","accountsTx","storeTx","transactionStoreTx","_saveSnapshot","_shouldExtendChainProof","_this191","forkChain","forkHashes","curData","curHash","ancestorData","ancestorHash","transactionCacheTx","revertChain","numMissingBlocks","revertedData","forkData","getChainProof","_this192","_this193","_getSnapshot","_this194","_this195","matches","addressesSet","getTransactionReceiptsByAddress","_this196","entriesBySender","entriesByRecipient","getTransactionInfoByHash","_this197","txStoreEntry","_this198","transactionsTx","currentBlock","_this199","oldestHash","oldestSnapshot","blockForkedCount","blockRebranchedCount","blockExtendedCount","blockOrphanCount","blockInvalidCount","blockKnownCount","FullConsensusAgent","_mempool","_syncing","_numBlocksExtending","_numBlocksForking","_forkHead","_failedSyncs","_syncTarget","_chainProofLimit","CHAIN_PROOF_RATE_LIMIT","_accountsProofLimit","ACCOUNTS_PROOF_RATE_LIMIT","_accountsTreeChunkLimit","ACCOUNTS_TREE_CHUNK_RATE_LIMIT","_transactionsProofLimit","TRANSACTION_PROOF_RATE_LIMIT","_transactionReceiptsLimit","TRANSACTION_RECEIPTS_RATE_LIMIT","_blockProofLimit","BLOCK_PROOF_RATE_LIMIT","_onGetBlocks","_onGetChainProof","_onGetAccountsProof","_onGetAccountsTreeChunk","_onGetTransactionsProof","_onGetTransactions","_onGetBlockProof","_onMempool","_this200","_syncFinished","SYNC_ATTEMPTS_MAX","BLOCKCHAIN_SYNC_FAILED","_requestBlocks","delay","MEMPOOL_DELAY_MIN","MEMPOOL_DELAY_MAX","maxInvSize","_this201","INV","GET_BLOCKS_TIMEOUT","_this202","_this203","RECEIVED_INVALID_BLOCK","_onOrphanBlock","_outOfSync","RESYNC_THROTTLE","_this204","TX","RejectMessage","Code","REJECT_INSUFFICIENT_FEE","REJECT_INVALID","_this205","startBlock","locator","GETBLOCKS_VECTORS_MAX","direction","GetBlocksMessage","Direction","FORWARD","_this206","RATE_LIMIT_EXCEEDED","chainProof","_this207","blockProof","_this208","accountsProof","_this209","transactionsProof","_this210","accountsTreeChunk","_this211","TRANSACTION_RECEIPTS_LIMIT","TransactionReceiptsMessage","RECEIPTS_MAX_COUNT","_this212","MEMPOOL_ENTRIES_MAX","MEMPOOL_THROTTLE","FullConsensus","subscribeMinFeePerByte","fromMinFeePerByte","LightChain","_this213","partialChain","_this214","PartialLightChain","mainChain","LightConsensusAgent","_partialChain","_catchup","_orphanedBlocks","_busy","_accountsRequest","_requestedChainProof","_numWeakProofs","_onChainProof","_onAccountsTreeChunk","_this215","getHeader","DID_NOT_GET_REQUESTED_HEADER","_initChainProofSync","State","PROVE_CHAIN","_requestChainProof","PROVE_ACCOUNTS_TREE","_requestAccountsTree","PROVE_BLOCKS","_requestProofBlocks","COMPLETE","_applyOrphanedBlocks","ABORTED_SYNC","WEAK_PROOF","WEAK_PROOFS_MAX","_this216","_this217","CHAIN_PROOF","GET_CHAIN_PROOF_TIMEOUT","CHAINPROOF_REQUEST_TIMEOUT","CHAINPROOF_CHUNK_TIMEOUT","_this218","pushProof","INVALID_CHAIN_PROOF","getMissingAccountsPrefix","ACCOUNTS_TREE_CHUNK","GET_ACCOUNTS_TREE_CHUNK_TIMEOUT","ACCOUNTS_TREE_CHUNK_REQUEST_TIMEOUT","_this219","hasChunk","INVALID_ACCOUNTS_TREE_CHUNK","rootHash","ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH","pushAccountsTreeChunk","_lastChainHeight","proofHeadHeight","numBlocksNeeded","_this220","_chain","_this221","_headerRequest","HEADER","GET_HEADER_TIMEOUT","NanoConsensusAgent","requestedHash","RECEIVED_WRONG_HEADER","LightConsensus","_partialTree","_accountsTx","_proofHead","_pushProof","_this222","toDo","manyPow","suffixBlocks","currentProof","isBetterProof","_acceptProof","_this223","tailEnd","_pushLightBlock","_this224","_pushBlockInternal","_this225","proofHeadHash","_pushBlockBackwards","_pushHeadBlock","_this226","_prepend","needsMoreBlocks","_this227","_this228","_this229","_this230","_this231","_this232","numBlocks","_this233","_this234","_this235","_this236","pushHeader","_pushHeader","_this237","_this238","_this239","_this240","_onAccountsProof","_this241","requestMempool","_this242","_this243","_this244","RECEIVED_INVALID_HEADER","_this245","getAccounts","_getAccounts","ACCOUNTS_PROOF","GET_ACCOUNTS_PROOF_TIMEOUT","ACCOUNTSPROOF_REQUEST_TIMEOUT","_this246","INVALID_ACCOUNTS_PROOF","ACCOUNTS_PROOF_ROOT_HASH_MISMATCH","INCOMPLETE_ACCOUNTS_PROOF","NanoConsensus","subscribeAccounts","fromAddresses","evictExceptAddresses","_this247","includedTransactions","changeHead","_this248","_this249","_this250","relayed","NanoMempool","_transactionSetByAddress","_this251","maxCount","addressSet","blockHeader","txHash","ConsensusDB","dbPrefix","dbName","VERSION","maxDbSize","INITIAL_DB_SIZE","autoResize","minResize","MIN_RESIZE","_this252","initPersistent","Consensus","netconfig","NetworkConfig","getDefault","getFull","NETWORK_NAME","Network","getLight","initVolatile","Protocol","DUMB","WS","RTC","magic","checksum","MAGIC","_writeChecksum","varUintSize","_setChecksum","GET_DATA","GET_HEADER","NOT_FOUND","GET_BLOCKS","MEMPOOL","REJECT","SUBSCRIBE","ADDR","GET_ADDR","PING","PONG","SIGNAL","GET_CHAIN_PROOF","GET_ACCOUNTS_PROOF","GET_ACCOUNTS_TREE_CHUNK","GET_TRANSACTIONS_PROOF","GET_TRANSACTION_RECEIPTS","GET_BLOCK_PROOF","GET_HEAD","HEAD","VERACK","AddrMessage","PeerAddress","addr","BlockMessage","_block","RawBlockMessage","GetAddrMessage","protocolMask","serviceMask","_protocolMask","_serviceMask","_locators","_maxInvSize","_direction","BACKWARD","HeaderMessage","_vectors","subtype","InvMessage","GetDataMessage","GetHeaderMessage","NotFoundMessage","MempoolMessage","PingMessage","PongMessage","messageType","_messageType","_code","_reason","REJECT_MALFORMED","REJECT_OBSOLETE","REJECT_DOUBLE","REJECT_DUST","SignalMessage","senderId","recipientId","ttl","payload","hasPayload","_senderId","_recipientId","_ttl","_payload","_senderPubKey","verifySignature","isUnroutable","UNROUTABLE","isTtlExceeded","TTL_EXCEEDED","SubscribeMessage","TxMessage","_transaction","_accountsProof","hasAccountsProof","VersionMessage","challengeNonce","_peerAddress","_genesisHash","_challengeNonce","CHALLENGE_SIZE","VerAckMessage","AccountsProofMessage","GetAccountsProofMessage","ChainProofMessage","GetChainProofMessage","AccountsTreeChunkMessage","_accountsTreeChunk","GetAccountsTreeChunkMessage","_startPrefix","TransactionsProofMessage","GetTransactionsProofMessage","GetTransactionReceiptsMessage","_transactionReceipts","GetBlockProofMessage","_blockHashToProve","_knownBlockHash","BlockProofMessage","GetHeadMessage","HeadMessage","MessageFactory","CLASSES","WebRtcConnector","networkConfig","_networkConfig","_connectors","signalChannel","protocol","peerId","connector","OutboundPeerConnector","conn","_onConnection","rtcConnection","CONNECT_TIMEOUT","isValidSignal","onSignal","InboundPeerConnector","PeerConnector","_signalChannel","_peerId","randomUint32","_rtcConnection","newPeerConnection","rtcConfig","onicecandidate","_onIceCandidate","_lastIceCandidate","_iceCandidateQueue","signal","sdp","setRemoteDescription","newSessionDescription","createAnswer","description","_onDescription","_handleCandidateQueue","candidate","_addIceCandidate","newIceCandidate","remoteDescription","addIceCandidate","_this253","_signal","SIGNAL_TTL_INITIAL","setLocalDescription","localDescription","_onDataChannel","WebRtcDataChannel","netAddress","WebRtcUtils","candidateToNetAddress","NetworkConnection","webRtcConfig","createDataChannel","binaryType","onopen","createOffer","offer","ondatachannel","nativeChannel","ordered","_channel","onclose","reader","FileReader","onloadend","readAsArrayBuffer","fromIP","WebSocketConnector","_wss","newWebSocketServer","ws","_sockets","timeoutKey","newWebSocket","handshakeTimeout","_socket","remoteAddress","WebSocketDataChannel","_ws","ip","reliable","saneIp","NetUtils","ipToBytes","isIPv4Address","IPv4","IPv6","ipArray","IPv4_LENGTH","IPv6_LENGTH","UNKNOWN","_ip","_reliable","bytesToIp","isPseudo","isPrivate","isPrivateIP","isIPv6","isIPv6Address","isIPv4","subnet","bitCount","ipToSubnet","distance","_protocol","_services","_netAddress","_distance","WsPeerAddress","RtcPeerAddress","DumbPeerAddress","_signatureVerified","isSeed","exceedsAge","age","PeerAddressBook","MAX_AGE_WEBSOCKET","MAX_AGE_WEBRTC","MAX_AGE_DUMB","publicKeyHex","_host","_port","globallyReachable","hostGloballyReachable","withoutId","PeerAddressState","NEW","lastConnected","bannedUntil","banBackoff","INITIAL_FAILED_BACKOFF","_signalRouter","SignalRouter","_failedAttempts","_closeTypes","_addedBy","signalRouter","maxFailedAttempts","MAX_FAILED_ATTEMPTS_RTC","MAX_FAILED_ATTEMPTS_WS","failedAttempts","bestRoute","updateBestRoute","BANNED","isBanningType","isFailingType","FAILED","TRIED","addedBy","ESTABLISHED","_bestRoute","_routes","addRoute","oldRoute","newRoute","SignalRoute","deleteBestRoute","deleteRoute","deleteAllRoutes","hasRoute","route","MAX_DISTANCE","_stateByPeerId","_statesByNetAddress","SEED_PEERS","_housekeeping","HOUSEKEEPING_INTERVAL","localPeerAddress","getState","peerAddressState","getByPeerId","getChannelByPeerId","maxAddresses","addressStates","numAddresses","peerAddresses","newAddresses","_add","MAX_SIZE","MAX_TIMESTAMP_DRIFT","knownAddress","changed","states","MAX_SIZE_PER_IP","_removeBySignalChannel","_ban","MAX_FAILED_BACKOFF","unroutable","duration","DEFAULT_BAN_TIME","isBanned","unbannedAddresses","knownAddressesCount","CONFIGS","config","_config","dev","seed","difficultyToCompact","bounty","closeType","INVALID_BLOCK","SENDING_PING_MESSAGE_FAILED","SENDING_OF_VERSION_MESSAGE_FAILED","SIMULTANEOUS_CONNECTION","DUPLICATE_CONNECTION","PEER_IS_BANNED","MANUAL_NETWORK_DISCONNECT","MANUAL_WEBSOCKET_DISCONNECT","MAX_PEER_COUNT_REACHED","PEER_CONNECTION_RECYCLED","PEER_CONNECTION_RECYCLED_INBOUND_EXCHANGE","INBOUND_CONNECTIONS_BLOCKED","MANUAL_PEER_DISCONNECT","ADDR_MESSAGE_TOO_LARGE","INVALID_ADDR","ADDR_NOT_GLOBALLY_REACHABLE","INVALID_SIGNAL_TTL","INVALID_SIGNATURE","RECEIVED_BLOCK_NOT_MATCHING_OUR_SUBSCRIPTION","INCOMPATIBLE_VERSION","DIFFERENT_GENESIS_BLOCK","INVALID_PEER_ADDRESS_IN_VERSION_MESSAGE","UNEXPECTED_PEER_ADDRESS_IN_VERSION_MESSAGE","INVALID_PUBLIC_KEY_IN_VERACK_MESSAGE","INVALID_SIGNATURE_IN_VERACK_MESSAGE","BANNED_IP","MANUAL_PEER_BAN","CLOSED_BY_REMOTE","PING_TIMEOUT","CONNECTION_FAILED","NETWORK_ERROR","VERSION_TIMEOUT","VERACK_TIMEOUT","FAILED_TO_PARSE_MESSAGE_TYPE","CONNECTION_LIMIT_PER_IP","CHANNEL_CLOSING","MANUAL_PEER_FAIL","_bytesSent","_bytesReceived","_inbound","_closed","_lastError","_onError","_close","_isChannelOpen","_isChannelClosing","_isChannelClosed","logAddress","connType","bytesSent","bytesReceived","inbound","outbound","PeerChannel","connection","_conn","rawMsg","_this254","Event","_send","verack","getAddr","ping","pong","NetworkAgent","_knownAddresses","_versionReceived","_verackReceived","_versionSent","_verackSent","_versionAttempts","_peerAddressVerified","_peerChallengeNonce","_pingTimes","_addrQueue","MAX_ADDR_RELAY_PER_MESSAGE","ADDR_QUEUE_INTERVAL","ADDR_RATE_LIMIT","_relayNow","_addrLimit","_onVersion","_onVerAck","_onAddr","_onGetAddr","_onPing","_onPong","relayAddresses","filteredAddresses","RELAY_THROTTLE","handshake","_sendVerAck","HANDSHAKE_TIMEOUT","VERSION_ATTEMPTS_MAX","VERSION_RETRY_DELAY","_canAcceptMessage","isCompatible","storedAddress","Peer","_finishHandshake","_checkConnectivity","CONNECTIVITY_CHECK_INTERVAL","ANNOUNCE_ADDR_INTERVAL","_requestAddresses","_this255","MAX_ADDR_PER_MESSAGE","PeerConnectionStatistics","_latencies","_messages","addLatency","latency","addMessage","getMessageCount","msgType","latencyMedian","median","PeerConnection","peerConnection","PeerConnectionState","networkConnection","_networkConnection","_peerChannel","_networkAgent","_score","_establishedSince","_statistics","CONNECTED","peerChannel","networkAgent","negotiating","NEGOTIATING","establishedSince","ageEstablished","statistics","SignalProcessor","rtcConnector","_rtcConnector","_forwards","SignalStore","myPeerId","signalForwarded","senderAddr","ForwardedSignal","lastSeen","SIGNAL_MAX_AGE","toDelete","dSignal","ConnectionPool","_connectionsByPeerAddress","_connectionsByNetAddress","_connectionsBySubnet","_wsConnector","peerAddr","_onConnectError","_peerCountWs","_peerCountRtc","_peerCountDumb","_peerCountFull","_peerCountLight","_peerCountNano","_peerCountOutbound","_peerCountFullWsOutbound","_connectingCount","_inboundCount","_signalProcessor","_allowInboundExchange","_allowInboundConnections","_bannedIPv4IPs","_bannedIPv6IPs","_checkUnbanIps","UNBAN_IPS_INTERVAL","getConnectionByPeerAddress","getConnectionsByNetAddress","getConnectionsBySubnet","_getSubnetAddress","getOutboundConnectionsBySubnet","IPV4_SUBNET_MASK","IPV6_SUBNET_MASK","_removeNetAddress","_addNetAddress","subnetAddress","peerConnections","_checkOutboundConnectionRequest","PEER_COUNT_PER_IP_MAX","OUTBOUND_PEER_COUNT_PER_SUBNET_MAX","connectOutbound","getOutbound","connecting","_checkConnection","_isIpBanned","INBOUND_PEER_COUNT_PER_SUBNET_MAX","peerCount","PEER_COUNT_MAX","getInbound","_checkHandshake","_onHandshake","storedConnection","_updateConnectedPeerCount","_banIp","kbTransferred","isLightNode","disconnect","disconnectWebSocket","peerCountWs","peerCountRtc","peerCountDumb","peerCountFull","peerCountLight","peerCountNano","peerCountOutbound","peerCountFullWsOutbound","connectingCount","allowInboundExchange","PeerScorer","connections","_connections","_connectionScores","pickAddress","findCandidates","numCandidates","allowBadPeers","minCandidates","addressState","_scoreAddress","needsGoodPeers","goodCandidates","PICK_SELECTION_SIZE","canConnect","isGoodPeer","isGoodPeerSet","needsMorePeers","PEER_COUNT_MIN_FULL_WS_OUTBOUND","PEER_COUNT_MIN_OUTBOUND","scoreConnections","_getMinAge","_scoreConnection","recycleConnections","scoreAge","_scoreConnectionAge","scoreOutbound","scoreType","scoreProtocol","BEST_PROTOCOL_WS_DISTRIBUTION","medianLatency","scoreSpeed","bestAge","maxAge","BEST_AGE_FULL","BEST_AGE_LIGHT","MAX_AGE_LIGHT","BEST_AGE_NANO","MAX_AGE_NANO","MIN_AGE_FULL","MIN_AGE_LIGHT","MIN_AGE_NANO","lowestConnectionScore","supportsWebRTC","RtcNetworkConfig","DumbNetworkConfig","_keyPair","_this256","PeerKeyStore","_this257","_this258","WsNetworkConfig","cert","_cert","_sslConfig","sslConfig","_rtcConfig","iceServers","urls","_autoConnect","_backoff","CONNECT_BACKOFF_INITIAL","_backedOff","_relayAddresses","_checkPeerCount","_onPeersChanged","_onRecyclingRequest","CONNECT_THROTTLE","_scorer","_houseKeepingIntervalId","_updateTimeOffset","SCORE_INBOUND_EXCHANGE","PEER_COUNT_RELAY","CONNECTING_COUNT_MAX","onlyGoodPeers","oldBackoff","CONNECT_BACKOFF_MAX","offsets","timeOffset","offsetsLength","TIME_OFFSET_MAX","PEER_COUNT_RECYCLING_ACTIVE","percentageToRecycle","connectionsToRecycle","peerCountWebSocket","peerCountWebRtc","peerCountConnecting","isLocalIP","IPv4_PRIVATE_NETWORK","isIPv4inSubnet","subIp","mask","_IPv4toLong","isEmbeddedIPv4","innerEmpty","_extendIPv6","hexIp","ipv6","ipv4","_IPv4toIPv6","emptyPart","stringResult","KEY_DATABASE","PeerKeyStoreCodec","leveldbValueEncoding","lmdbValueEncoding","_timeOffset","_setNetAddress","Miner","minerAddress","_lastHashrate","_hashrateWorker","_hashrate","_lastHashCounts","_totalHashCount","_lastElapsed","_totalElapsed","_workerPool","MinerWorkerPool","hardwareConcurrency","threads","cores","cpus","throttleAfter","_onWorkerShare","_mempoolChanged","_restarting","_lastRestart","_submittingBlock","_startWork","startWork","_updateHashrate","_retry","_this259","getNextBlock","startMiningOnBlock","stopWork","_this260","noncesPerRun","MIN_TIME_ON_BLOCK","_this261","_getNextInterlink","_getNextBody","_getNextHeader","_this262","_getNextTimestamp","interlinkSize","_this263","getMetadataSize","elapsed","MOVING_AVERAGE_MAX_SIZE","oldestElapsed","oldestHashCount","hashrate","throttleWait","cycleWait","runsPerCycle","Wallet","fromEncrypted","createTransaction","signTransaction","exportPlain","MultiSigWallet","minSignatures","multiSigKeys","k_combinations","numPublicKeys","serialBuf","_loadMultiSig","_minSignatures","_publicKeys","exportedSize","pubKey","_this264","encryptedExportedSize","recipientAddr","createCommitment","partiallySignTransaction","aggregatedCommitment","aggregatedPublicKey","fromPartialSignatures","multiSig","completeTransaction","WalletStore","_walletStore","_multiSigStore","_this265","WALLET_DATABASE","WalletStoreCodec","MULTISIG_WALLET_DATABASE","hasDefault","_this266","_this267","defaultAddress","defaultWallet","setDefault","base64Address","_this268","loadEncrypted","loadPlain","wallet","_this269","_this270","_this271","getMultiSig","_this272","putMultiSig","_this273","removeMultiSig","listMultiSig","_this274","MinerWorker","multiMine","minNonce","maxNonce","MinerWorkerImpl","_this275","_malloc","_nimiq_argon2_target","_free","_miningEnabled","_activeNonces","_noncesPerRun","_observable","_shareCompact","_runsPerCycle","_cycleWait","_superUpdateToSize","node_argon2_target_async","_ref6","_x3","nonces","shareCompact","_this276","_startMiner","_this277","nonceRange","_singleMiner","_this278","newMin","newRange"],"mappings":"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","file":"web-babel.js","sourcesContent":["require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nrequire('../../modules/es6.string.iterator');\nrequire('../../modules/es6.array.from');\nmodule.exports = require('../../modules/_core').Array.from;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.array.from\":84,\"../../modules/es6.string.iterator\":96}],2:[function(require,module,exports){\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n\n},{\"../modules/core.get-iterator\":83,\"../modules/es6.string.iterator\":96,\"../modules/web.dom.iterable\":100}],3:[function(require,module,exports){\nvar core = require('../../modules/_core');\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n},{\"../../modules/_core\":21}],4:[function(require,module,exports){\nrequire('../../modules/es6.math.clz32');\nmodule.exports = require('../../modules/_core').Math.clz32;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.math.clz32\":86}],5:[function(require,module,exports){\nrequire('../../modules/es6.math.fround');\nmodule.exports = require('../../modules/_core').Math.fround;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.math.fround\":87}],6:[function(require,module,exports){\nrequire('../../modules/es6.math.imul');\nmodule.exports = require('../../modules/_core').Math.imul;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.math.imul\":88}],7:[function(require,module,exports){\nrequire('../../modules/es6.math.trunc');\nmodule.exports = require('../../modules/_core').Math.trunc;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.math.trunc\":89}],8:[function(require,module,exports){\nrequire('../../modules/es6.number.is-integer');\nmodule.exports = require('../../modules/_core').Number.isInteger;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.number.is-integer\":90}],9:[function(require,module,exports){\nrequire('../../modules/es6.number.max-safe-integer');\nmodule.exports = 0x1fffffffffffff;\n\n},{\"../../modules/es6.number.max-safe-integer\":91}],10:[function(require,module,exports){\nrequire('../../modules/es6.object.freeze');\nmodule.exports = require('../../modules/_core').Object.freeze;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.object.freeze\":92}],11:[function(require,module,exports){\nrequire('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n\n},{\"../../modules/_core\":21,\"../../modules/es6.object.keys\":93}],12:[function(require,module,exports){\nrequire('../../modules/es7.object.values');\nmodule.exports = require('../../modules/_core').Object.values;\n\n},{\"../../modules/_core\":21,\"../../modules/es7.object.values\":97}],13:[function(require,module,exports){\nrequire('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n\n},{\"../modules/_core\":21,\"../modules/es6.object.to-string\":94,\"../modules/es6.promise\":95,\"../modules/es6.string.iterator\":96,\"../modules/es7.promise.finally\":98,\"../modules/es7.promise.try\":99,\"../modules/web.dom.iterable\":100}],14:[function(require,module,exports){\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n},{}],15:[function(require,module,exports){\nmodule.exports = function () { /* empty */ };\n\n},{}],16:[function(require,module,exports){\nmodule.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n},{}],17:[function(require,module,exports){\nvar isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n},{\"./_is-object\":40}],18:[function(require,module,exports){\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n},{\"./_to-absolute-index\":74,\"./_to-iobject\":76,\"./_to-length\":77}],19:[function(require,module,exports){\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n},{\"./_cof\":20,\"./_wks\":81}],20:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n},{}],21:[function(require,module,exports){\nvar core = module.exports = { version: '2.5.4' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n},{}],22:[function(require,module,exports){\n'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n\n},{\"./_object-dp\":54,\"./_property-desc\":64}],23:[function(require,module,exports){\n// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n},{\"./_a-function\":14}],24:[function(require,module,exports){\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n},{}],25:[function(require,module,exports){\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n},{\"./_fails\":29}],26:[function(require,module,exports){\nvar isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n},{\"./_global\":31,\"./_is-object\":40}],27:[function(require,module,exports){\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n},{}],28:[function(require,module,exports){\nvar global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n},{\"./_core\":21,\"./_ctx\":23,\"./_global\":31,\"./_has\":32,\"./_hide\":33}],29:[function(require,module,exports){\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n},{}],30:[function(require,module,exports){\nvar ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n\n},{\"./_an-object\":17,\"./_ctx\":23,\"./_is-array-iter\":38,\"./_iter-call\":41,\"./_to-length\":77,\"./core.get-iterator-method\":82}],31:[function(require,module,exports){\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n},{}],32:[function(require,module,exports){\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n},{}],33:[function(require,module,exports){\nvar dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n},{\"./_descriptors\":25,\"./_object-dp\":54,\"./_property-desc\":64}],34:[function(require,module,exports){\nvar document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n\n},{\"./_global\":31}],35:[function(require,module,exports){\nmodule.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n},{\"./_descriptors\":25,\"./_dom-create\":26,\"./_fails\":29}],36:[function(require,module,exports){\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\n},{}],37:[function(require,module,exports){\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n},{\"./_cof\":20}],38:[function(require,module,exports){\n// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n},{\"./_iterators\":46,\"./_wks\":81}],39:[function(require,module,exports){\n// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n\n},{\"./_is-object\":40}],40:[function(require,module,exports){\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n},{}],41:[function(require,module,exports){\n// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n},{\"./_an-object\":17}],42:[function(require,module,exports){\n'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n},{\"./_hide\":33,\"./_object-create\":53,\"./_property-desc\":64,\"./_set-to-string-tag\":68,\"./_wks\":81}],43:[function(require,module,exports){\n'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n},{\"./_export\":28,\"./_hide\":33,\"./_iter-create\":42,\"./_iterators\":46,\"./_library\":47,\"./_object-gpo\":56,\"./_redefine\":66,\"./_set-to-string-tag\":68,\"./_wks\":81}],44:[function(require,module,exports){\nvar ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n},{\"./_wks\":81}],45:[function(require,module,exports){\nmodule.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n},{}],46:[function(require,module,exports){\nmodule.exports = {};\n\n},{}],47:[function(require,module,exports){\nmodule.exports = true;\n\n},{}],48:[function(require,module,exports){\n// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n\n},{\"./_math-sign\":49}],49:[function(require,module,exports){\n// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n\n},{}],50:[function(require,module,exports){\nvar META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n\n},{\"./_fails\":29,\"./_has\":32,\"./_is-object\":40,\"./_object-dp\":54,\"./_uid\":80}],51:[function(require,module,exports){\nvar global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    var promise = Promise.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n},{\"./_cof\":20,\"./_global\":31,\"./_task\":73}],52:[function(require,module,exports){\n'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n\n},{\"./_a-function\":14}],53:[function(require,module,exports){\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n},{\"./_an-object\":17,\"./_dom-create\":26,\"./_enum-bug-keys\":27,\"./_html\":34,\"./_object-dps\":55,\"./_shared-key\":69}],54:[function(require,module,exports){\nvar anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n},{\"./_an-object\":17,\"./_descriptors\":25,\"./_ie8-dom-define\":35,\"./_to-primitive\":79}],55:[function(require,module,exports){\nvar dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n},{\"./_an-object\":17,\"./_descriptors\":25,\"./_object-dp\":54,\"./_object-keys\":58}],56:[function(require,module,exports){\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n},{\"./_has\":32,\"./_shared-key\":69,\"./_to-object\":78}],57:[function(require,module,exports){\nvar has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n},{\"./_array-includes\":18,\"./_has\":32,\"./_shared-key\":69,\"./_to-iobject\":76}],58:[function(require,module,exports){\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n},{\"./_enum-bug-keys\":27,\"./_object-keys-internal\":57}],59:[function(require,module,exports){\nexports.f = {}.propertyIsEnumerable;\n\n},{}],60:[function(require,module,exports){\n// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n},{\"./_core\":21,\"./_export\":28,\"./_fails\":29}],61:[function(require,module,exports){\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n\n},{\"./_object-keys\":58,\"./_object-pie\":59,\"./_to-iobject\":76}],62:[function(require,module,exports){\nmodule.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n\n},{}],63:[function(require,module,exports){\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\n},{\"./_an-object\":17,\"./_is-object\":40,\"./_new-promise-capability\":52}],64:[function(require,module,exports){\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n},{}],65:[function(require,module,exports){\nvar hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n\n},{\"./_hide\":33}],66:[function(require,module,exports){\nmodule.exports = require('./_hide');\n\n},{\"./_hide\":33}],67:[function(require,module,exports){\n'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n\n},{\"./_core\":21,\"./_descriptors\":25,\"./_global\":31,\"./_object-dp\":54,\"./_wks\":81}],68:[function(require,module,exports){\nvar def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n},{\"./_has\":32,\"./_object-dp\":54,\"./_wks\":81}],69:[function(require,module,exports){\nvar shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n},{\"./_shared\":70,\"./_uid\":80}],70:[function(require,module,exports){\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n\n},{\"./_global\":31}],71:[function(require,module,exports){\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n\n},{\"./_a-function\":14,\"./_an-object\":17,\"./_wks\":81}],72:[function(require,module,exports){\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n},{\"./_defined\":24,\"./_to-integer\":75}],73:[function(require,module,exports){\nvar ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n\n},{\"./_cof\":20,\"./_ctx\":23,\"./_dom-create\":26,\"./_global\":31,\"./_html\":34,\"./_invoke\":36}],74:[function(require,module,exports){\nvar toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n},{\"./_to-integer\":75}],75:[function(require,module,exports){\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n},{}],76:[function(require,module,exports){\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n},{\"./_defined\":24,\"./_iobject\":37}],77:[function(require,module,exports){\n// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n},{\"./_to-integer\":75}],78:[function(require,module,exports){\n// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n},{\"./_defined\":24}],79:[function(require,module,exports){\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n},{\"./_is-object\":40}],80:[function(require,module,exports){\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n},{}],81:[function(require,module,exports){\nvar store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n},{\"./_global\":31,\"./_shared\":70,\"./_uid\":80}],82:[function(require,module,exports){\nvar classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n},{\"./_classof\":19,\"./_core\":21,\"./_iterators\":46,\"./_wks\":81}],83:[function(require,module,exports){\nvar anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n\n},{\"./_an-object\":17,\"./_core\":21,\"./core.get-iterator-method\":82}],84:[function(require,module,exports){\n'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\n},{\"./_create-property\":22,\"./_ctx\":23,\"./_export\":28,\"./_is-array-iter\":38,\"./_iter-call\":41,\"./_iter-detect\":44,\"./_to-length\":77,\"./_to-object\":78,\"./core.get-iterator-method\":82}],85:[function(require,module,exports){\n'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n},{\"./_add-to-unscopables\":15,\"./_iter-define\":43,\"./_iter-step\":45,\"./_iterators\":46,\"./_to-iobject\":76}],86:[function(require,module,exports){\n// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n\n},{\"./_export\":28}],87:[function(require,module,exports){\n// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n\n},{\"./_export\":28,\"./_math-fround\":48}],88:[function(require,module,exports){\n// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n\n},{\"./_export\":28,\"./_fails\":29}],89:[function(require,module,exports){\n// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n\n},{\"./_export\":28}],90:[function(require,module,exports){\n// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n\n},{\"./_export\":28,\"./_is-integer\":39}],91:[function(require,module,exports){\n// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n\n},{\"./_export\":28}],92:[function(require,module,exports){\n// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n\n},{\"./_is-object\":40,\"./_meta\":50,\"./_object-sap\":60}],93:[function(require,module,exports){\n// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n},{\"./_object-keys\":58,\"./_object-sap\":60,\"./_to-object\":78}],94:[function(require,module,exports){\n\n},{}],95:[function(require,module,exports){\n'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n\n},{\"./_a-function\":14,\"./_an-instance\":16,\"./_classof\":19,\"./_core\":21,\"./_ctx\":23,\"./_export\":28,\"./_for-of\":30,\"./_global\":31,\"./_is-object\":40,\"./_iter-detect\":44,\"./_library\":47,\"./_microtask\":51,\"./_new-promise-capability\":52,\"./_perform\":62,\"./_promise-resolve\":63,\"./_redefine-all\":65,\"./_set-species\":67,\"./_set-to-string-tag\":68,\"./_species-constructor\":71,\"./_task\":73,\"./_wks\":81}],96:[function(require,module,exports){\n'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n},{\"./_iter-define\":43,\"./_string-at\":72}],97:[function(require,module,exports){\n// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n\n},{\"./_export\":28,\"./_object-to-array\":61}],98:[function(require,module,exports){\n// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n\n},{\"./_core\":21,\"./_export\":28,\"./_global\":31,\"./_promise-resolve\":63,\"./_species-constructor\":71}],99:[function(require,module,exports){\n'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n\n},{\"./_export\":28,\"./_new-promise-capability\":52,\"./_perform\":62}],100:[function(require,module,exports){\nrequire('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n\n},{\"./_global\":31,\"./_hide\":33,\"./_iterators\":46,\"./_wks\":81,\"./es6.array.iterator\":85}],101:[function(require,module,exports){\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n},{\"./runtime\":102}],102:[function(require,module,exports){\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n},{}],\"babel-runtime/core-js/array/from\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/array/from\"), __esModule: true };\n},{\"core-js/library/fn/array/from\":1}],\"babel-runtime/core-js/get-iterator\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };\n},{\"core-js/library/fn/get-iterator\":2}],\"babel-runtime/core-js/json/stringify\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };\n},{\"core-js/library/fn/json/stringify\":3}],\"babel-runtime/core-js/math/clz32\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/math/clz32\"), __esModule: true };\n},{\"core-js/library/fn/math/clz32\":4}],\"babel-runtime/core-js/math/fround\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/math/fround\"), __esModule: true };\n},{\"core-js/library/fn/math/fround\":5}],\"babel-runtime/core-js/math/imul\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/math/imul\"), __esModule: true };\n},{\"core-js/library/fn/math/imul\":6}],\"babel-runtime/core-js/math/trunc\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/math/trunc\"), __esModule: true };\n},{\"core-js/library/fn/math/trunc\":7}],\"babel-runtime/core-js/number/is-integer\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/number/is-integer\"), __esModule: true };\n},{\"core-js/library/fn/number/is-integer\":8}],\"babel-runtime/core-js/number/max-safe-integer\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/number/max-safe-integer\"), __esModule: true };\n},{\"core-js/library/fn/number/max-safe-integer\":9}],\"babel-runtime/core-js/object/freeze\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/freeze\"), __esModule: true };\n},{\"core-js/library/fn/object/freeze\":10}],\"babel-runtime/core-js/object/keys\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };\n},{\"core-js/library/fn/object/keys\":11}],\"babel-runtime/core-js/object/values\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/values\"), __esModule: true };\n},{\"core-js/library/fn/object/values\":12}],\"babel-runtime/core-js/promise\":[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };\n},{\"core-js/library/fn/promise\":13}],\"babel-runtime/helpers/asyncToGenerator\":[function(require,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _promise = require(\"../core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new _promise2.default(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return _promise2.default.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n},{\"../core-js/promise\":\"babel-runtime/core-js/promise\"}],\"babel-runtime/regenerator\":[function(require,module,exports){\nmodule.exports = require(\"regenerator-runtime\");\n\n},{\"regenerator-runtime\":101}]},{},[]);\n","if (typeof Nimiq === 'undefined') {\n    var Nimiq = typeof window !== 'undefined' ? window : {};\n}\nvar Proxy; // ensure Proxy exists\n(function (exports) {\n    exports = typeof exports !== 'undefined' ? exports : {};\n    Nimiq = exports;\n    if (!Nimiq._currentScript) {\n        Nimiq._currentScript = document.currentScript;\n    }\n    if (!Nimiq._currentScript) {\n        // Heuristic\n        const scripts = document.getElementsByTagName('script');\n        Nimiq._currentScript = scripts[scripts.length - 1];\n    }\n    if (!Nimiq._path) {\n        if (Nimiq._currentScript && Nimiq._currentScript.src.indexOf('/') !== -1) {\n            Nimiq._path = Nimiq._currentScript.src.substring(0, Nimiq._currentScript.src.lastIndexOf('/') + 1);\n        } else {\n            // Fallback\n            Nimiq._path = './';\n        }\n    }\n","if (typeof JDB === 'undefined') {\n    var JDB = {};\n}\nvar Proxy; // ensure Proxy exists\n(function (exports) {\n    exports = typeof exports !== 'undefined' ? exports : {};\n","class Class {\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.TRACE;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class IDBTools {\n    /**\n     * Converts our KeyRange objects into IDBKeyRange objects.\n     * @param {KeyRange} keyRange A KeyRange object.\n     * @returns {IDBKeyRange} The corresponding IDBKeyRange.\n     */\n    static convertKeyRange(keyRange) {\n        if (!(keyRange instanceof KeyRange)) return keyRange;\n        if (keyRange.exactMatch) {\n            return IDBKeyRange.only(keyRange.lower);\n        }\n        if (keyRange.lower !== undefined && keyRange.upper === undefined) {\n            return IDBKeyRange.lowerBound(keyRange.lower, keyRange.lowerOpen);\n        }\n        if (keyRange.upper !== undefined && keyRange.lower === undefined) {\n            return IDBKeyRange.upperBound(keyRange.upper, keyRange.upperOpen);\n        }\n        return IDBKeyRange.bound(keyRange.lower, keyRange.upper, keyRange.lowerOpen, keyRange.upperOpen);\n    }\n}\nClass.register(IDBTools);\n","/**\n * This class is a wrapper around the IndexedDB.\n * It manages the access to a single table/object store.\n * @implements {IBackend}\n */\nclass IDBBackend {\n    /**\n     * Creates a wrapper given a JungleDB object and table name.\n     * @param {JungleDB} db The JungleDB object managing the connection.\n     * @param {string} tableName THe table name this object store represents.\n     * @param {ICodec} [codec] Optional codec applied before storing/retrieving values in/from the backend (null is the identity codec).\n     */\n    constructor(db, tableName, codec=null) {\n        this._db = db;\n        this._tableName = tableName;\n        /** @type {Map.<string,IIndex>} */\n        this._indices = new Map();\n        this._indicesToCreate = new Map();\n        this._indicesToDelete = [];\n        this._codec = codec;\n    }\n\n    /** @type {boolean} */\n    get connected() {\n        return this._db.connected;\n    }\n\n    /** @type {IDBDatabase} */\n    get _backend() {\n        if (!this.connected) {\n            throw new Error('Requires a connected database');\n        }\n        return this._db.backend;\n    }\n\n    /**\n     * A map of index names to indices.\n     * The index names can be used to access an index.\n     * @type {Map.<string,IIndex>}\n     */\n    get indices() {\n        return this._indices;\n    }\n\n    /**\n     * Internal method called by the JungleDB to create the necessary indices during a version upgrade.\n     * @param {IDBObjectStore} objectStore The IDBObjectStore object obtained during a version upgrade.\n     * @param {number} oldVersion\n     * @param {number} newVersion\n     * @protected\n     */\n    init(objectStore, oldVersion, newVersion) {\n        // Delete indices.\n        for (const { indexName, upgradeCondition } of this._indicesToDelete) {\n            if (objectStore.indexNames.contains(indexName) && (upgradeCondition === null || upgradeCondition === true || (typeof upgradeCondition === 'function' && upgradeCondition(oldVersion, newVersion)))) {\n                objectStore.deleteIndex(indexName);\n            }\n        }\n        this._indicesToDelete = [];\n\n        // Create indices.\n        for (const [indexName, { index, upgradeCondition }] of this._indicesToCreate) {\n            // Only check upgradeCondition if index does not already exist!\n            if (!objectStore.indexNames.contains(indexName)\n                && (upgradeCondition === null || upgradeCondition === true\n                    || (typeof upgradeCondition === 'function' && upgradeCondition(oldVersion, newVersion)))) {\n                const keyPath = Array.isArray(index.keyPath) ? index.keyPath.join('.') : index.keyPath;\n                objectStore.createIndex(indexName, keyPath, { unique: index.unique, multiEntry: index.multiEntry });\n            }\n        }\n        this._indicesToCreate.clear();\n    }\n\n    /**\n     * Method called to decode a single value.\n     * @param {*} value Value to be decoded.\n     * @param {string} key Key corresponding to the value.\n     * @returns {*} The decoded value.\n     */\n    decode(value, key) {\n        if (value === undefined) {\n            return undefined;\n        }\n        if (this._codec !== null && this._codec !== undefined) {\n            return this._codec.decode(value, key);\n        }\n        return value;\n    }\n\n    /**\n     * Method called to encode a single value.\n     * @param {*} value Value to be encoded.\n     * @returns {*} The encoded value.\n     */\n    encode(value) {\n        if (value === undefined) {\n            return undefined;\n        }\n        if (this._codec !== null && this._codec !== undefined) {\n            return this._codec.encode(value);\n        }\n        return value;\n    }\n\n    /**\n     * Returns a promise of the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @param {string} key The primary key to look for.\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     * @returns {Promise.<*>} A promise of the object stored under the given key, or undefined if not present.\n     */\n    async get(key, options = {}) {\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const getTx = db.transaction([this._tableName])\n                .objectStore(this._tableName)\n                .get(key);\n            getTx.onsuccess = event => {\n                try {\n                    resolve((options && options.raw) ? event.target.result : this.decode(event.target.result, key));\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            getTx.onerror = reject;\n        });\n    }\n\n    /**\n     * Returns a promise of an array of objects whose primary keys fulfill the given query.\n     * If the optional query is not given, it returns all objects in the object store.\n     * If the query is of type KeyRange, it returns all objects whose primary keys are within this range.\n     * If the query is of type Query, it returns all objects whose primary keys fulfill the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    async values(query = null, limit = null) {\n        if (query !== null && query instanceof Query) {\n            return query.values(this, limit);\n        }\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const results = [];\n            const openCursorRequest = db.transaction([this._tableName], 'readonly')\n                .objectStore(this._tableName)\n                .openCursor(query);\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    // Limit\n                    if (limit !== null && results.length >= limit) {\n                        resolve(results);\n                        return;\n                    }\n\n                    try {\n                        results.push(this.decode(cursor.value, cursor.primaryKey));\n                    } catch (e) {\n                        reject(e);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns a promise of a set of keys fulfilling the given query.\n     * If the optional query is not given, it returns all keys in the object store.\n     * If the query is of type KeyRange, it returns all keys of the object store being within this range.\n     * If the query is of type Query, it returns all keys fulfilling the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to the query.\n     */\n    async keys(query = null, limit = null) {\n        if (query !== null && query instanceof Query) {\n            return query.keys(this, limit);\n        }\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const results = new Set();\n            const store = db.transaction([this._tableName], 'readonly').objectStore(this._tableName);\n            const openCursorRequest = store.openKeyCursor ? store.openKeyCursor(query) : store.openCursor(query);\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    // Limit\n                    if (limit !== null && results.size >= limit) {\n                        resolve(results);\n                        return;\n                    }\n\n                    results.add(cursor.primaryKey);\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Iterates over the keys in a given range and direction.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    keyStream(callback, ascending=true, query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const store = db.transaction([this._tableName], 'readonly').objectStore(this._tableName);\n            const openCursorRequest = store.openKeyCursor\n                ? store.openKeyCursor(query, ascending ? 'next' : 'prev')\n                : store.openCursor(query, ascending ? 'next' : 'prev');\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    try {\n                        if (callback(cursor.primaryKey)) {\n                            cursor.continue();\n                        } else {\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                } else {\n                    resolve();\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Iterates over the keys and values in a given range and direction.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    valueStream(callback, ascending=true, query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const openCursorRequest = db.transaction([this._tableName], 'readonly')\n                .objectStore(this._tableName)\n                .openCursor(query, ascending ? 'next' : 'prev');\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    try {\n                        if (callback(this.decode(cursor.value, cursor.primaryKey), cursor.primaryKey)) {\n                            cursor.continue();\n                        } else {\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                } else {\n                    resolve();\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is maximal for the given range.\n     * If the optional query is not given, it returns the object whose key is maximal.\n     * If the query is of type KeyRange, it returns the object whose primary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    async maxValue(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const openCursorRequest = db.transaction([this._tableName], 'readonly')\n                .objectStore(this._tableName)\n                .openCursor(query, 'prev');\n            openCursorRequest.onsuccess = event => {\n                try {\n                    const cursor = event.target.result;\n                    resolve(cursor ? this.decode(cursor.value, cursor.primaryKey) : undefined);\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns a promise of the key being maximal for the given range.\n     * If the optional query is not given, it returns the maximal key.\n     * If the query is of type KeyRange, it returns the key being maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    async maxKey(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const store = db.transaction([this._tableName], 'readonly').objectStore(this._tableName);\n            const openCursorRequest = store.openKeyCursor ? store.openKeyCursor(query, 'prev') : store.openCursor(query, 'prev');\n            openCursorRequest.onsuccess = () => resolve(openCursorRequest.result ? openCursorRequest.result.primaryKey : undefined);\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is minimal for the given range.\n     * If the optional query is not given, it returns the object whose key is minimal.\n     * If the query is of type KeyRange, it returns the object whose primary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    async minValue(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const openCursorRequest = db.transaction([this._tableName], 'readonly')\n                .objectStore(this._tableName)\n                .openCursor(query, 'next');\n            openCursorRequest.onsuccess = event => {\n                try {\n                    const cursor = event.target.result;\n                    resolve(cursor ? this.decode(cursor.value, cursor.primaryKey) : undefined);\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns a promise of the key being minimal for the given range.\n     * If the optional query is not given, it returns the minimal key.\n     * If the query is of type KeyRange, it returns the key being minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    async minKey(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const store = db.transaction([this._tableName], 'readonly').objectStore(this._tableName);\n            const openCursorRequest = store.openKeyCursor ? store.openKeyCursor(query, 'next') : store.openCursor(query, 'next');\n            openCursorRequest.onsuccess = () => resolve(openCursorRequest.result ? openCursorRequest.result.primaryKey : undefined);\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns the count of entries in the given range.\n     * If the optional query is not given, it returns the count of entries in the object store.\n     * If the query is of type KeyRange, it returns the count of entries within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    async count(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            let request;\n            // Edge compatibility\n            if (query) {\n                request = db.transaction([this._tableName], 'readonly')\n                    .objectStore(this._tableName)\n                    .count(query);\n            } else {\n                request = db.transaction([this._tableName], 'readonly')\n                    .objectStore(this._tableName)\n                    .count();\n            }\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    /**\n     * Returns the index of the given name.\n     * If the index does not exist, it returns undefined.\n     * @param {string} indexName The name of the requested index.\n     * @returns {IIndex} The index associated with the given name.\n     */\n    index(indexName) {\n        return this._indices.get(indexName);\n    }\n\n    /** @type {Promise.<IDBDatabase>} The underlying IDBDatabase. */\n    get backend() {\n        return this._db.backend;\n    }\n\n    /** @type {string} The own table name. */\n    get tableName() {\n        return this._tableName;\n    }\n\n    /**\n     * Internally applies a transaction to the store's state.\n     * This needs to be done in batch (as a db level transaction), i.e., either the full state is updated\n     * or no changes are applied.\n     * @param {Transaction} tx The transaction to apply.\n     * @returns {Promise} The promise resolves after applying the transaction.\n     * @protected\n     */\n    async _apply(tx) {\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const idbTx = db.transaction([this._tableName], 'readwrite');\n            const objSt = idbTx.objectStore(this._tableName);\n\n            if (tx._truncated) {\n                objSt.clear();\n            }\n            for (const key of tx._removed) {\n                objSt.delete(key);\n            }\n            for (const [key, value] of tx._modified) {\n                objSt.put(this.encode(value), key);\n            }\n\n            idbTx.oncomplete = () => resolve(true);\n            idbTx.onerror = reject;\n            idbTx.onabort = reject;\n        });\n    }\n\n    /**\n     * Empties the object store.\n     * @returns {Promise} The promise resolves after emptying the object store.\n     */\n    async truncate() {\n        const db = this._backend;\n        return new Promise((resolve, reject) => {\n            const getRequest = db.transaction([this._tableName], 'readonly')\n                .objectStore(this._tableName)\n                .clear();\n            getRequest.onsuccess = resolve;\n            getRequest.onerror = () => reject(getRequest.error);\n        });\n    }\n\n    /**\n     * Creates a new secondary index on the object store.\n     * Currently, all secondary indices are non-unique.\n     * They are defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     * Secondary indices may be multiEntry, i.e., if the keyPath resolves to an iterable object, each item within can\n     * be used to find this entry.\n     * If a new object does not possess the key path associated with that index, it is simply ignored.\n     *\n     * This function may only be called before the database is connected.\n     * Moreover, it is only executed on database version updates or on first creation.\n     * @param {string} indexName The name of the index.\n     * @param {string|Array.<string>} [keyPath] The path to the key within the object. May be an array for multiple levels.\n     * @param {IndexConfig} [options] An options object.\n     */\n    createIndex(indexName, keyPath, options = {}) {\n        let { multiEntry = false, upgradeCondition = null, unique = false } = options || {};\n\n        if (this._db.connected) throw new Error('Cannot create index while connected');\n        keyPath = keyPath || indexName;\n        const index = new PersistentIndex(this, indexName, keyPath, multiEntry, unique);\n        this._indices.set(indexName, index);\n        this._indicesToCreate.set(indexName, { index, upgradeCondition });\n    }\n\n    /**\n     * Deletes a secondary index from the object store.\n     * @param indexName\n     * @param {{upgradeCondition:?boolean|?function(oldVersion:number, newVersion:number):boolean}} [options]\n     */\n    deleteIndex(indexName, options={}) {\n        let { upgradeCondition = null } = options || {};\n\n        if (this._db.connected) throw new Error('Cannot delete index while connected');\n        this._indicesToDelete.push({ indexName, upgradeCondition });\n    }\n\n    /**\n     * Closes the object store and potential connections.\n     * @returns {Promise} The promise resolves after closing the object store.\n     */\n    close() {\n        // Nothing to do here, it is all done on the DB level.\n        return this._db.close();\n    }\n\n    /**\n     * Returns the necessary information in order to flush a combined transaction.\n     * @param {Transaction} tx The transaction that should be applied to this backend.\n     * @returns {Promise.<EncodedTransaction>} A special transaction object bundling all necessary information.\n     */\n    async applyCombined(tx) {\n        const encodedTx = new EncodedTransaction(this._tableName);\n\n        if (tx._truncated) {\n            encodedTx.truncate();\n        }\n\n        for (const key of tx._removed) {\n            encodedTx.remove(key);\n        }\n        for (const [key, value] of tx._modified) {\n            encodedTx.put(key, this.encode(value));\n        }\n        return encodedTx;\n    }\n\n    /**\n     * Checks whether an object store implements the ISynchronousObjectStore interface.\n     * @returns {boolean} The transaction object.\n     */\n    isSynchronous() {\n        return false;\n    }\n}\nClass.register(IDBBackend);\n","/**\n * @implements {IJungleDB}\n */\nclass JungleDB {\n    /**\n     * Initiates a new database connection. All changes to the database structure\n     * require an increase in the version number.\n     * Whenever new object stores need to be created, old ones deleted,\n     * or indices created/deleted, the dbVersion number has to be increased.\n     * When the version number increases, the given function onUpgradeNeeded is called\n     * after modifying the database structure.\n     * @param {string} name The name of the database.\n     * @param {number} dbVersion The current version of the database.\n     * @param {{onUpgradeNeeded:?function(oldVersion:number, newVersion:number)}} [options]\n     */\n    constructor(name, dbVersion, options = {}) {\n        if (dbVersion <= 0) throw new Error('The version provided must not be less or equal to 0');\n        this._databaseDir = name;\n        this._dbVersion = dbVersion;\n        this._onUpgradeNeeded = options.onUpgradeNeeded;\n        this._connected = false;\n        this._objectStores = new Map();\n        this._objectStoreBackends = new Map();\n        this._objectStoresToDelete = [];\n    }\n\n    /**\n     * @type {IDBFactory} The browser's IDB factory.\n     * @private\n     */\n    get _indexedDB() {\n        return window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\n    }\n\n    /**\n     * Connects to the indexedDB.\n     * @returns {Promise.<IDBDatabase>} A promise resolving on successful connection.\n     * The raw IDBDatabase object should not be used.\n     */\n    connect() {\n        if (this._db) return Promise.resolve(this._db);\n\n        const request = this._indexedDB.open(this._databaseDir, this._dbVersion);\n        const that = this;\n\n        return new Promise((resolve, reject) => {\n            request.onsuccess = () => {\n                that._connected = true;\n                that._db = request.result;\n                resolve(request.result);\n            };\n\n            request.onerror = reject;\n            request.onupgradeneeded = event => that._initDB(event, request);\n        });\n    }\n\n    /**\n     * Internal method that is called when a db upgrade is required.\n     * @param {IDBVersionChangeEvent} event The obupgradeneeded event.\n     * @param {IDBRequest} request\n     * @returns {Promise.<void>} A promise that resolves after successful completion.\n     * @private\n     */\n    async _initDB(event, request) {\n        const db = event.target.result;\n\n        // Delete existing ObjectStores.\n        for (const { tableName, upgradeCondition } of this._objectStoresToDelete) {\n            if (db.objectStoreNames.contains(tableName) && (upgradeCondition === null || upgradeCondition === true || (typeof upgradeCondition === 'function' && upgradeCondition(event.oldVersion, event.newVersion)))) {\n                db.deleteObjectStore(tableName);\n            }\n        }\n        this._objectStoresToDelete = [];\n\n        // Create new ObjectStores.\n        for (const [tableName, { backend, upgradeCondition }] of this._objectStoreBackends) {\n            let IDBobjStore;\n            // Only check upgradeCondition if object store does not already exist!\n            if (!db.objectStoreNames.contains(tableName)\n                && (upgradeCondition === null || upgradeCondition === true\n                    || (typeof upgradeCondition === 'function' && upgradeCondition(event.oldVersion, event.newVersion)))) {\n                IDBobjStore = db.createObjectStore(tableName);\n            } else {\n                IDBobjStore = request.transaction.objectStore(tableName);\n            }\n            // Create indices.\n            backend.init(IDBobjStore, event.oldVersion, event.newVersion);\n        }\n        this._objectStoreBackends.clear();\n\n        // Call user defined function if requested.\n        if (this._onUpgradeNeeded) {\n            await this._onUpgradeNeeded(event.oldVersion, event.newVersion);\n        }\n    }\n\n    /** @type {IDBDatabase} The underlying IDBDatabase. */\n    get backend() {\n        return this._db;\n    }\n\n    /** @type {boolean} Whether a connection is established. */\n    get connected() {\n        return this._connected;\n    }\n\n    /**\n     * Returns the ObjectStore object for a given table name.\n     * @param {string} tableName The table name to access.\n     * @returns {ObjectStore} The ObjectStore object.\n     */\n    getObjectStore(tableName) {\n        return this._objectStores.get(tableName);\n    }\n\n    /**\n     * Creates a volatile object store (non-persistent).\n     * @param {{codec:?ICodec}} [options] An options object.\n     * @returns {ObjectStore}\n     */\n    static createVolatileObjectStore(options = {}) {\n        const { codec = null } = options || {};\n        return new ObjectStore(new InMemoryBackend('', codec), null);\n    }\n\n    /**\n     * Creates a new object store (and allows to access it).\n     * This method always has to be called before connecting to the database.\n     * If it is not called, the object store will not be accessible afterwards.\n     * If a call is newly introduced, but the database version did not change,\n     * the table does not exist yet.\n     * @param {string} tableName The name of the object store.\n     * @param {ObjectStoreConfig} [options] An options object.\n     * @returns {IObjectStore}\n     */\n    createObjectStore(tableName, options = {}) {\n        const { codec = null, persistent = true, upgradeCondition = null, enableLruCache = true, lruCacheSize = CachedBackend.MAX_CACHE_SIZE, rawLruCacheSize = 0 } = options || {};\n\n        if (this._connected) throw new Error('Cannot create ObjectStore while connected');\n        if (this._objectStores.has(tableName)) {\n            return this._objectStores.get(tableName);\n        }\n\n        // Create backend\n        let backend = null;\n        if (persistent) {\n            backend = new IDBBackend(this, tableName, codec);\n        } else {\n            backend = new InMemoryBackend(tableName, codec);\n        }\n        // Create cache if enabled\n        let cachedBackend = backend;\n        if (persistent && enableLruCache) {\n            cachedBackend = new CachedBackend(backend, lruCacheSize, rawLruCacheSize);\n        }\n\n        const objStore = new ObjectStore(cachedBackend, this, tableName);\n        this._objectStores.set(tableName, objStore);\n        this._objectStoreBackends.set(tableName, { backend, upgradeCondition });\n        return objStore;\n    }\n\n    /**\n     * Deletes an object store.\n     * This method has to be called before connecting to the database.\n     * @param {string} tableName\n     * @param {{upgradeCondition:?boolean|?function(oldVersion:number, newVersion:number):boolean}, indexNames:Array.<string>} [options]\n     */\n    deleteObjectStore(tableName, options = {}) {\n        let { upgradeCondition = null } = options || {};\n\n        if (this._connected) throw new Error('Cannot delete ObjectStore while connected');\n        this._objectStoresToDelete.push({ tableName, upgradeCondition });\n    }\n\n    /**\n     * Closes the database connection.\n     * @returns {Promise} The promise resolves after closing the database.\n     */\n    async close() {\n        if (this._connected) {\n            this._connected = false;\n            this.backend.close();\n        }\n    }\n\n    /**\n     * Fully deletes the database.\n     * @returns {Promise} The promise resolves after deleting the database.\n     */\n    async destroy() {\n        await this.close();\n        return new Promise((resolve, reject) => {\n            const req = this._indexedDB.deleteDatabase(this._databaseDir);\n            req.onsuccess = resolve;\n            req.onerror = reject;\n        });\n    }\n\n    /**\n     * Is used to commit multiple transactions atomically.\n     * This guarantees that either all transactions are written or none.\n     * The method takes a list of transactions (at least two transactions).\n     * If the commit was successful, the method returns true, and false otherwise.\n     * @param {Transaction|CombinedTransaction} tx1 The first transaction\n     * (a CombinedTransaction object is only used internally).\n     * @param {Transaction} tx2 The second transaction.\n     * @param {...Transaction} txs A list of further transactions to commit together.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    static async commitCombined(tx1, tx2, ...txs) {\n        // If tx1 is a CombinedTransaction, flush it to the database.\n        if (tx1 instanceof CombinedTransaction) {\n            const functions = [];\n            /** @type {Array.<EncodedTransaction>} */\n            const encodedTxs = [];\n            const tableNames = [];\n\n            const infos = await Promise.all(tx1.transactions.map(tx => tx.objectStore._backend.applyCombined(tx)));\n            for (const info of infos) {\n                let tmp = info;\n                if (!Array.isArray(info)) {\n                    tmp = [info];\n                }\n                for (const innerInfo of tmp) {\n                    if (typeof innerInfo === 'function') {\n                        functions.push(innerInfo);\n                    } else {\n                        encodedTxs.push(innerInfo);\n                        tableNames.push(innerInfo.tableName);\n                    }\n                }\n            }\n\n            const db = tx1.backend !== null ? tx1.backend.backend : null;\n            return new Promise((resolve, reject) => {\n                if (tableNames.length > 0) {\n                    const idbTx = db.transaction(tableNames, 'readwrite');\n\n                    for (const encodedTx of encodedTxs) {\n                        const objSt = idbTx.objectStore(encodedTx.tableName);\n\n                        if (encodedTx.truncated) {\n                            objSt.clear();\n                        }\n                        for (const key of encodedTx.removed) {\n                            objSt.delete(key);\n                        }\n                        for (const [key, value] of encodedTx.modified) {\n                            objSt.put(value, key);\n                        }\n                    }\n\n                    idbTx.oncomplete = () => {\n                        Promise.all(functions.map(f => f())).then(() => {\n                            resolve(true);\n                        });\n                    };\n                    idbTx.onerror = reject;\n                    idbTx.onabort = reject;\n                } else {\n                    Promise.all(functions.map(f => f())).then(() => {\n                        resolve(true);\n                    });\n                }\n            });\n        }\n        txs.push(tx1);\n        txs.push(tx2);\n        if (!txs.every(tx => tx instanceof Transaction)) {\n            throw new Error('Invalid arguments supplied');\n        }\n        const ctx = new CombinedTransaction(...txs);\n        return ctx.commit();\n    }\n\n    toString() {\n        return `JungleDB{name=${this._databaseDir}}`;\n    }\n}\n/**\n * Empty encodings.\n */\nJungleDB.JSON_ENCODING = {};\nJungleDB.BINARY_ENCODING = {};\nJungleDB.STRING_ENCODING = {};\nJungleDB.NUMBER_ENCODING = {};\nJungleDB.GENERIC_ENCODING = {};\nClass.register(JungleDB);\n","/**\n * This class represents a wrapper around the IndexedDB indices.\n * @implements {IIndex}\n */\nclass PersistentIndex {\n    /**\n     * @param {IDBBackend} objectStore\n     * @param {string} indexName\n     * @param {string|Array.<string>} keyPath\n     * @param {boolean} [multiEntry]\n     * @param {boolean} [unique]\n     */\n    constructor(objectStore, indexName, keyPath, multiEntry = false, unique = false) {\n        this._objectStore = objectStore;\n        this._indexName = indexName;\n        this._keyPath = keyPath;\n        this._multiEntry = multiEntry;\n        this._unique = unique;\n    }\n\n    /**\n     * Reinitialises the index.\n     * @returns {Promise} The promise resolves after emptying the index.\n     */\n    async truncate() {\n        // Will automatically be truncated.\n    }\n\n    /**\n     * The key path associated with this index.\n     * A key path is defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     * @type {string|Array.<string>}\n     */\n    get keyPath() {\n        return this._keyPath;\n    }\n\n    /**\n     * This value determines whether the index supports multiple secondary keys per entry.\n     * If so, the value at the key path is considered to be an iterable.\n     * @type {boolean}\n     */\n    get multiEntry() {\n        return this._multiEntry;\n    }\n\n    /**\n     * This value determines whether the index is a unique constraint.\n     * @type {boolean}\n     */\n    get unique() {\n        return this._unique;\n    }\n\n    /**\n     * Internal method to access IDB index.\n     * @param {IDBDatabase} db The indexed DB.\n     * @returns {IDBIndex} The indexedDB's index object.\n     * @private\n     */\n    _index(db) {\n        return db.transaction([this._objectStore.tableName], 'readonly')\n            .objectStore(this._objectStore.tableName)\n            .index(this._indexName);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary keys fulfill the given query.\n     * If the optional query is not given, it returns all objects in the index.\n     * If the query is of type KeyRange, it returns all objects whose secondary keys are within this range.\n     * @param {KeyRange} [query] Optional query to check secondary keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    async values(query = null, limit = null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const results = [];\n            const request = this._index(db).openCursor(query);\n            request.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    // Limit\n                    if (limit !== null && results.length >= limit) {\n                        resolve(results);\n                        return;\n                    }\n\n                    try {\n                        results.push(this._objectStore.decode(cursor.value, cursor.primaryKey));\n                    } catch (e) {\n                        reject(e);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated objects' secondary keys are in the given range.\n     * If the optional query is not given, it returns all primary keys in the index.\n     * If the query is of type KeyRange, it returns all primary keys for which the secondary key is within this range.\n     * @param {KeyRange} [query] Optional query to check the secondary keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of primary keys relevant to the query.\n     */\n    async keys(query = null, limit = null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const results = new Set();\n            const index = this._index(db);\n            const openCursorRequest = index.openKeyCursor ? index.openKeyCursor(query) : index.openCursor(query);\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    // Limit\n                    if (limit !== null && results.size >= limit) {\n                        resolve(results);\n                        return;\n                    }\n\n                    results.add(cursor.primaryKey);\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary key is maximal for the given range.\n     * If the optional query is not given, it returns the objects whose secondary key is maximal within the index.\n     * If the query is of type KeyRange, it returns the objects whose secondary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of array of objects relevant to the query.\n     */\n    async maxValues(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const results = [];\n            let maxKey = null;\n            const request = this._index(db).openCursor(query, 'prev');\n            request.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor && maxKey === null) {\n                    maxKey = cursor.key;\n                }\n                // Only iterate until key changes.\n                if (cursor && ComparisonUtils.equals(maxKey, cursor.key)) {\n                    try {\n                        results.push(this._objectStore.decode(cursor.value, cursor.primaryKey));\n                    } catch (e) {\n                        reject(e);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated secondary keys are maximal for the given range.\n     * If the optional query is not given, it returns the set of primary keys, whose associated secondary key is maximal within the index.\n     * If the query is of type KeyRange, it returns the set of primary keys, whose associated secondary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<*>>} A promise of the key relevant to the query.\n     */\n    async maxKeys(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const results = new Set();\n            let maxKey = null;\n            const index = this._index(db);\n            const request = index.openKeyCursor ? index.openKeyCursor(query, 'prev') : index.openCursor(query, 'prev');\n            request.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor && maxKey === null) {\n                    maxKey = cursor.key;\n                }\n                // Only iterate until key changes.\n                if (cursor && ComparisonUtils.equals(maxKey, cursor.key)) {\n                    results.add(cursor.primaryKey);\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary key is minimal for the given range.\n     * If the optional query is not given, it returns the objects whose secondary key is minimal within the index.\n     * If the query is of type KeyRange, it returns the objects whose secondary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of array of objects relevant to the query.\n     */\n    async minValues(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const results = [];\n            let minKey = null;\n            const request = this._index(db).openCursor(query, 'next');\n            request.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor && minKey === null) {\n                    minKey = cursor.key;\n                }\n                // Only iterate until key changes.\n                if (cursor && ComparisonUtils.equals(minKey, cursor.key)) {\n                    try {\n                        results.push(this._objectStore.decode(cursor.value, cursor.primaryKey));\n                    } catch (e) {\n                        reject(e);\n                    }\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated secondary keys are minimal for the given range.\n     * If the optional query is not given, it returns the set of primary keys, whose associated secondary key is minimal within the index.\n     * If the query is of type KeyRange, it returns the set of primary keys, whose associated secondary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<*>>} A promise of the key relevant to the query.\n     */\n    async minKeys(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const results = new Set();\n            let minKey = null;\n            const index = this._index(db);\n            const request = index.openKeyCursor ? index.openKeyCursor(query, 'next') : index.openCursor(query, 'next');\n            request.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor && minKey === null) {\n                    minKey = cursor.key;\n                }\n                // Only iterate until key changes.\n                if (cursor && ComparisonUtils.equals(minKey, cursor.key)) {\n                    results.add(cursor.primaryKey);\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    /**\n     * Iterates over the primary keys in a given range of secondary keys and direction.\n     * The order is determined by the secondary keys first and by the primary keys second.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    async keyStream(callback, ascending=true, query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const index = this._index(db);\n            const openCursorRequest = index.openKeyCursor\n                ? index.openKeyCursor(query, ascending ? 'next' : 'prev')\n                : index.openCursor(query, ascending ? 'next' : 'prev');\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    try {\n                        if (callback(cursor.primaryKey)) {\n                            cursor.continue();\n                        } else {\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                } else {\n                    resolve();\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Iterates over the values of the store in a given range of secondary keys and direction.\n     * The order is determined by the secondary keys first and by the primary keys second.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolved after all elements have been streamed.\n     */\n    async valueStream(callback, ascending=true, query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            const openCursorRequest = this._index(db).openCursor(query, ascending ? 'next' : 'prev');\n            openCursorRequest.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    try {\n                        if (callback(this._objectStore.decode(cursor.value, cursor.primaryKey), cursor.primaryKey)) {\n                            cursor.continue();\n                        } else {\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                } else {\n                    resolve();\n                }\n            };\n            openCursorRequest.onerror = () => reject(openCursorRequest.error);\n        });\n    }\n\n    /**\n     * Returns the count of entries, whose secondary key is in the given range.\n     * If the optional query is not given, it returns the count of entries in the index.\n     * If the query is of type KeyRange, it returns the count of entries, whose secondary key is within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    async count(query=null) {\n        query = IDBTools.convertKeyRange(query);\n        const db = await this._objectStore.backend;\n        return new Promise((resolve, reject) => {\n            let request;\n            // Edge compatibility\n            if (query) {\n                request = this._index(db).count(query);\n            } else {\n                request = this._index(db).count();\n            }\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n}\nClass.register(PersistentIndex);\n\n","/**\n * Returns an iterator over an array in a specific direction.\n * It does *not* handle or reflect changes of the array while iterating it.\n * @memberOf Array\n * @param {boolean} ascending Whether to traverse the array in ascending direction.\n * @returns {{next:function():*, peek:function():*, hasNext:function():boolean}} An iterator.\n */\nArray.prototype.iterator = function(ascending=true) {\n    let nextIndex = ascending ? 0 : this.length-1;\n\n    return {\n        next: () => {\n            return nextIndex >= 0 && nextIndex < this.length ?\n                this[ascending ? nextIndex++ : nextIndex--] : undefined;\n        },\n        hasNext: () => {\n            return nextIndex >= 0 && nextIndex < this.length;\n        },\n        peek: () => {\n            return nextIndex >= 0 && nextIndex < this.length ?\n                this[nextIndex] : undefined;\n        }\n    };\n};\n","/*\n B+ Tree processing\n Version 2.0.0\n Based on code by Graham O'Neill, April 2013\n Modified by Pascal Berrang, July 2017\n\n ------------------------------------------------------------------------------\n\n Copyright (c) 2017 Graham O'Neill & Pascal Berrang\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n\n ------------------------------------------------------------------------------\n\n */\n\n/**\n * This abstract class describes a general Node within a B+Tree.\n * Each node owns an array of keys and has an id.\n */\nclass Node {\n    /**\n     * Creates a new node.\n     * @param {Array.<*>} [keys] Optional array of keys (default is empty).\n     */\n    constructor(keys = []) {\n        this._keys = keys;\n    }\n\n    /**\n     * @type {Array.<*>} The array of keys.\n     */\n    get keys() {\n        return this._keys;\n    }\n}\nClass.register(Node);\n\n/**\n * A Leaf Node in the B+Tree.\n * @extends Node\n */\nclass LeafNode extends Node {\n    /**\n     * Creates a new leaf node.\n     * Leaf nodes store key value pairs,\n     * hence the keys and records arrays are required to have the same length.\n     * In an index, the keys array usually stores the secondary key,\n     * while the records array stores the corresponding primary key.\n     * The B+Tree ensures that the items in the keys array are ordered ascending.\n     * @param {Array.<*>} [keys] Optional array of keys (default is empty).\n     * @param {Array.<*>} [records] Optional array of records (default is empty).\n     */\n    constructor(keys=[], records=[]) {\n        if (keys.length !== records.length) {\n            throw new Error('Keys and records must have the same length');\n        }\n        super(keys);\n        this._records = records;\n        this.prevLeaf = null;\n        this.nextLeaf = null;\n    }\n\n    /**\n     * @type {Array.<*>} The list of records associated with the keys.\n     */\n    get records() {\n        return this._records;\n    }\n\n    /**\n     * Returns whether this is a leaf node.\n     * @returns {boolean} True, since it is a leaf node.\n     */\n    isLeaf() {\n        return true;\n    }\n\n    /**\n     * Searches the node for a specific key and returns its position if found.\n     * The near parameter allows to find either an exact match or the first key\n     * greater/less or equal than the specified key.\n     *\n     * Since the B+tree limits the number of records per leaf node,\n     * the complexity of this method is in O([order/2, order-1]).\n     * @param {*} key The key to look for.\n     * @param {BTree.NEAR_MODE} near\n     * @returns {number} The index of the match if found, -1 otherwise.\n     */\n    getItem(key, near) {\n        const keys = this._keys;\n        // Find item matching the query.\n        if (near === BTree.NEAR_MODE.GE) {\n            for (let i=0, len=keys.length; i<len; ++i) {\n                if (ComparisonUtils.compare(key, keys[i]) <= 0) return i;\n            }\n        } else if (near === BTree.NEAR_MODE.LE) {\n            for (let i=keys.length - 1; i>=0; --i) {\n                if (ComparisonUtils.compare(key, keys[i]) >= 0) return i;\n            }\n        } else {\n            for (let i=0, len=keys.length; i<len; ++i) {\n                if (ComparisonUtils.equals(key, keys[i])) return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Adds a key, record pair to this leaf node.\n     * By definition, the key is inserted into the keys of this leaf node,\n     * such that the ascending order of the keys is maintained.\n     * @param {*} key The key to insert.\n     * @param {*} record The corresponding record to insert.\n     * @returns {number} The position it was inserted at.\n     */\n    addKey(key, record) {\n        let insertPos = this._keys.length;\n        // Find position to insert.\n        for (let i=0, len=insertPos; i<len; ++i) {\n            // Key already exists.\n            if (ComparisonUtils.equals(key, this._keys[i])) {\n                return -1;\n            }\n            // Update potential position.\n            if (ComparisonUtils.compare(key, this._keys[i]) <= 0) {\n                insertPos = i;\n                break;\n            }\n        }\n        // Insert key/record.\n        this._keys.splice(insertPos, 0, key);\n        this._records.splice(insertPos, 0, record);\n        return insertPos;\n    }\n\n    /**\n     * Splits the leaf node into two nodes (this + one new node).\n     * The resulting nodes should have almost equal sizes.\n     * The new node will return the upper half of the previous entries.\n     * @returns {LeafNode} The new leaf node containing the upper half of entries.\n     */\n    split() {\n        const mov = Math.floor(this._keys.length/2);\n        const newKeys = [], newRecords = [];\n        for (let i = 0; i < mov; ++i) {\n            newKeys.unshift(this._keys.pop());\n            newRecords.unshift(this._records.pop());\n        }\n        const newL = new LeafNode(newKeys, newRecords);\n        newL.prevLeaf = this;\n        newL.nextLeaf = this.nextLeaf;\n        if (this.nextLeaf !== null) this.nextLeaf.prevLeaf = newL;\n        this.nextLeaf = newL;\n        return newL;\n    }\n\n    /**\n     * Merges two leaf nodes together (this + frNod).\n     * The given node frNod is no longer connected afterwards.\n     * @param {LeafNode} frNod The node to merge with.\n     * @param {InnerNode} paNod The parent node that needs to be updated.\n     * @param {*} frKey The key of the old leaf in the parent.\n     */\n    merge(frNod, paNod, frKey) {\n        // Append keys/records.\n        for (let i=0, len=frNod.keys.length; i<len; ++i) {\n            this._keys.push(frNod.keys[i]);\n            this._records.push(frNod.records[i]);\n        }\n        // Update leaf pointers.\n        this.nextLeaf = frNod.nextLeaf;\n        if (frNod.nextLeaf !== null) frNod.nextLeaf.prevLeaf = this;\n        frNod.prevLeaf = null;\n        frNod.nextLeaf = null;\n        // Update parent: find position of old leaf.\n        let pos = paNod.keys.length-1;\n        for (let i=pos; i>=0; --i) {\n            if (ComparisonUtils.equals(paNod.keys[i], frKey)) {\n                pos = i;\n                break;\n            }\n        }\n        // Delete old key from parent.\n        paNod.keys.splice(pos, 1);\n        paNod.nodePointers.splice(pos+1, 1);\n    }\n\n}\nClass.register(LeafNode);\n\n/**\n * An Inner Node in the B+Tree.\n * @extends Node\n */\nclass InnerNode extends Node {\n    /**\n     * Creates a new inner node.\n     * The only key values that appear in the internal nodes are the first key values from each leaf,\n     * with the exception of the key from the very first leaf which isn't included.\n     * Each key value that appears in the internal nodes only appears once.\n     * @param {Array.<*>} [keys] The first key of each child node (except for the first one).\n     * @param {Array.<Node>} [nodePointers] The pointers to the child nodes.\n     */\n    constructor(keys=[], nodePointers=[]) {\n        super(keys);\n        this._nodePointers = nodePointers;\n    }\n\n    /**\n     * Returns whether this is a leaf node.\n     * @returns {boolean} False, since it is an inner node.\n     */\n    isLeaf() {\n        return false;\n    }\n\n    /**\n     * @type {Array.<Node>} The pointers to the children.\n     */\n    get nodePointers() {\n        return this._nodePointers;\n    }\n\n    /**\n     * Searches the node for a specific key and returns the matching child's position.\n     *\n     * Since the B+tree limits the number of records per leaf node,\n     * the complexity of this method is in O([(order-1)/2, order-1]).\n     * @param {*} key The key to look for.\n     * @returns {number} The index of the match.\n     */\n    getItem(key) {\n        const len = this._keys.length;\n        for (let i=0; i<len; ++i) {\n            if (key < this._keys[i]) return i;\n        }\n        return this._keys.length;\n    }\n\n    /**\n     * Adds a key corresponding to a new child node to this inner node.\n     * By definition, the key is inserted into the keys of this leaf node,\n     * such that the ascending order of the keys is maintained.\n     * @param {*} key The key to insert.\n     * @param {Node} ptrL The pointer to the corresponding child node.\n     * @param {Node} ptrR The pointer to the node right of the child node.\n     * @returns {number} The position it was inserted at.\n     */\n    addKey(key, ptrL, ptrR) {\n        const len = this._keys.length;\n        let insertPos = len;\n        // Find position to insert.\n        for (let i=0; i<len; ++i) {\n            if (ComparisonUtils.compare(key, this._keys[i]) <= 0) {\n                insertPos = i;\n                break;\n            }\n        }\n        // Update keys and pointers.\n        this._keys.splice(insertPos, 0, key);\n        this._nodePointers.splice(insertPos, 0, ptrL);\n        this._nodePointers[insertPos+1] = ptrR;\n    }\n\n    /**\n     * Splits the node into two nodes (this + one new node).\n     * The resulting nodes should have almost equal sizes.\n     * The new node will return the upper half of the previous entries.\n     * @returns {InnerNode} The new inner node containing the upper half of entries.\n     */\n    split() {\n        const mov = Math.ceil(this._keys.length/2) - 1;\n        const newNodePointers = [this._nodePointers.pop()];\n        const newKeys = [];\n        for (let i=mov-1; i>=0; --i) {\n            newKeys.unshift(this._keys.pop());\n            newNodePointers.unshift(this._nodePointers.pop());\n        }\n        return new InnerNode(newKeys, newNodePointers);\n    }\n\n    /**\n     * Merges two inner nodes together (this + frNod).\n     * The given node frNod is no longer connected afterwards.\n     * @param {InnerNode} frNod The node to merge with.\n     * @param {InnerNode} paNod The parent node that needs to be updated.\n     * @param {number} paItm The position in the parent.\n     */\n    merge(frNod, paNod, paItm) {\n        const del = paNod.keys[paItm];\n        // Add key from parent.\n        this._keys.push(del);\n        // Add keys and nodePointers from merged node.\n        for (let i=0, len=frNod.keys.length; i<len; ++i) {\n            this._keys.push(frNod.keys[i]);\n            this._nodePointers.push(frNod.nodePointers[i]);\n        }\n        // Add last nodePointer as well.\n        this._nodePointers.push(frNod.nodePointers[frNod.nodePointers.length-1]);\n        paNod.keys.splice(paItm, 1); // Delete old key from parent.\n        paNod.nodePointers.splice(paItm+1, 1); // Delete old pointer from parent.\n        return del;\n    }\n}\nClass.register(InnerNode);\n\n/**\n * The actual BTree implementation.\n * @implements {IBTree}\n */\nclass BTree {\n    /**\n     * Creates a new BTree of a given order.\n     * The order specifies how many entries a single node can contain.\n     * A leaf node generally contains [order/2, order-1] entries,\n     * while an inner node contains [(order-1)/2, order-1] entries.\n     * @param {number} order The order of the tree.\n     */\n    constructor(order=7) {\n        this._root = new LeafNode();\n        this._maxkey = order-1;\n        this._minkyl = Math.floor(order/2);\n        this._minkyn = Math.floor(this._maxkey/2);\n        this._leaf = null;\n        this._item = -1;\n\n        this._key = null;\n        this._record = null;\n        this._length = 0;\n        this._eof = true;\n        this._found = false;\n    }\n\n    /**\n     * The total number of records.\n     * Note that if the record is a list/set of records, these are not counted.\n     * @type {number}\n     */\n    get length() {\n        return this._length;\n    }\n\n    /**\n     * The current key as returned by any operation.\n     * It is null if there is no matching record.\n     * @type {*}\n     */\n    get currentKey() {\n        return this._key;\n    }\n\n    /**\n     * The current record as returned by any operation.\n     * It is null if there is no matching record.\n     * @type {*}\n     */\n    get currentRecord() {\n        return this._record;\n    }\n\n    /**\n     * Inserts a new key-record pair into the BTree, if there is no entry for that key.\n     * The current record and current key are set to the new entry in case of success\n     * or the existing entry if present.\n     * @param {*} key The unique key for the record.\n     * @param {*} rec The record associated with the key.\n     * @returns {boolean} True if the record was inserted, false if there was already a record with that key.\n     */\n    insert(key, rec) {\n        const stack = [];\n        this._leaf = this._root;\n        while (!this._leaf.isLeaf()) {\n            stack.push(this._leaf);\n            this._item = this._leaf.getItem(key);\n            this._leaf = this._leaf.nodePointers[this._item];\n        }\n        this._item = this._leaf.addKey(key, rec);\n        this._key = key;\n        this._eof = false;\n        if (this._item === -1) {\n            this._found = true;\n            this._item = this._leaf.getItem(key, false);\n            this._record = this._leaf.records[this._item];\n        } else {\n            this._found = false;\n            this._record = rec;\n            this._length++;\n            if (this._leaf.keys.length > this._maxkey) {\n                let pL = this._leaf;\n                let pR = this._leaf.split();\n                let ky = pR.keys[0];\n                this._item = this._leaf.getItem(key, false);\n                if (this._item === -1) {\n                    this._leaf = this._leaf.nextLeaf;\n                    this._item = this._leaf.getItem(key, false);\n                }\n                while (true) { // eslint-disable-line no-constant-condition\n                    if (stack.length === 0) {\n                        const newN = new InnerNode();\n                        newN.keys[0] = ky;\n                        newN.nodePointers[0] = pL;\n                        newN.nodePointers[1] = pR;\n                        this._root = newN;\n                        break;\n                    }\n                    const nod = stack.pop();\n                    nod.addKey(ky, pL, pR);\n                    if (nod.keys.length <= this._maxkey) break;\n                    pL = nod;\n                    pR = nod.split();\n                    ky = nod.keys.pop();\n                }\n            }\n        }\n        return (!this._found);\n    }\n\n    /**\n     * Removes a key-record pair from the BTree.\n     * In case of successful deletion, the current record and key will be set to the next entry greater or equal.\n     * If no record was found, they will be reset to null.\n     * @param {*} key The unique key for the record.\n     * @returns {boolean} True if the record was deleted, false if there is no such record.\n     */\n    remove(key) {\n        if (typeof key === 'undefined') {\n            if (this._item === -1) {\n                this._eof = true;\n                this._found = false;\n                return false;\n            }\n            key = this._leaf.keys[this._item];\n        }\n        this._del(key);\n        if (!this._found) {\n            this._item = -1;\n            this._eof = true;\n            this._key = null;\n            this._record = null;\n        } else {\n            this.seek(key, BTree.NEAR_MODE.GE);\n            this._found = true;\n        }\n        return (this._found);\n    }\n\n    /**\n     * Searches the tree for a specific key and advances the current key/record pointers if found.\n     * By default only an exact key match is found, but the near parameter also allows to advance to the next entry\n     * greater/less or equal than the specified key.\n     * @param {*} key The key to look for.\n     * @param {BTree.NEAR_MODE} [near] Optional parameter, specifies to look for a key k' =/≤/≥ key.\n     * @returns {boolean} True if such a key was found, false otherwise.\n     */\n    seek(key, near=BTree.NEAR_MODE.NONE) {\n        this._leaf = this._root;\n        while (!this._leaf.isLeaf()) {\n            this._item = this._leaf.getItem(key);\n            this._leaf = this._leaf.nodePointers[this._item];\n        }\n        this._item = this._leaf.getItem(key, near);\n        if (near === BTree.NEAR_MODE.GE && this._item === -1 && this._leaf.nextLeaf !== null) {\n            this._leaf = this._leaf.nextLeaf;\n            this._item = 0;\n        }\n        if (near === BTree.NEAR_MODE.LE && this._item === -1 && this._leaf.prevLeaf !== null) {\n            this._leaf = this._leaf.prevLeaf;\n            this._item = this._leaf.records.length - 1;\n        }\n        if (this._item === -1) {\n            this._eof = true;\n            this._key = null;\n            this._found = false;\n            this._record = null;\n        } else {\n            this._eof = false;\n            this._found = (this._leaf.keys[this._item] === key);\n            this._key = this._leaf.keys[this._item];\n            this._record = this._leaf.records[this._item];\n        }\n        return (!this._eof);\n    }\n\n    /**\n     * Advances the current key/record pointers by a given number of steps.\n     * Default is advancing by 1, which means the next record (the new key will thus be the next larger key).\n     * -1 means the previous record (the new key will thus be the next smaller key).\n     * @param {number} [cnt] The number of records to advance (may be negative).\n     * @returns {boolean} True if there is a record to advance to, false otherwise.\n     */\n    skip(cnt = 1) {\n        if (typeof cnt !== 'number') cnt = 1;\n        if (this._item === -1 || this._leaf === null) this._eof = true;\n        if (cnt > 0) {\n            while (!this._eof && this._leaf.keys.length - this._item - 1 < cnt) {\n                cnt = cnt - this._leaf.keys.length + this._item;\n                this._leaf = this._leaf.nextLeaf;\n                if (this._leaf === null) {\n                    this._eof = true;\n                } else {\n                    this._item = 0;\n                }\n            }\n            if (!this._eof) this._item = this._item + cnt;\n        } else {\n            cnt = -cnt;\n            while (!this._eof && this._item < cnt) {\n                cnt = cnt - this._item - 1;\n                this._leaf = this._leaf.prevLeaf;\n                if (this._leaf === null) {\n                    this._eof = true;\n                } else {\n                    this._item = this._leaf.keys.length-1;\n                }\n            }\n            if (!this._eof) {\n                this._item = this._item - cnt;\n            }\n        }\n        if (this._eof) {\n            this._item = -1;\n            this._found = false;\n            this._key = null;\n            this._record = null;\n        } else {\n            this._found = true;\n            this._key = this._leaf.keys[this._item];\n            this._record = this._leaf.records[this._item];\n        }\n        return (this._found);\n    }\n\n    /**\n     * Jumps to the cnt entry starting from the smallest key (i.e., leftmost leaf, first entry) if cnt > 0.\n     * If cnt < 0, it jumps to the cnt entry starting from the largest key (i.e., rightmost leaf, last entry).\n     * @param {number} [cnt] The record to jump to (may be negative).\n     * @returns {boolean} True if there is a record to jump to, false otherwise.\n     */\n    goto(cnt) {\n        if (cnt < 0) {\n            this.goBottom();\n            if (!this._eof) this.skip(cnt+1);\n        } else {\n            this.goTop();\n            if (!this._eof) this.skip(cnt-1);\n        }\n        return (this._found);\n    }\n\n    /**\n     * Returns the index of the current entry (key/record) in a sorted list of all entries.\n     * For the B+ Tree, this is done by traversing the leafs from the leftmost leaf, first entry\n     * until the respective key is found.\n     * @returns {number} The entry position.\n     */\n    keynum() {\n        if (this._leaf === null || this._item === -1) return -1;\n        let cnt = this._item + 1;\n        let ptr = this._leaf;\n        while (ptr.prevLeaf !== null) {\n            ptr = ptr.prevLeaf;\n            cnt += ptr.keys.length;\n        }\n        return cnt;\n    }\n\n    /**\n     * Jumps to the smallest key's entry (i.e., leftmost leaf, first entry).\n     * False will only be returned if the tree is completely empty.\n     * @returns {boolean} True if there is such an entry, false otherwise.\n     */\n    goTop() {\n        this._leaf = this._root;\n        while (!this._leaf.isLeaf()) {\n            this._leaf = this._leaf.nodePointers[0];\n        }\n        if (this._leaf.keys.length === 0) {\n            this._item = -1;\n            this._eof = true;\n            this._found = false;\n            this._key = null;\n            this._record = null;\n        } else {\n            this._item = 0;\n            this._eof = false;\n            this._found = true;\n            this._key = this._leaf.keys[0];\n            this._record = this._leaf.records[0];\n        }\n        return (this._found);\n    }\n\n    /**\n     * Jumps to the largest key's entry (i.e., rightmost leaf, last entry).\n     * False will only be returned if the tree is completely empty.\n     * @returns {boolean} True if there is such an entry, false otherwise.\n     */\n    goBottom() {\n        this._leaf = this._root;\n        while (!this._leaf.isLeaf()) {\n            this._leaf = this._leaf.nodePointers[this._leaf.nodePointers.length-1];\n        }\n        if (this._leaf.keys.length === 0) {\n            this._item = -1;\n            this._eof = true;\n            this._found = false;\n            this._key = null;\n            this._record = null;\n        } else {\n            this._item = this._leaf.keys.length-1;\n            this._eof = false;\n            this._found = true;\n            this._key = this._leaf.keys[this._item];\n            this._record = this._leaf.records[this._item];\n        }\n        return (this._found);\n    }\n\n    /**\n     * Rebuilds/balances the whole tree.\n     * Inserting and deleting keys into a tree will result\n     * in some leaves and nodes having the minimum number of keys allowed.\n     * This routine will ensure that each leaf and node has as many keys as possible,\n     * resulting in a denser, flatter tree.\n     * False is only returned if the tree is completely empty.\n     * @returns {boolean} True if the tree is not completely empty.\n     */\n    pack() {\n        let len;\n        let i;\n        this.goTop(0);\n        if (this._leaf === this._root) return false;\n\n        // Pack leaves\n        let toN = new LeafNode();\n        let toI = 0;\n        let frN = this._leaf;\n        let frI = 0;\n        let parKey = [];\n        let parNod = [];\n        while (true) { // eslint-disable-line no-constant-condition\n            toN.keys[toI] = frN.keys[frI];\n            toN.records[toI] = frN.records[frI];\n            if (toI === 0) parNod.push(toN);\n            if (frI === frN.keys.length-1) {\n                if (frN.nextLeaf === null) break;\n                frN = frN.nextLeaf;\n                frI = 0;\n            } else {\n                frI++;\n            }\n            if (toI === this._maxkey-1) {\n                const tmp = new LeafNode();\n                toN.nextLeaf = tmp;\n                tmp.prevLeaf = toN;\n                toN = tmp;\n                toI = 0;\n            } else {\n                toI++;\n            }\n        }\n        let mov = this._minkyl - toN.keys.length;\n        frN = toN.prevLeaf;\n        if (mov > 0 && frN !== null) {\n            // Insert new keys/records.\n            for (i = mov-1; i>=0; --i) {\n                toN.keys.unshift(frN.keys.pop());\n                toN.records.unshift(frN.records.pop());\n            }\n        }\n        for (i=1, len=parNod.length; i<len; ++i) {\n            parKey.push(parNod[i].keys[0]);\n        }\n        parKey[parKey.length] = null;\n\n        // Rebuild nodes\n        let kidKey, kidNod;\n        while (parKey[0] !== null) {\n            kidKey = parKey;\n            kidNod = parNod;\n            parKey = [];\n            parNod = [];\n            toI = this._maxkey + 1;\n            i = 0;\n            len = kidKey.length;\n            for (; i<len; i++) {\n                if (toI > this._maxkey) {\n                    toN = new InnerNode();\n                    toI = 0;\n                    parNod.push(toN);\n                }\n                toN.keys[toI] = kidKey[i];\n                toN.nodePointers[toI] = kidNod[i];\n                toI++;\n            }\n            mov = this._minkyn - toN.keys.length + 1;\n            if (mov > 0 && parNod.length > 1) {\n                frN = parNod[parNod.length-2];\n                for (i = mov-1; i>=0; --i) {\n                    toN.keys.unshift(frN.keys.pop());\n                    toN.nodePointers.unshift(frN.nodePointers.pop());\n                }\n            }\n            i = 0;\n            len = parNod.length;\n            for (; i<len; ++i) {\n                parKey.push(parNod[i].keys.pop());\n            }\n        }\n        this._root = parNod[0];\n        this.goTop();\n        return (this._found);\n    }\n\n    /**\n     * Internal helper method to delete a key from the tree.\n     * @param {*} key The unique key for the record.\n     * @private\n     */\n    _del(key) {\n        const stack = [];\n        let parNod = null;\n        let parPtr = -1;\n        this._leaf = this._root;\n        while (!this._leaf.isLeaf()) {\n            stack.push(this._leaf);\n            parNod = this._leaf;\n            parPtr = this._leaf.getItem(key);\n            this._leaf = this._leaf.nodePointers[parPtr];\n        }\n        this._item = this._leaf.getItem(key,false);\n\n        // Key not in tree\n        if (this._item === -1) {\n            this._found = false;\n            return;\n        }\n        this._found = true;\n\n        // Delete key from leaf\n        this._leaf.keys.splice(this._item, 1);\n        this._leaf.records.splice(this._item, 1);\n        this._length--;\n\n        // Leaf still valid: done\n        if (this._leaf === this._root) {\n            return;\n        }\n        if (this._leaf.keys.length >= this._minkyl) {\n            if (this._item === 0) BTree._fixNodes(stack, key, this._leaf.keys[0]);\n            return;\n        }\n        let delKey;\n\n        // Steal from left sibling if possible\n        let sibL = (parPtr === 0) ? null : parNod.nodePointers[parPtr - 1];\n        if (sibL !== null && sibL.keys.length > this._minkyl) {\n            delKey = (this._item === 0) ? key : this._leaf.keys[0];\n            this._leaf.keys.unshift(sibL.keys.pop());\n            this._leaf.records.unshift(sibL.records.pop());\n            BTree._fixNodes(stack, delKey, this._leaf.keys[0]);\n            return;\n        }\n\n        // Steal from right sibling if possible\n        let sibR = (parPtr === parNod.keys.length) ? null : parNod.nodePointers[parPtr + 1];\n        if (sibR !== null && sibR.keys.length > this._minkyl) {\n            this._leaf.keys.push(sibR.keys.shift());\n            this._leaf.records.push(sibR.records.shift());\n            if (this._item === 0) BTree._fixNodes(stack, key, this._leaf.keys[0]);\n            BTree._fixNodes(stack, this._leaf.keys[this._leaf.keys.length-1], sibR.keys[0]);\n            return;\n        }\n\n        // Merge left to make one leaf\n        if (sibL !== null) {\n            delKey = (this._item === 0) ? key : this._leaf.keys[0];\n            sibL.merge(this._leaf, parNod, delKey);\n            this._leaf = sibL;\n        } else {\n            delKey = sibR.keys[0];\n            this._leaf.merge(sibR, parNod, delKey);\n            if (this._item === 0) BTree._fixNodes(stack, key, this._leaf.keys[0]);\n        }\n\n        if (stack.length === 1 && parNod.keys.length === 0) {\n            this._root = this._leaf;\n            return;\n        }\n\n        let curNod = stack.pop();\n        let parItm;\n\n        // Update all nodes\n        while (curNod.keys.length < this._minkyn && stack.length > 0) {\n\n            parNod = stack.pop();\n            parItm = parNod.getItem(delKey);\n\n            // Steal from right sibling if possible\n            sibR = (parItm === parNod.keys.length) ? null : parNod.nodePointers[parItm+1];\n            if (sibR !== null && sibR.keys.length > this._minkyn) {\n                curNod.keys.push(parNod.keys[parItm]);\n                parNod.keys[parItm] = sibR.keys.shift();\n                curNod.nodePointers.push(sibR.nodePointers.shift());\n                break;\n            }\n\n            // Steal from left sibling if possible\n            sibL = (parItm === 0) ? null : parNod.nodePointers[parItm-1];\n            if (sibL !== null && sibL.keys.length > this._minkyn) {\n                curNod.keys.unshift(parNod.keys[parItm-1]);\n                parNod.keys[parItm-1] = sibL.keys.pop();\n                curNod.nodePointers.unshift(sibL.nodePointers.pop());\n                break;\n            }\n\n            // Merge left to make one node\n            if (sibL !== null) {\n                delKey = sibL.merge(curNod, parNod, parItm-1);\n                curNod = sibL;\n            } else if (sibR !== null) {\n                delKey = curNod.merge(sibR, parNod, parItm);\n            }\n\n            // Next level\n            if (stack.length === 0 && parNod.keys.length === 0) {\n                this._root = curNod;\n                break;\n            }\n            curNod = parNod;\n        }\n    }\n\n    /**\n     * Internal helper method to replace a key within the whole stack.\n     * @param {Array.<Node>} stk The stack of nodes to examine.\n     * @param {*} frKey The key to replace.\n     * @param {*} toKey The new key to put in place.\n     * @private\n     */\n    static _fixNodes(stk, frKey, toKey) {\n        let keys, lvl = stk.length, mor = true;\n        do {\n            lvl--;\n            keys = stk[lvl].keys;\n            for (let i=keys.length-1; i>=0; --i) {\n                if (keys[i] === frKey) {\n                    keys[i] = toKey;\n                    mor = false;\n                    break;\n                }\n            }\n        } while (mor && lvl>0);\n    }\n\n    /**\n     * Advances to the smallest key k', such that either k' > lower (if lowerOpen) or k' ≥ lower (if !lowerOpen).\n     * If lower is undefined, jump to the smallest key's entry.\n     * @param {*} lower A lower bound on the key or undefined.\n     * @param {boolean} [lowerOpen] Whether lower may be included or not.\n     * @returns {boolean} True if there is such an entry, false otherwise.\n     */\n    goToLowerBound(lower, lowerOpen=false) {\n        // TODO: it might be that there is no exact key match, then we do not need to skip!\n        if (lower !== undefined) {\n            let success = this.seek(lower, BTree.NEAR_MODE.GE);\n            if (success && lowerOpen && ComparisonUtils.equals(lower, this.currentKey)) {\n                success = this.skip();\n            }\n            return success;\n        }\n        return this.goTop();\n    }\n\n    /**\n     * Advances to the largest key k', such that either k' < upper (if upperOpen) or k' ≤ upper (if !upperOpen).\n     * If upper is undefined, jump to the largest key's entry.\n     * @param {*} upper An upper bound on the key or undefined.\n     * @param {boolean} [upperOpen] Whether upper may be included or not.\n     * @returns {boolean} True if there is such an entry, false otherwise.\n     */\n    goToUpperBound(upper, upperOpen=false) {\n        // TODO: it might be that there is no exact key match, then we do not need to skip!\n        if (upper !== undefined) {\n            let success = this.seek(upper, BTree.NEAR_MODE.LE);\n            if (success && upperOpen && ComparisonUtils.equals(upper, this.currentKey)) {\n                success = this.skip(-1);\n            }\n            return success;\n        }\n        return this.goBottom();\n    }\n}\n/**\n * Allows to specify the seek method of a BTree.\n * @enum {number}\n */\nBTree.NEAR_MODE = {\n    NONE: 0,\n    LE: 1,\n    GE: 2\n};\nClass.register(BTree);\n","class BufferUtils {\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (typeof Buffer !== 'undefined' && typeof window === 'undefined') {\n            return new Buffer(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Uint8Array}\n     */\n    static fromBase64(base64) {\n        if (!(/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(base64))) {\n            throw new Error('Invalid base64');\n        }\n        return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64lex(buffer) {\n        const base64 = BufferUtils.toBase64(buffer);\n        let base64lex = '';\n        for (let i = 0; i < base64.length; i++) {\n            base64lex += BufferUtils.BASE64_TO_BASE64_LEX[base64[i]];\n        }\n        return base64lex;\n    }\n\n    /**\n     * @param {string} base64lex\n     * @return {Uint8Array}\n     */\n    static fromBase64lex(base64lex) {\n        let base64 = '';\n        for (let i = 0; i < base64lex.length; i++) {\n            base64 += BufferUtils.BASE64_LEX_TO_BASE64[base64lex[i]];\n        }\n        return BufferUtils.fromBase64(base64);\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\nBufferUtils.BASE64_LEX_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~';\nBufferUtils.BASE64_TO_BASE64_LEX = { '=': '-' };\nBufferUtils.BASE64_LEX_TO_BASE64 = { '-': '=' };\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils.BASE64_TO_BASE64_LEX[BufferUtils.BASE64_ALPHABET[i]] = BufferUtils.BASE64_LEX_ALPHABET[i];\n    BufferUtils.BASE64_LEX_TO_BASE64[BufferUtils.BASE64_LEX_ALPHABET[i]] = BufferUtils.BASE64_ALPHABET[i];\n}\nClass.register(BufferUtils);\n","class ComparisonUtils {\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        // Primitive values\n        if (a === b) return true;\n\n        // Set\n        if (a instanceof Set && b instanceof Set) return a.equals(b);\n\n        // ArrayBuffer/Uint8Array/Buffer\n        if (ComparisonUtils.isUint8Array(a) && ComparisonUtils.isUint8Array(b)) return BufferUtils.equals(new Uint8Array(a), new Uint8Array(b));\n\n        return false;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static compare(a, b) {\n        // ArrayBuffer/Uint8Array/Buffer\n        if (ComparisonUtils.isUint8Array(a) && ComparisonUtils.isUint8Array(b)) return BufferUtils.compare(new Uint8Array(a), new Uint8Array(b));\n\n        // Primitive values\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        return 0;\n    }\n\n    /**\n     * @param {*} obj\n     * @returns {boolean}\n     */\n    static isUint8Array(obj) {\n        if (typeof Buffer !== 'undefined' && typeof window === 'undefined' && obj instanceof Buffer) return true;\n        return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n    }\n}\nClass.register(ComparisonUtils);\n","class JSONUtils {\n    static stringify(value) {\n        return JSON.stringify(value, JSONUtils.jsonifyType);\n    }\n\n    static parse(value) {\n        return JSON.parse(value, JSONUtils.parseType);\n    }\n\n    static parseType(key, value) {\n        if (value && value[JSONUtils.TYPE_SYMBOL]) {\n            switch (value[JSONUtils.TYPE_SYMBOL]) {\n                case 'Uint8Array':\n                    return BufferUtils.fromBase64(value[JSONUtils.VALUE_SYMBOL]);\n                case 'Set':\n                    return Set.from(value[JSONUtils.VALUE_SYMBOL]);\n            }\n        }\n        return value;\n    }\n\n    static jsonifyType(key, value) {\n        if (value instanceof Uint8Array) {\n            return JSONUtils.typedObject('Uint8Array', BufferUtils.toBase64(value));\n        }\n        if (value instanceof Set) {\n            return JSONUtils.typedObject('Set', Array.from(value));\n        }\n        return value;\n    }\n\n    static typedObject(type, value) {\n        const obj = {};\n        obj[JSONUtils.TYPE_SYMBOL] = type;\n        obj[JSONUtils.VALUE_SYMBOL] = value;\n        return obj;\n    }\n}\nJSONUtils.TYPE_SYMBOL = '__';\nJSONUtils.VALUE_SYMBOL = 'value';\n\nClass.register(JSONUtils);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, level);\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = l;\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n/**\n * @enum {number}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.TRACE:\n                return 'T';\n            case Log.VERBOSE:\n                return 'V';\n            case Log.DEBUG:\n                return 'D';\n            case Log.INFO:\n                return 'I';\n            case Log.WARNING:\n                return 'W';\n            case Log.ERROR:\n                return 'E';\n            case Log.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","/**\n * An implementation of a LRU (least recently used) map.\n * This is a map that contains a maximum of k entries,\n * where k is specified in the constructor.\n * When the maximal number of entries is reached,\n * it will evict the least recently used entry.\n * This behaviour is useful for caches.\n * @template K The keys' type.\n * @template V The values' type.\n */\nclass LRUMap {\n    /**\n     * Instantiate a LRU map of maximum size maxSize.\n     * @param {number} maxSize The maximum size of the map.\n     */\n    constructor(maxSize) {\n        this._maxSize = maxSize;\n        /** @type {Map.<K,V>} */\n        this._map = new Map();\n        /** @type {Map.<K,number>} */\n        this._numAccesses = new Map();\n        /** @type {Array.<K>} */\n        this._accessQueue = [];\n    }\n\n    /**\n     * The current size of the map.\n     * @type {number}\n     */\n    get size() {\n        return this._map.size;\n    }\n\n    /**\n     * Clears the map.\n     */\n    clear() {\n        this._numAccesses.clear();\n        this._accessQueue = [];\n        return this._map.clear();\n    }\n\n    /**\n     * Deletes a key from the map.\n     * @param {K} key The key to delete.\n     * @returns {boolean} Whether an entry was deleted.\n     */\n    delete(key) {\n        return this._map.delete(key);\n    }\n\n    /**\n     * Returns an iterator over key value pairs [k, v].\n     * @returns {Iterator.<Array>}\n     */\n    entries() {\n        return this._map.entries();\n    }\n\n    /**\n     * Execute a given function for each key value pair in the map.\n     * @param {function(key:K, value:V):*} callback The function to be called.\n     * @param {*} [thisArg] This value will be used as this when executing the function.\n     */\n    forEach(callback, thisArg) {\n        return this._map.forEach(callback, thisArg);\n    }\n\n    /**\n     * Return the corresponding value to a specified key.\n     * @param {K} key The key to look for.\n     * @returns {V} The value the key maps to (or undefined if not present).\n     */\n    get(key) {\n        this.access(key);\n        return this._map.get(key);\n    }\n\n    /**\n     * Returns true if the specified key is to be found in the map.\n     * @param {K} key The key to look for.\n     * @returns {boolean} True, if the key is in the map, false otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n\n    /**\n     * Returns an iterator over the keys of the map.\n     * @returns {Iterator.<K>}\n     */\n    keys() {\n        return this._map.keys();\n    }\n\n    /**\n     * Evicts the k least recently used entries from the map.\n     * @param {number} [k] The number of entries to evict (default is 1).\n     */\n    evict(k=1) {\n        while (k > 0 && this._accessQueue.length > 0) {\n            const oldest = this._accessQueue.shift();\n            let accesses = this._numAccesses.get(oldest);\n            --accesses;\n            this._numAccesses.set(oldest, accesses);\n            // Check if not used in the meanwhile.\n            if (accesses !== 0) {\n                continue;\n            }\n            // Otherwise delete that.\n            this._numAccesses.delete(oldest);\n            // If it was not present however, we need to search further.\n            if (!this.delete(oldest)) {\n                continue;\n            }\n            --k;\n        }\n    }\n\n    /**\n     * Marks a key as accessed.\n     * This implicitly makes the key the most recently used key.\n     * @param {K} key The key to mark as accessed.\n     */\n    access(key) {\n        if (!this._map.has(key)) {\n            return;\n        }\n        let accesses = 0;\n        if (this._numAccesses.has(key)) {\n            accesses = this._numAccesses.get(key);\n        }\n        ++accesses;\n        this._numAccesses.set(key, accesses);\n        this._accessQueue.push(key);\n    }\n\n    /**\n     * Inserts or replaces a key's value into the map.\n     * If the maxSize of the map is exceeded, the least recently used key is evicted first.\n     * Inserting a key implicitly accesses it.\n     * @param {K} key The key to set.\n     * @param {V} value The associated value.\n     */\n    set(key, value) {\n        if (this.size >= this._maxSize) {\n            this.evict();\n        }\n        this._map.set(key, value);\n        this.access(key);\n    }\n\n    /**\n     * Returns an iterator over the values of the map.\n     * @returns {Iterator.<V>}\n     */\n    values() {\n        return this._map.values();\n    }\n\n    /**\n     * Returns an iterator over key value pairs [k, v].\n     * @returns {Iterator.<Array>}\n     */\n    [Symbol.iterator]() {\n        return this._map.entries();\n    }\n}\nClass.register(LRUMap);\n","/**\n * Utils that are related to common JavaScript objects.\n */\nclass ObjectUtils {\n    /**\n     * This method returns the value of an object at a given path.\n     * A key path is defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     * @param {Object} obj The JS object to access.\n     * @param {string|Array.<string>} path The key path to access.\n     * @returns {*} The value at the given path or undefined if the path does not exist.\n     */\n    static byKeyPath(obj, path) {\n        if (!Array.isArray(path)) {\n            return obj[path];\n        }\n        let tmp = obj;\n        for (const component of path) {\n            if (tmp === undefined) {\n                return undefined;\n            }\n            tmp = tmp[component];\n        }\n        return tmp;\n    }\n}\nClass.register(ObjectUtils);\n","/**\n * Calculates the union of two sets.\n * Method of Set.\n * @memberOf Set\n * @param {Set} setB The second set.\n * @returns {Set} The union of this set and the second set.\n */\nSet.prototype.union = function(setB) {\n    const union = new Set(this);\n    for (const elem of setB) {\n        union.add(elem);\n    }\n    return union;\n};\n\n/**\n * Calculates the intersection of two sets.\n * Method of Set.\n * @memberOf Set\n * @param {Set} setB The second set.\n * @returns {Set} The intersection of this set and the second set.\n */\nSet.prototype.intersection = function(setB) {\n    const intersection = new Set();\n    for (const elem of setB) {\n        if (this.has(elem)) {\n            intersection.add(elem);\n        }\n    }\n    return intersection;\n};\n\n/**\n * Calculates the difference of two sets.\n * Method of Set.\n * @memberOf Set\n * @param {Set} setB The second set.\n * @returns {Set} The difference of this set and the second set.\n */\nSet.prototype.difference = function(setB) {\n    const difference = new Set(this);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n};\n\n/**\n * Checks whether two sets are equal to each other.\n * Method of Set.\n * @memberOf Set\n * @param {Set} setB The second set.\n * @returns {boolean} True if they contain the same elements, false otherwise.\n */\nSet.prototype.equals = function(setB) {\n    if (this.size !== setB.size) return false;\n    for (const elem of setB) {\n        if (!this.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Limits the number of items in the set.\n * @param {number} [limit] Limits the number of results if given.\n * @returns {Set}\n */\nSet.prototype.limit = function(limit = null) {\n    if (limit === null) return this;\n\n    const limitedResults = new Set();\n    let count = 0;\n    for (const val of this) {\n        // Limit\n        if (limit !== null && count >= limit) break;\n\n        limitedResults.add(val);\n        count++;\n    }\n    return limitedResults;\n};\n\n/**\n * Creates a Set from single values and iterables.\n * If arg is not iterable, it creates a new Set with arg as its single member.\n * If arg is iterable, it iterates over arg and puts all items into the Set.\n * Static method of Set.\n * @memberOf Set\n * @param {*} arg The argument to create the Set from.\n * @returns {Set} The resulting Set.\n */\nSet.from = function(arg) {\n    // Check if iterable and not string.\n    if (arg && typeof arg[Symbol.iterator] === 'function' && typeof arg !== 'string') {\n        return new Set(arg);\n    }\n    return new Set([arg]);\n};\n\n/**\n * Returns an element of a Set.\n * Static method of Set.\n * @memberOf Set\n * @template T\n * @param {Set.<T>} s The set to return an element from.\n * @returns {T} An element of the set.\n */\nSet.sampleElement = function(s) {\n    return s.size > 0 ? s.values().next().value : undefined;\n};\n","class SortedList {\n    constructor(sortedList = [], compare) {\n        this._list = sortedList;\n        this._compare = compare || SortedList._compare;\n    }\n\n    static _compare(a, b) {\n        return a.compare ? a.compare(b) : (a > b ? 1 : (a < b ? -1 : 0));\n    }\n\n    indexOf(o) {\n        let a = 0, b = this._list.length - 1;\n        let currentIndex = null;\n        let currentElement = null;\n\n        while (a <= b) {\n            currentIndex = Math.round((a + b) / 2);\n            currentElement = this._list[currentIndex];\n\n            if (this._compare(currentElement, o) < 0) {\n                a = currentIndex + 1;\n            }\n            else if (this._compare(currentElement, o) > 0) {\n                b = currentIndex - 1;\n            }\n            else {\n                return currentIndex;\n            }\n        }\n\n        return -1;\n    }\n\n    _insertionIndex(o) {\n        let a = 0, b = this._list.length - 1;\n        let currentIndex = null;\n        let currentElement = null;\n\n        while (a <= b) {\n            currentIndex = Math.round((a + b) / 2);\n            currentElement = this._list[currentIndex];\n\n            if (this._compare(currentElement, o) < 0) {\n                a = currentIndex + 1;\n            }\n            else if (this._compare(currentElement, o) > 0) {\n                b = currentIndex - 1;\n            }\n            else {\n                break;\n            }\n        }\n\n        return a;\n    }\n\n    add(value) {\n        this._list.splice(this._insertionIndex(value), 0, value);\n    }\n\n    has(value) {\n        return this.indexOf(value) >= 0;\n    }\n\n    shift() {\n        return this._list.shift();\n    }\n\n    pop() {\n        return this._list.pop();\n    }\n\n    peekFirst() {\n        return this._list[0];\n    }\n\n    peekLast() {\n        return this._list[this._list.length - 1];\n    }\n\n    remove(value) {\n        const index = this.indexOf(value);\n        if (index > -1) {\n            this._list.splice(index, 1);\n        }\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    values() {\n        return this._list;\n    }\n\n    /**\n     * @returns {Iterator.<V|*>}\n     */\n    [Symbol.iterator]() {\n        return this._list[Symbol.iterator]();\n    }\n\n    copy() {\n        return new SortedList(this._list.slice(), this._compare);\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._list.length;\n    }\n}\nClass.register(SortedList);\n","class Synchronizer {\n    constructor() {\n        this._queue = [];\n        this._working = false;\n    }\n\n    /**\n     * Push function to the Synchronizer for later, synchronous execution\n     * @template T\n     * @param {function():T} fn Function to be invoked later by this Synchronizer\n     * @returns {Promise.<T>}\n     */\n    push(fn) {\n        return new Promise((resolve, error) => {\n            this._queue.push({fn: fn, resolve: resolve, error: error});\n            if (!this._working) {\n                this._doWork().catch(Log.w.tag(Synchronizer));\n            }\n        });\n    }\n\n    async _doWork() {\n        this._working = true;\n\n        while (this._queue.length) {\n            const job = this._queue.shift();\n            try {\n                const result = await job.fn();\n                job.resolve(result);\n            } catch (e) {\n                if (job.error) job.error(e);\n            }\n        }\n\n        this._working = false;\n    }\n\n    /** @type {boolean} */\n    get working() {\n        return this._working;\n    }\n}\nClass.register(Synchronizer);\n","/**\n * A simple object implementing parts of the Transaction's class.\n * It is used to keep track of modifications on a persistent index\n * and to apply them all at once.\n * This class is to be used only internally.\n */\nclass EncodedTransaction {\n    /**\n     * Create a new IndexTransaction.\n     */\n    constructor(tableName) {\n        this._tableName = tableName;\n        this._modified = new Map();\n        this._removed = new Set();\n        this._truncated = false;\n    }\n\n    /** @type {string} */\n    get tableName() {\n        return this._tableName;\n    }\n\n    /** @type {Map.<string,*>} */\n    get modified() {\n        return this._modified;\n    }\n\n    /** @type {Set.<string>} */\n    get removed() {\n        return this._removed;\n    }\n\n    /** @type {boolean} */\n    get truncated() {\n        return this._truncated;\n    }\n\n    /**\n     * Empty the index transaction.\n     */\n    truncate() {\n        this._truncated = true;\n        this._modified.clear();\n        this._removed.clear();\n    }\n\n    /**\n     * Put a key-value pair into the transaction.\n     * @param {string} key The key.\n     * @param {*} value The value.\n     */\n    put(key, value) {\n        this._removed.delete(key);\n        this._modified.set(key, value);\n    }\n\n    /**\n     * Get a value from the encoded transaction.\n     * @param {string} key The key.\n     * @return {*} value The value.\n     */\n    get(key) {\n        return this._modified.get(key);\n    }\n\n    /**\n     * Remove a key-value pair from the transaction.\n     * @param {string} key The key to remove.\n     */\n    remove(key) {\n        this._removed.add(key);\n        this._modified.delete(key);\n    }\n\n}\nClass.register(EncodedTransaction);\n","class GenericValueEncoding {\n    static _encodeInteger(value) {\n        const binary = new Uint8Array(9);\n        const dv = new DataView(binary.buffer);\n        dv.setUint8(0, GenericValueEncoding.Type.INTEGER);\n        dv.setUint32(1, Math.floor(value / Math.pow(2, 32)));\n        dv.setUint32(5, value);\n        return binary;\n    }\n    static _decodeInteger(binary) {\n        const dv = new DataView(binary.buffer);\n        return dv.getUint32(1) * Math.pow(2, 32) + dv.getUint32(5);\n    }\n\n    static _encodeString(string, type = GenericValueEncoding.Type.STRING) {\n        const buf = new Uint8Array(string.length + 1);\n        buf[0] = type;\n        for (let i = 0; i < string.length; ++i) {\n            buf[i + 1] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n    static _decodeString(buffer) {\n        return String.fromCharCode.apply(null, buffer.subarray(1));\n    }\n\n    static _encodeOther(obj) {\n        return GenericValueEncoding._encodeString(JSONUtils.stringify(obj), GenericValueEncoding.Type.JSON);\n    }\n    static _decodeOther(buffer) {\n        const json = GenericValueEncoding._decodeString(buffer);\n        return JSONUtils.parse(json);\n    }\n\n    static _encodeBuffer(buffer) {\n        const buf = new Uint8Array(buffer.byteLength + 1);\n        buf[0] = GenericValueEncoding.Type.BUFFER;\n        buf.set(buffer, 1);\n        return buf;\n    }\n    static _decodeBuffer(buffer) {\n        return buffer.subarray(1);\n    }\n\n    static encode(data) {\n        if (Number.isInteger(data)) {\n            return GenericValueEncoding._encodeInteger(data);\n        }\n        if (typeof data === 'string') {\n            return this._encodeString(data);\n        }\n        if (data instanceof Uint8Array) {\n            return GenericValueEncoding._encodeBuffer(data);\n        }\n        return GenericValueEncoding._encodeOther(data);\n    }\n\n    static decode(data) {\n        data = new Uint8Array(data);\n        const type = data[0];\n        switch (type) {\n            case GenericValueEncoding.Type.INTEGER:\n                return GenericValueEncoding._decodeInteger(data);\n            case GenericValueEncoding.Type.STRING:\n                return GenericValueEncoding._decodeString(data);\n            case GenericValueEncoding.Type.BUFFER:\n                return GenericValueEncoding._decodeBuffer(data);\n            default:\n                return GenericValueEncoding._decodeOther(data);\n        }\n    }\n\n    static get encoding() {\n        return JungleDB.Encoding.BINARY;\n    }\n}\n/** @enum {number} */\nGenericValueEncoding.Type = {\n    INTEGER: 0,\n    STRING: 1,\n    JSON: 2,\n    BUFFER: 3\n};\nClass.register(GenericValueEncoding);\n","/**\n * This is an intermediate layer caching the results of a backend.\n * While simple get/put queries make use of the cache,\n * more advanced queries will be forwarded to the backend.\n * @implements {IBackend}\n */\nclass CachedBackend {\n    /**\n     * Creates a new instance of the cached layer using the specified backend.\n     * @param {IBackend} backend The backend to use.\n     */\n    constructor(backend, cacheSize = CachedBackend.MAX_CACHE_SIZE, rawCacheSize = 0) {\n        this._backend = backend;\n        /** @type {Map.<string,*>} */\n        this._cache = new LRUMap(cacheSize);\n        /** @type {Map.<string,*>} */\n        this._rawCache = new LRUMap(rawCacheSize);\n    }\n\n    /** @type {boolean} */\n    get connected() {\n        return this._backend.connected;\n    }\n\n    /**\n     * A map of index names to indices as defined by the underlying backend.\n     * The index names can be used to access an index.\n     * @type {Map.<string,IIndex>}\n     */\n    get indices() {\n        return this._backend.indices;\n    }\n\n    /**\n     * A helper method to retrieve the values corresponding to a set of keys.\n     * @param {Set.<string>} keys The set of keys to get the corresponding values for.\n     * @returns {Promise.<Array.<*>>} A promise of the array of values.\n     * @protected\n     */\n    async _retrieveValues(keys) {\n        const valuePromises = [];\n        for (const key of keys) {\n            valuePromises.push(this.get(key));\n        }\n        return Promise.all(valuePromises);\n    }\n\n    /**\n     * @param {string} key\n     * @returns {boolean}\n     * @private\n     */\n    _has(key) {\n        return this._cache.has(key) || this._rawCache.has(key);\n    }\n\n    /**\n     * @param {string} key\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     * @returns {boolean}\n     * @private\n     */\n    _get(key, options) {\n        if (options && options.raw) {\n            if (this._rawCache.has(key)) {\n                return this._rawCache.get(key);\n            } else {\n                // Transform to raw if requested\n                const value = this.encode(this._cache.get(key));\n                this._rawCache.set(key, value);\n                return value;\n            }\n        } else {\n            if (this._cache.has(key)) {\n                return this._cache.get(key);\n            } else {\n                const value = this.decode(this._rawCache.get(key), key);\n                this._cache.set(key, value);\n                return value;\n            }\n        }\n    }\n\n    /**\n     * Returns the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @abstract\n     * @param {string} key The primary key to look for.\n     * @param {SyncRetrievalConfig} [options] Advanced retrieval options.\n     * @returns {*} The object stored under the given key, or undefined if not present.\n     */\n    getSync(key, options = {}) {\n        if (this._has(key)) {\n            return this._get(key, options);\n        }\n\n        // Attempt backend\n        if (this._backend.isSynchronous()) {\n            const value = this._backend.getSync(key, options);\n            // Cache\n            if (options && options.raw) {\n                this._rawCache.set(key, value);\n            } else {\n                this._cache.set(key, value);\n            }\n            return value;\n        }\n\n        if (options && options.expectPresence) {\n            throw new Error(`Missing key in cached backend: ${key}`);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * A check whether a certain key is cached.\n     * @param {string} key The key to check.\n     * @return {boolean} A boolean indicating whether the key is already in the cache.\n     */\n    isCached(key) {\n        // Since the cache may change quickly, don't promise anything to the upper layers.\n        // But we can still answer their getSync requests if we have it in the cache.\n        return false;\n    }\n\n    /**\n     * Returns a promise of the object stored under the given primary key.\n     * If the item is in the cache, the cached value will be returned.\n     * Otherwise, the value will be fetched from the backend object store..\n     * Resolves to undefined if the key is not present in the object store.\n     * @param {string} key The primary key to look for.\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     * @returns {Promise.<*>} A promise of the object stored under the given key, or undefined if not present.\n     */\n    async get(key, options = {}) {\n        if (this._has(key)) {\n            return this._get(key, options);\n        }\n        const value = await this._backend.get(key, options);\n        // Cache\n        if (options && options.raw) {\n            this._rawCache.set(key, value);\n        } else {\n            this._cache.set(key, value);\n        }\n        return value;\n    }\n\n    /**\n     * Returns a promise of a set of keys fulfilling the given query by querying the backend.\n     * If the optional query is not given, it returns all keys in the object store.\n     * If the query is of type KeyRange, it returns all keys of the object store being within this range.\n     * If the query is of type Query, it returns all keys fulfilling the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to the query.\n     */\n    keys(query = null, limit = null) {\n        return this._backend.keys(query, limit);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose primary keys fulfill the given query by relying on the backend.\n     * If the optional query is not given, it returns all objects in the object store.\n     * If the query is of type KeyRange, it returns all objects whose primary keys are within this range.\n     * If the query is of type Query, it returns all objects whose primary keys fulfill the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    values(query = null, limit = null) {\n        return this._backend.values(query, limit);\n    }\n\n    /**\n     * Iterates over the keys in a given range and direction.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     */\n    keyStream(callback, ascending=true, query=null) {\n        return this._backend.keyStream(callback, ascending, query);\n    }\n\n    /**\n     * Iterates over the keys and values in a given range and direction.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     */\n    valueStream(callback, ascending=true, query=null) {\n        return this._backend.valueStream(callback, ascending, query);\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is maximal for the given range.\n     * If the optional query is not given, it returns the object whose key is maximal.\n     * If the query is of type KeyRange, it returns the object whose primary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    maxValue(query=null) {\n        return this._backend.maxValue(query);\n    }\n\n    /**\n     * Returns a promise of the key being maximal for the given range.\n     * If the optional query is not given, it returns the maximal key.\n     * If the query is of type KeyRange, it returns the key being maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    maxKey(query=null) {\n        return this._backend.maxKey(query);\n    }\n\n    /**\n     * Returns a promise of the key being minimal for the given range.\n     * If the optional query is not given, it returns the minimal key.\n     * If the query is of type KeyRange, it returns the key being minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    minKey(query=null) {\n        return this._backend.minKey(query);\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is minimal for the given range.\n     * If the optional query is not given, it returns the object whose key is minimal.\n     * If the query is of type KeyRange, it returns the object whose primary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    minValue(query=null) {\n        return this._backend.minValue(query);\n    }\n\n    /**\n     * Returns the count of entries in the given range.\n     * If the optional query is not given, it returns the count of entries in the object store.\n     * If the query is of type KeyRange, it returns the count of entries within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    count(query=null) {\n        return this._backend.count(query);\n    }\n\n    /**\n     * Internally applies a transaction to the cache's and backend's state.\n     * This needs to be done in batch (as a db level transaction), i.e., either the full state is updated\n     * or no changes are applied.\n     * @param {Transaction} tx The transaction to apply.\n     * @returns {Promise} The promise resolves after applying the transaction.\n     * @protected\n     */\n    _apply(tx) {\n        this._applyLocally(tx);\n        return this._backend._apply(tx);\n    }\n\n    /**\n     * Internally applies a transaction to the cache's state.\n     * @param {Transaction} tx The transaction to apply.\n     * @protected\n     */\n    _applyLocally(tx) {\n        // Update local state and push to backend for batch transaction.\n        if (tx._truncated) {\n            this._cache.clear();\n        }\n        for (const key of tx._removed) {\n            this._cache.delete(key);\n        }\n        for (const [key, value] of tx._modified) {\n            this._cache.set(key, value);\n        }\n    }\n\n    /**\n     * Empties the object store.\n     * @returns {Promise} The promise resolves after emptying the object store.\n     */\n    async truncate() {\n        this._cache.clear();\n        return this._backend.truncate();\n    }\n\n    /**\n     * Returns the index of the given name.\n     * If the index does not exist, it returns undefined.\n     * @param {string} indexName The name of the requested index.\n     * @returns {IIndex} The index associated with the given name.\n     */\n    index(indexName) {\n        return this._backend.index(indexName);\n    }\n\n    /**\n     * Creates a new secondary index on the object store.\n     * Currently, all secondary indices are non-unique.\n     * They are defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     * Secondary indices may be multiEntry, i.e., if the keyPath resolves to an iterable object, each item within can\n     * be used to find this entry.\n     * If a new object does not possess the key path associated with that index, it is simply ignored.\n     *\n     * This function may only be called before the database is connected.\n     * Moreover, it is only executed on database version updates or on first creation.\n     * @param {string} indexName The name of the index.\n     * @param {string|Array.<string>} [keyPath] The path to the key within the object. May be an array for multiple levels.\n     * @param {IndexConfig} [options] An options object.\n     */\n    createIndex(indexName, keyPath, options = {}) {\n        return this._backend.createIndex(indexName, keyPath, options);\n    }\n\n    /**\n     * Deletes a secondary index from the object store.\n     * @param indexName\n     * @param {{upgradeCondition:?boolean|?function(oldVersion:number, newVersion:number):boolean}} [options]\n     */\n    deleteIndex(indexName, options = {}) {\n        return this._backend.deleteIndex(indexName, options);\n    }\n\n    /**\n     * Closes the object store and potential connections.\n     * @returns {Promise} The promise resolves after closing the object store.\n     */\n    close() {\n        return this._backend.close();\n    }\n\n    /**\n     * Returns the necessary information in order to flush a combined transaction.\n     * @abstract\n     * @param {Transaction} tx The transaction that should be applied to this backend.\n     * @returns {Promise.<*|function()|Array.<*|function()>>} For non-persistent backends: a function that effectively applies the transaction.\n     * Native backends otherwise specify their own information as needed by their JungleDB instance.\n     */\n    async applyCombined(tx) {\n        return [await this._backend.applyCombined(tx), () => this._applyLocally(tx)];\n    }\n\n    /**\n     * Checks whether an object store implements the ISynchronousObjectStore interface.\n     * @returns {boolean} The transaction object.\n     */\n    isSynchronous() {\n        return true;\n    }\n\n    /**\n     * Method called to decode a single value.\n     * @param {*} value Value to be decoded.\n     * @param {string} key Key corresponding to the value.\n     * @returns {*} The decoded value.\n     */\n    decode(value, key) {\n        return this._backend.decode(value, key);\n    }\n\n    /**\n     * Method called to encode a single value.\n     * @param {*} value Value to be encoded.\n     * @returns {*} The encoded value.\n     */\n    encode(value) {\n        return this._backend.encode(value);\n    }\n}\n/** @type {number} Maximum number of cached elements. */\nCachedBackend.MAX_CACHE_SIZE = 5000 /*elements*/;\nClass.register(CachedBackend);\n","/**\n * This is a BTree based index, which is generally stored in memory.\n * It is used by transactions.\n * @implements {IIndex}\n */\nclass InMemoryIndex {\n    /**\n     * Creates a new InMemoryIndex for a given object store.\n     * The key path describes the path of the secondary key within the stored objects.\n     * Only objects for which the key path exists are part of the secondary index.\n     *\n     * A key path is defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     *\n     * If a secondary index is a multi entry index, and the value at the key path is iterable,\n     * every item of the iterable value will be associated with the object.\n     * @param {IObjectStore} objectStore The underlying object store to use.\n     * @param {string|Array.<string>} [keyPath] The key path of the indexed attribute.\n     * If the keyPath is not given, this is a primary index.\n     * @param {boolean} [multiEntry] Whether the indexed attribute is considered to be iterable or not.\n     * @param {boolean} [unique] Whether there is a unique constraint on the attribute.\n     */\n    constructor(objectStore, keyPath, multiEntry=false, unique=false) {\n        this._objectStore = objectStore;\n        this._keyPath = keyPath;\n        this._multiEntry = multiEntry;\n        this._unique = unique;\n        this._tree = new BTree();\n    }\n\n    /**\n     * Reinitialises the index.\n     */\n    truncate() {\n        this._tree = new BTree();\n    }\n\n    /**\n     * Helper method to return the attribute associated with the key path if it exists.\n     * @param {string} key The primary key of the key-value pair.\n     * @param {*} obj The value of the key-value pair.\n     * @returns {*} The attribute associated with the key path, if it exists, and undefined otherwise.\n     * @private\n     */\n    _indexKey(key, obj) {\n        if (obj === undefined) return undefined;\n        if (this.keyPath) {\n            return ObjectUtils.byKeyPath(obj, this.keyPath);\n        }\n        return key;\n    }\n\n    /**\n     * The key path associated with this index.\n     * A key path is defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     * If the keyPath is undefined, this index uses the primary key of the key-value store.\n     * @type {string|Array.<string>}\n     */\n    get keyPath() {\n        return this._keyPath;\n    }\n\n    /**\n     * This value determines whether the index supports multiple secondary keys per entry.\n     * If so, the value at the key path is considered to be an iterable.\n     * @type {boolean}\n     */\n    get multiEntry() {\n        return this._multiEntry;\n    }\n\n    /**\n     * This value determines whether the index is a unique constraint.\n     * @type {boolean}\n     */\n    get unique() {\n        return this._unique;\n    }\n\n    /**\n     * A helper method to insert a primary-secondary key pair into the tree.\n     * @param {string} key The primary key.\n     * @param {*} iKey The indexed key.\n     * @throws if the uniqueness constraint is violated.\n     */\n    _insert(key, iKey) {\n        const tree = this._tree;\n        if (!this._multiEntry || !Array.isArray(iKey)) {\n            iKey = [iKey];\n        }\n        // Add all keys.\n        for (const component of iKey) {\n            if (tree.seek(component)) {\n                if (this._unique) {\n                    throw new Error(`Uniqueness constraint violated for key ${key} on path ${this._keyPath}`);\n                }\n                (/** @type {SortedList} */ tree.currentRecord).add(key);\n            } else {\n                tree.insert(component, this._unique ? key : new SortedList([key], ComparisonUtils.compare));\n            }\n        }\n    }\n\n    /**\n     * Inserts a new key-value pair into the index.\n     * For replacing an existing pair, the old value has to be passed as well.\n     * @param {string} key The primary key of the pair.\n     * @param {*} value The value of the pair. The indexed key will be extracted from this.\n     * @param {*} [oldValue] The old value associated with the primary key.\n     */\n    put(key, value, oldValue) {\n        const oldIKey = this._indexKey(key, oldValue);\n        const newIKey = this._indexKey(key, value);\n\n        if (!ComparisonUtils.equals(oldIKey, newIKey)) {\n            if (oldIKey !== undefined) {\n                this._remove(key, oldIKey);\n            }\n            if (newIKey !== undefined) {\n                this._insert(key, newIKey);\n            }\n        }\n    }\n\n    /**\n     * Removes a key-value pair from the index.\n     * @param {string} key The primary key of the pair.\n     * @param {*} oldValue The old value of the pair. The indexed key will be extracted from this.\n     */\n    remove(key, oldValue) {\n        const iKey = this._indexKey(key, oldValue);\n        if (iKey !== undefined) {\n            this._remove(key, iKey);\n        }\n    }\n\n    /**\n     * A helper method to remove a primary-secondary key pair from the tree.\n     * @param {string} key The primary key.\n     * @param {*} iKey The indexed key.\n     */\n    _remove(key, iKey) {\n        const tree = this._tree;\n        if (!this._multiEntry || !Array.isArray(iKey)) {\n            iKey = [iKey];\n        }\n        // Remove all keys.\n        for (const component of iKey) {\n            if (tree.seek(component)) {\n                if (!this._unique && (/** @type {SortedList} */ tree.currentRecord).length > 1) {\n                    (/** @type {SortedList} */ tree.currentRecord).remove(key);\n                } else {\n                    tree.remove(component);\n                }\n            }\n        }\n    }\n\n    /**\n     * A helper method to retrieve the values corresponding to a set of keys.\n     * @param {Set.<string>} keys The set of keys to get the corresponding values for.\n     * @returns {Promise.<Array.<*>>} A promise of the array of values.\n     * @protected\n     */\n    async _retrieveValues(keys) {\n        const valuePromises = [];\n        for (const key of keys) {\n            valuePromises.push(this._objectStore.get(key));\n        }\n        return Promise.all(valuePromises);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary keys fulfill the given query.\n     * If the optional query is not given, it returns all objects in the index.\n     * If the query is of type KeyRange, it returns all objects whose secondary keys are within this range.\n     * @param {KeyRange} [query] Optional query to check secondary keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    async values(query = null, limit = null) {\n        const keys = await this.keys(query, limit);\n        return this._retrieveValues(keys);\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated objects' secondary keys are in the given range.\n     * If the optional query is not given, it returns all primary keys in the index.\n     * If the query is of type KeyRange, it returns all primary keys for which the secondary key is within this range.\n     * @param {KeyRange} [query] Optional query to check the secondary keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of primary keys relevant to the query.\n     */\n    async keys(query = null, limit = null) {\n        let resultSet = new Set();\n\n        // Shortcut for exact match.\n        if (query instanceof KeyRange && query.exactMatch) {\n            if (this._tree.seek(query.lower)) {\n                resultSet = Set.from(this._tree.currentRecord);\n            }\n            return resultSet.limit(limit);\n        }\n\n        // Find lower bound and start from there.\n        if (!(query instanceof KeyRange)) {\n            if (!this._tree.goTop()) {\n                return resultSet; // Empty\n            }\n        } else {\n            if (!this._tree.goToLowerBound(query.lower, query.lowerOpen)) {\n                return resultSet; // empty\n            }\n        }\n\n        while (!(query instanceof KeyRange) || query.includes(this._tree.currentKey)) {\n            // Limit\n            if (limit !== null && resultSet.size >= limit) {\n                break;\n            }\n\n            resultSet = resultSet.union(Set.from(this._tree.currentRecord));\n            if (!this._tree.skip()) {\n                break;\n            }\n        }\n        return resultSet.limit(limit);\n    }\n\n    /**\n     * Iterates over the primary keys in a given range of secondary keys and direction.\n     * The order is determined by the secondary keys first and by the primary keys second.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    keyStream(callback, ascending=true, query=null) {\n        // Find lower bound and start from there.\n        if (!(query instanceof KeyRange)) {\n            if (ascending) {\n                if (!this._tree.goTop()) {\n                    return Promise.resolve();\n                }\n            } else {\n                if (!this._tree.goBottom()) {\n                    return Promise.resolve();\n                }\n            }\n        } else {\n            if (ascending) {\n                if (!this._tree.goToLowerBound(query.lower, query.lowerOpen)) {\n                    return Promise.resolve();\n                }\n            } else {\n                if (!this._tree.goToUpperBound(query.upper, query.upperOpen)) {\n                    return Promise.resolve();\n                }\n            }\n        }\n\n        outer:\n        while (!(query instanceof KeyRange) || query.includes(this._tree.currentKey)) {\n            if (this._unique) {\n                // Check unique entry\n                if (!callback(this._tree.currentRecord)) break;\n            } else {\n                // Check all entries\n                const keys = this._tree.currentRecord.values();\n                if (ascending) {\n                    for (let i = 0; i < keys.length; i++) {\n                        if (!callback(keys[i])) {\n                            break outer;\n                        }\n                    }\n                } else {\n                    for (let i = keys.length - 1; i >= 0; i--) {\n                        if (!callback(keys[i])) {\n                            break outer;\n                        }\n                    }\n                }\n            }\n\n            if (!this._tree.skip(ascending ? 1 : -1)) {\n                break;\n            }\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * Iterates over the values of the store in a given range of secondary keys and direction.\n     * The order is determined by the secondary keys first and by the primary keys second.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolved after all elements have been streamed.\n     */\n    async valueStream(callback, ascending=true, query=null) {\n        // Find lower bound and start from there.\n        if (!(query instanceof KeyRange)) {\n            if (ascending) {\n                if (!this._tree.goTop()) {\n                    return;\n                }\n            } else {\n                if (!this._tree.goBottom()) {\n                    return;\n                }\n            }\n        } else {\n            if (ascending) {\n                if (!this._tree.goToLowerBound(query.lower, query.lowerOpen)) {\n                    return;\n                }\n            } else {\n                if (!this._tree.goToUpperBound(query.upper, query.upperOpen)) {\n                    return;\n                }\n            }\n        }\n\n        outer:\n        while (!(query instanceof KeyRange) || query.includes(this._tree.currentKey)) {\n            if (this._unique) {\n                // Check unique entry\n                if (!callback(await this._objectStore.get(this._tree.currentRecord), this._tree.currentRecord)) break; // eslint-disable-line no-await-in-loop\n            } else {\n                // Check all entries\n                const keys = this._tree.currentRecord.values();\n                if (ascending) {\n                    for (let i = 0; i < keys.length; i++) {\n                        if (!callback(await this._objectStore.get(keys[i]), keys[i])) { // eslint-disable-line no-await-in-loop\n                            break outer;\n                        }\n                    }\n                } else {\n                    for (let i = keys.length - 1; i >= 0; i--) {\n                        if (!callback(await this._objectStore.get(keys[i]), keys[i])) { // eslint-disable-line no-await-in-loop\n                            break outer;\n                        }\n                    }\n                }\n            }\n\n            if (!this._tree.skip(ascending ? 1 : -1)) {\n                break;\n            }\n        }\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary key is maximal for the given range.\n     * If the optional query is not given, it returns the objects whose secondary key is maximal within the index.\n     * If the query is of type KeyRange, it returns the objects whose secondary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of array of objects relevant to the query.\n     */\n    async maxValues(query=null) {\n        const keys = await this.maxKeys(query);\n        return this._retrieveValues(keys);\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated secondary keys are maximal for the given range.\n     * If the optional query is not given, it returns the set of primary keys, whose associated secondary key is maximal within the index.\n     * If the query is of type KeyRange, it returns the set of primary keys, whose associated secondary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<*>>} A promise of the key relevant to the query.\n     */\n    async maxKeys(query=null) {\n        const isRange = query instanceof KeyRange;\n        if (!this._tree.goToUpperBound(isRange ? query.upper : undefined, isRange ? query.upperOpen : false)) {\n            return new Set();\n        }\n        return Set.from(this._tree.currentRecord);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary key is minimal for the given range.\n     * If the optional query is not given, it returns the objects whose secondary key is minimal within the index.\n     * If the query is of type KeyRange, it returns the objects whose secondary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of array of objects relevant to the query.\n     */\n    async minValues(query=null) {\n        const keys = await this.minKeys(query);\n        return this._retrieveValues(keys);\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated secondary keys are minimal for the given range.\n     * If the optional query is not given, it returns the set of primary keys, whose associated secondary key is minimal within the index.\n     * If the query is of type KeyRange, it returns the set of primary keys, whose associated secondary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<*>>} A promise of the key relevant to the query.\n     */\n    async minKeys(query=null) {\n        const isRange = query instanceof KeyRange;\n        if (!this._tree.goToLowerBound(isRange ? query.lower : undefined, isRange ? query.lowerOpen : false)) {\n            return new Set();\n        }\n        return Set.from(this._tree.currentRecord);\n    }\n\n    /**\n     * Returns the count of entries, whose secondary key is in the given range.\n     * If the optional query is not given, it returns the count of entries in the index.\n     * If the query is of type KeyRange, it returns the count of entries, whose secondary key is within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    async count(query=null) {\n        return (await this.keys(query)).size;\n        // The code below does only work for unique indices.\n        // if (!(query instanceof KeyRange)) {\n        //     return this._tree.length;\n        // }\n        // if (!this._tree.goToLowerBound(query.lower, query.lowerOpen)) {\n        //     return 0;\n        // }\n        // const start = this._tree.keynum();\n        // if (!this._tree.goToUpperBound(query.upper, query.upperOpen)) {\n        //     return 0;\n        // }\n        // const end = this._tree.keynum();\n        // return end - start + 1;\n    }\n}\nClass.register(InMemoryIndex);\n\n","/**\n * Transactions are created by calling the transaction method on an ObjectStore object.\n * Transactions ensure read-isolation.\n * On a given state, only *one* transaction can be committed successfully.\n * Other transactions based on the same state will end up in a conflicted state if committed.\n * Transactions opened after the successful commit of another transaction will be based on the\n * new state and hence can be committed again.\n * @implements {IBackend}\n * @implements {ISynchronousObjectStore}\n */\nclass InMemoryBackend {\n    constructor(tableName, codec=null) {\n        this._cache = new Map();\n\n        /** @type {Map.<string,InMemoryIndex>} */\n        this._indices = new Map();\n\n        this._primaryIndex = new InMemoryIndex(this, /*keyPath*/ undefined, /*multiEntry*/ false, /*unique*/ true);\n        this._tableName = tableName;\n        this._codec = codec;\n    }\n\n    /** @type {boolean} */\n    get connected() {\n        return true;\n    }\n\n    /**\n     * @type {Map.<string,IIndex>}\n     */\n    get indices() {\n        return this._indices;\n    }\n\n    /**\n     * Returns the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @abstract\n     * @param {string} key The primary key to look for.\n     * @param {SyncRetrievalConfig} [options] Advanced retrieval options.\n     * @returns {*} The object stored under the given key, or undefined if not present.\n     */\n    getSync(key, options = {}) {\n        // Ignore expectPresence here, since it is a non-cached synchronous backend!\n        const value = this._cache.get(key);\n        return (options && options.raw) ? value : this.decode(value, key);\n    }\n\n    /**\n     * @param {string} key\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     * @returns {Promise.<*>}\n     */\n    get(key, options = {}) {\n        try {\n            return Promise.resolve(this.getSync(key, options));\n        } catch(e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * @param {Query|KeyRange} [query]\n     * @param {number} [limit]\n     * @returns {Promise.<Array.<*>>}\n     */\n    async values(query = null, limit = null) {\n        if (query !== null && query instanceof Query) {\n            return query.values(this, limit);\n        }\n        const values = [];\n        for (const key of await this.keys(query, limit)) {\n            values.push(await this.get(key));\n        }\n        return Promise.resolve(values);\n    }\n\n    /**\n     * @param {Query|KeyRange} [query]\n     * @param {number} [limit]\n     * @returns {Promise.<Set.<string>>}\n     */\n    keys(query = null, limit = null) {\n        if (query !== null && query instanceof Query) {\n            return query.keys(this, limit);\n        }\n        return this._primaryIndex.keys(query, limit);\n    }\n\n    /**\n     * Iterates over the keys in a given range and direction.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    keyStream(callback, ascending=true, query=null) {\n        return this._primaryIndex.keyStream(callback, ascending, query);\n    }\n\n    /**\n     * Iterates over the keys and values in a given range and direction.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    valueStream(callback, ascending=true, query=null) {\n        return this._primaryIndex.valueStream(callback, ascending, query);\n    }\n\n    /**\n     * @param {KeyRange} [query]\n     * @returns {Promise.<*>}\n     */\n    async maxValue(query=null) {\n        const maxKey = await this.maxKey(query);\n        return this.get(maxKey);\n    }\n\n    /**\n     * @param {KeyRange} [query]\n     * @returns {Promise.<string>}\n     */\n    async maxKey(query=null) {\n        const keys = await this._primaryIndex.maxKeys(query);\n        return Set.sampleElement(keys);\n    }\n\n    /**\n     * @param {KeyRange} [query]\n     * @returns {Promise.<*>}\n     */\n    async minValue(query=null) {\n        const minKey = await this.minKey(query);\n        return this.get(minKey);\n    }\n\n    /**\n     * @param {KeyRange} [query]\n     * @returns {Promise.<string>}\n     */\n    async minKey(query=null) {\n        const keys = await this._primaryIndex.minKeys(query);\n        return Set.sampleElement(keys);\n    }\n\n    /**\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    async count(query=null) {\n        return (await this.keys(query)).size;\n    }\n\n    /**\n     * @param {string} indexName\n     * @returns {IIndex}\n     */\n    index(indexName) {\n        return this._indices.get(indexName);\n    }\n\n    /**\n     * @param {Transaction} tx\n     * @returns {Promise.<boolean>}\n     * @protected\n     */\n    async _apply(tx) {\n        if (tx._truncated) {\n            this.truncateSync();\n        }\n\n        const originalValues = new Map();\n\n        for (const key of tx._removed) {\n            const oldValue = this.getSync(key);\n            if (oldValue) {\n                originalValues.set(key, oldValue);\n            }\n            this._cache.delete(key);\n        }\n        for (const [key, value] of tx._modified) {\n            const oldValue = this.getSync(key);\n            if (oldValue) {\n                originalValues.set(key, oldValue);\n            }\n            this._cache.set(key, this.encode(value));\n        }\n\n        // Update all indices.\n        InMemoryBackend._indexApply(this._primaryIndex, tx, originalValues);\n        for (const index of this._indices.values()) {\n            InMemoryBackend._indexApply(index, tx, originalValues);\n        }\n    }\n\n    /**\n     * @param {InMemoryIndex} index\n     * @param {Transaction} tx\n     * @param {Map} originalValues\n     * @private\n     */\n    static _indexApply(index, tx, originalValues) {\n        if (tx._truncated) {\n            index.truncate();\n        }\n\n        for (const key of tx._removed) {\n            index.remove(key, originalValues.get(key));\n        }\n        for (const [key, value] of tx._modified) {\n            index.put(key, value, originalValues.get(key));\n        }\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    async truncate() {\n        this.truncateSync();\n    }\n\n    truncateSync() {\n        this._cache.clear();\n\n        // Truncate all indices.\n        this._primaryIndex.truncate();\n        for (const index of this._indices.values()) {\n            index.truncate();\n        }\n    }\n\n    /**\n     * @param {function(key:string, value:*)} func\n     * @returns {Promise}\n     */\n    async map(func) {\n        for (const [key, value] of this._cache) {\n            func(key, value);\n        }\n    }\n\n    /**\n     * @param {string} indexName The name of the index.\n     * @param {string|Array.<string>} [keyPath] The path to the key within the object. May be an array for multiple levels.\n     * @param {IndexConfig} [options] An options object.\n     */\n    createIndex(indexName, keyPath, options = {}) {\n        let { multiEntry = false, unique = false, upgradeCondition = null } = options || {};\n\n        keyPath = keyPath || indexName;\n        const index = new InMemoryIndex(this, keyPath, multiEntry, unique);\n        this._indices.set(indexName, index);\n    }\n\n    /**\n     * Deletes a secondary index from the object store.\n     * @param indexName\n     * @param {{upgradeCondition:?boolean|?function(oldVersion:number, newVersion:number):boolean}} [options]\n     */\n    deleteIndex(indexName, options = {}) {\n        let { upgradeCondition = null } = options || {};\n\n        this._indices.delete(indexName);\n    }\n\n    /**\n     * Method called to decode a single value.\n     * @param {*} value Value to be decoded.\n     * @param {string} key Key corresponding to the value.\n     * @returns {*} The decoded value.\n     */\n    decode(value, key) {\n        if (value === undefined) {\n            return undefined;\n        }\n        if (this._codec !== null && this._codec !== undefined) {\n            return this._codec.decode(value, key);\n        }\n        return value;\n    }\n\n    /**\n     * Method called to encode a single value.\n     * @param {*} value Value to be encoded.\n     * @returns {*} The encoded value.\n     */\n    encode(value) {\n        if (value === undefined) {\n            return undefined;\n        }\n        if (this._codec !== null && this._codec !== undefined) {\n            return this._codec.encode(value);\n        }\n        return value;\n    }\n\n    /** @type {string} The own table name. */\n    get tableName() {\n        return this._tableName;\n    }\n\n    /**\n     * Returns the necessary information in order to flush a combined transaction.\n     * @param {Transaction} tx The transaction that should be applied to this backend.\n     * @returns {Promise.<*|function():Promise>} Either the tableName if this is a native, persistent backend\n     * or a function that effectively applies the transaction to non-persistent backends.\n     */\n    async applyCombined(tx) {\n        return () => this._apply(tx);\n    }\n\n    /**\n     * Checks whether an object store implements the ISynchronousObjectStore interface.\n     * @returns {boolean} The transaction object.\n     */\n    isSynchronous() {\n        return true;\n    }\n\n    /**\n     * A check whether a certain key is cached.\n     * @param {string} key The key to check.\n     * @return {boolean} A boolean indicating whether the key is already in the cache.\n     */\n    isCached(key) {\n        return true;\n    }\n}\nClass.register(InMemoryBackend);\n","/**\n * This class represents range queries on an index (primary and secondary).\n */\nclass KeyRange {\n    /**\n     * This constructor is only used internally.\n     * See static methods for constructing a KeyRange object.\n     * @param {*} lower\n     * @param {*} upper\n     * @param {boolean} lowerOpen\n     * @param {boolean} upperOpen\n     * @private\n     */\n    constructor(lower, upper, lowerOpen, upperOpen) {\n        this._lower = lower;\n        this._upper = upper;\n        this._lowerOpen = lowerOpen;\n        this._upperOpen = upperOpen;\n    }\n\n    /** @type {*} The lower bound of the range. */\n    get lower() {\n        return this._lower;\n    }\n\n    /** @type {*} The upper bound of the range. */\n    get upper() {\n        return this._upper;\n    }\n\n    /** @type {boolean} Whether the lower bound is NOT part of the range. */\n    get lowerOpen() {\n        return this._lowerOpen;\n    }\n\n    /** @type {boolean} Whether the upper bound is NOT part of the range. */\n    get upperOpen() {\n        return this._upperOpen;\n    }\n\n    /** @type {boolean} Whether it is a query for an exact match. */\n    get exactMatch() {\n        return this._lower === this._upper && !this._lowerOpen && !this.upperOpen;\n    }\n\n    /**\n     * Returns true if the given key is included in this range.\n     * @param {*} key The key to test for.\n     * @returns {boolean} True, if the key is included in the range and false otherwise.\n     */\n    includes(key) {\n        return (this._lower === undefined\n                || ComparisonUtils.compare(this._lower, key) < 0\n                || (!this._lowerOpen && ComparisonUtils.equals(this._lower, key)))\n            && (this._upper === undefined\n                || ComparisonUtils.compare(this._upper, key) > 0\n                || (!this._upperOpen && ComparisonUtils.equals(this._upper, key)));\n    }\n\n    /**\n     * If upperOpen is false, all keys ≤ upper,\n     * all keys < upper otherwise.\n     * @param {*} upper The upper bound.\n     * @param {boolean} upperOpen Whether the upper bound is NOT part of the range.\n     * @returns {KeyRange} The corresponding KeyRange object.\n     */\n    static upperBound(upper, upperOpen=false) {\n        return new KeyRange(undefined, upper, false, upperOpen);\n    }\n\n    /**\n     * If lowerOpen is false, all keys ≥ lower,\n     * all keys > lower otherwise.\n     * @param {*} lower The lower bound.\n     * @param {boolean} lowerOpen Whether the lower bound is NOT part of the range.\n     * @returns {KeyRange} The corresponding KeyRange object.\n     */\n    static lowerBound(lower, lowerOpen=false) {\n        return new KeyRange(lower, undefined, lowerOpen, false);\n    }\n\n    /**\n     * A range bounded by both a lower and upper bound.\n     * lowerOpen and upperOpen decide upon whether < (open) or ≤ (inclusive) comparisons\n     * should be used for comparison.\n     * @param {*} lower The lower bound.\n     * @param {*} upper The upper bound.\n     * @param {boolean} lowerOpen Whether the lower bound is NOT part of the range.\n     * @param {boolean} upperOpen Whether the upper bound is NOT part of the range.\n     * @returns {KeyRange} The corresponding KeyRange object.\n     */\n    static bound(lower, upper, lowerOpen=false, upperOpen=false) {\n        return new KeyRange(lower, upper, lowerOpen, upperOpen);\n    }\n\n    /**\n     * A range matching only exactly one value.\n     * @param {*} value The value to match.\n     * @returns {KeyRange} The corresponding KeyRange object.\n     */\n    static only(value) {\n        return new KeyRange(value, value, false, false);\n    }\n}\nClass.register(KeyRange);\n","/**\n * This is the main implementation of an object store.\n * It uses a specified backend (which itself implements the very same interface)\n * and builds upon this backend to answer queries.\n * The main task of this object store is to manage transactions\n * and ensure read isolation on these transactions.\n * @implements {IObjectStore}\n * @implements {ICommittable}\n */\nclass ObjectStore {\n    /**\n     * Creates a new object store based on a backend and an underlying database.\n     * The database is only used to determine the connection status.\n     * @param {IBackend} backend The backend underlying this object store.\n     * @param {JungleDB} db The database underlying the backend.\n     * @param {string} [name] The name of the object store if existent.\n     */\n    constructor(backend, db, name) {\n        this._backend = backend;\n        this._db = db;\n        this._name = name;\n        /** @type {Array.<TransactionInfo>} */\n        this._stateStack = [];\n        this._backendInfo = new TransactionInfo(this._backend, null);\n        /**\n         * Maps transactions to their TransactionInfo objects.\n         * @type {Map.<number|string,TransactionInfo>}\n         */\n        this._transactions = new Map();\n        this._transactions.set(ObjectStore.BACKEND_ID, this._backendInfo);\n\n        /**\n         * The set of currently open snapshots.\n         * @type {Set.<Snapshot>}\n         */\n        this._snapshotManager = new SnapshotManager();\n\n        this._synchronizer = new Synchronizer();\n    }\n\n    /** @type {JungleDB} */\n    get jungleDB() {\n        return this._db;\n    }\n\n    /** @type {boolean} */\n    get connected() {\n        return this._backend.connected;\n    }\n\n    /** @type {IObjectStore} */\n    get _currentState() {\n        return this._stateStack.length > 0 ? this._stateStack[this._stateStack.length - 1].transaction : this._backend;\n    }\n\n    /** @type {TransactionInfo} */\n    get _currentStateInfo() {\n        return this._stateStack.length > 0 ? this._stateStack[this._stateStack.length - 1] : this._backendInfo;\n    }\n\n    /** @type {number|string} */\n    get _currentStateId() {\n        return this._stateStack.length > 0 ? this._stateStack[this._stateStack.length - 1].id : ObjectStore.BACKEND_ID;\n    }\n\n    /**\n     * A map of index names to indices.\n     * The index names can be used to access an index.\n     * @type {Map.<string,IIndex>}\n     */\n    get indices() {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.indices;\n    }\n\n    /**\n     * Returns a promise of the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @param {string} key The primary key to look for.\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     * @returns {Promise.<*>} A promise of the object stored under the given key, or undefined if not present.\n     */\n    get(key, options = {}) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.get(key, options);\n    }\n\n    /**\n     * Inserts or replaces a key-value pair.\n     * Implicitly creates a transaction for this operation and commits it.\n     * @param {string} key The primary key to associate the value with.\n     * @param {*} value The value to write.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    async put(key, value) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        const tx = this.transaction();\n        try {\n            await tx.put(key, value);\n        } catch (err) {\n            await tx.abort();\n            throw err;\n        }\n        return tx.commit();\n    }\n\n    /**\n     * Removes the key-value pair of the given key from the object store.\n     * Implicitly creates a transaction for this operation and commits it.\n     * @param {string} key The primary key to delete along with the associated object.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    async remove(key) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        const tx = this.transaction();\n        try {\n            await tx.remove(key);\n        } catch (err) {\n            await tx.abort();\n            throw err;\n        }\n        return tx.commit();\n    }\n\n    /**\n     * Returns the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @param {string} key The primary key to look for.\n     * @param {SyncRetrievalConfig} [options] Advanced retrieval options.\n     * @returns {*} The object stored under the given key, or undefined if not present.\n     */\n    getSync(key, options = {}) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        if (!this._currentState.isSynchronous()) throw new Error('Only works on synchronous backends');\n        return this._currentState.getSync(key, options);\n    }\n\n    /**\n     * A check whether a certain key is cached.\n     * @param {string} key The key to check.\n     * @return {boolean} A boolean indicating whether the key is already in the cache.\n     */\n    isCached(key) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        if (!this._currentState.isSynchronous()) throw new Error('Only works on synchronous backends');\n        return this._currentState.isCached(key);\n    }\n\n    /**\n     * Returns a promise of a set of keys fulfilling the given query.\n     * If the optional query is not given, it returns all keys in the object store.\n     * If the query is of type KeyRange, it returns all keys of the object store being within this range.\n     * If the query is of type Query, it returns all keys fulfilling the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to the query.\n     */\n    keys(query = null, limit = null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        if (query !== null && query instanceof Query) {\n            return query.keys(this._currentState, limit);\n        }\n        return this._currentState.keys(query, limit);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose primary keys fulfill the given query.\n     * If the optional query is not given, it returns all objects in the object store.\n     * If the query is of type KeyRange, it returns all objects whose primary keys are within this range.\n     * If the query is of type Query, it returns all objects whose primary keys fulfill the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    values(query = null, limit = null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        if (query !== null && query instanceof Query) {\n            return query.values(this._currentState, limit);\n        }\n        return this._currentState.values(query, limit);\n    }\n\n    /**\n     * Iterates over the keys in a given range and direction.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    keyStream(callback, ascending=true, query=null) {\n        return this._currentState.keyStream(callback, ascending, query);\n    }\n\n    /**\n     * Iterates over the keys and values in a given range and direction.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    valueStream(callback, ascending=true, query=null) {\n        return this._currentState.valueStream(callback, ascending, query);\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is maximal for the given range.\n     * If the optional query is not given, it returns the object whose key is maximal.\n     * If the query is of type KeyRange, it returns the object whose primary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    maxValue(query=null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.maxValue(query);\n    }\n\n    /**\n     * Returns a promise of the key being maximal for the given range.\n     * If the optional query is not given, it returns the maximal key.\n     * If the query is of type KeyRange, it returns the key being maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    maxKey(query=null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.maxKey(query);\n    }\n\n    /**\n     * Returns a promise of the key being minimal for the given range.\n     * If the optional query is not given, it returns the minimal key.\n     * If the query is of type KeyRange, it returns the key being minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    minKey(query=null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.minKey(query);\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is minimal for the given range.\n     * If the optional query is not given, it returns the object whose key is minimal.\n     * If the query is of type KeyRange, it returns the object whose primary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    minValue(query=null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.minValue(query);\n    }\n\n    /**\n     * Returns the count of entries in the given range.\n     * If the optional query is not given, it returns the count of entries in the object store.\n     * If the query is of type KeyRange, it returns the count of entries within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    count(query=null) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.count(query);\n    }\n\n    /**\n     * This method is only used by transactions internally to commit themselves to the corresponding object store.\n     * Thus, the tx argument is non-optional.\n     * A call to this method checks whether the given transaction can be applied and pushes it to\n     * the stack of applied transactions. When there is no other transaction requiring to enforce\n     * read isolation, the state will be flattened and all transactions will be applied to the backend.\n     * @param {Transaction} tx The transaction to be applied.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @protected\n     */\n    async commit(tx) {\n        if (!this._isCommittable(tx)) {\n            await this.abort(tx);\n            return false;\n        }\n        await this._commitInternal(tx);\n        return true;\n    }\n\n    /**\n     * Is used to probe whether a transaction can be committed.\n     * This, for example, includes a check whether another transaction has already been committed.\n     * @protected\n     * @param {Transaction} tx The transaction to be applied.\n     * @returns {boolean} Whether a commit will be successful.\n     */\n    _isCommittable(tx) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        if (!(tx instanceof Transaction) || tx.state !== Transaction.STATE.OPEN || !this._transactions.has(tx.id)) {\n            throw new Error('Can only commit open transactions');\n        }\n\n        const info = this._transactions.get(tx.id);\n\n        // Another transaction was already committed.\n        return info.isCommittable();\n    }\n\n    /**\n     * Commits the transaction to the backend.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @protected\n     */\n    async _commitBackend() {\n        throw new Error('Cannot commit object stores');\n    }\n\n    /**\n     * Is used to commit the transaction.\n     * @protected\n     * @param {Transaction} tx The transaction to be applied.\n     * @returns {Promise} A promise that resolves upon successful application of the transaction.\n     */\n    async _commitInternal(tx) {\n        const info = this._transactions.get(tx.id);\n\n        // Create new layer on stack (might be immediately removed by a state flattening).\n        if (this._stateStack.length >= ObjectStore.MAX_STACK_SIZE) {\n            Log.e(ObjectStore, `Transaction stack size exceeded ${this.toStringFull()}`);\n            throw new Error('Transaction stack size exceeded');\n        }\n        this._stateStack.push(info);\n        info.close();\n\n        // If this is the last transaction, we push our changes to the underlying layer.\n        // This only works if the given transaction does not have dependencies or the current state is the backend.\n        if (info.isFlushable()) {\n            // The underlying layer *has to be* the last one in our stack.\n            await this._flattenState(tx);\n        }\n    }\n\n    /**\n     * Allows to change the backend of a Transaction when the state has been flushed.\n     * @param parent\n     * @protected\n     */\n    _setParent(parent) {\n        throw new Error('Unsupported operation');\n    }\n\n    /**\n     * This method is only used by transactions internally to abort themselves at the corresponding object store.\n     * Thus, the tx argument is non-optional.\n     * @param {Transaction} tx The transaction to be aborted.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @protected\n     */\n    async abort(tx) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n\n        if (tx instanceof Snapshot) {\n            return this._snapshotManager.abortSnapshot(tx);\n        }\n\n        if (!(tx instanceof Transaction) || tx.state !== Transaction.STATE.OPEN || !this._transactions.has(tx.id)) {\n            throw new Error('Can only abort open transactions');\n        }\n        const info = this._transactions.get(tx.id);\n        info.abort();\n\n        // If this abortion resolves a conflict, try flattening the state.\n        if (info.parent && info.parent.numOpenChildren === 0) {\n            await this._flattenState();\n        }\n        return true;\n    }\n\n    /**\n     * This internal method applies a transaction to the current state\n     * and tries flattening the stack of transactions.\n     * @param {Transaction} [tx] An optional transaction to apply to the current state.\n     * @returns {Promise.<boolean>} If a tx is given, this boolean indicates whether the state has been merged.\n     * If tx is not given, the return value is false and does not convey a meaning.\n     * @private\n     */\n    _flattenState(tx) {\n        return this._synchronizer.push(() => this._flattenStateInternal(tx));\n    }\n\n    /**\n     * This internal method applies a transaction to the current state\n     * and tries flattening the stack of transactions.\n     * @param {Transaction} [tx] An optional transaction to apply to the current state.\n     * @returns {Promise.<boolean>} If a tx is given, this boolean indicates whether the state has been merged.\n     * If tx is not given, the return value is false and does not convey a meaning.\n     * @private\n     */\n    async _flattenStateInternal(tx) {\n        // If there is a tx argument, merge it with the current state.\n        if (tx && (tx instanceof Transaction)) {\n            // Check whether the state can be flattened.\n            // For this, the following conditions have to hold:\n            // 1. the base state does not have open transactions\n            const info = this._transactions.get(tx.id);\n            if (!info.isFlushable()) {\n                return false;\n            }\n\n            // Applying is possible.\n            // We apply it first and upon successful application, we update transactions.\n            // This way, we ensure that intermediate reads still work and that transactions\n            // are still consistent even if the application fails.\n            const backend = info.parent.transaction;\n            const cleanup = () => {\n                // Change pointers in child transactions.\n                info.flush();\n                this._transactions.delete(tx.id);\n\n                // Look for tx on stack and remove it.\n                const statePosition = this._stateStack.indexOf(info);\n                if (statePosition >= 0) {\n                    this._stateStack.splice(statePosition, 1);\n                }\n\n                this._flattenState().catch(Log.w.tag(ObjectStore));\n            };\n\n            if (tx.dependency === null) {\n                // If we apply to the backend, update the snapshots.\n                if (info.parent.isBackend()) {\n                    await this._snapshotManager.applyTx(tx, backend);\n                }\n                try {\n                    await backend._apply(tx);\n                } catch (err) {\n                    // Change pointers in child transactions.\n                    info.abort();\n                    this._transactions.delete(tx.id);\n\n                    // Look for tx on stack and remove it.\n                    const statePosition = this._stateStack.indexOf(info);\n                    if (statePosition >= 0) {\n                        this._stateStack.splice(statePosition, 1);\n                    }\n                    tx._setAborted();\n                    Log.e(ObjectStore, 'Error while applying transaction', err);\n                }\n                cleanup();\n                return true;\n            } else {\n                // We apply to the backend, so also update snapshots before the flush.\n                return await tx.dependency.onFlushable(tx, cleanup, () => this._snapshotManager.applyTx(tx, backend));\n            }\n        } else {\n            // Check both ends of the stack.\n            // Start with the easy part: The last state.\n            // Start flattening at the end.\n            while (this._stateStack.length > 0) {\n                if (!(await this._flattenStateInternal(this._currentState))) {\n                    break;\n                }\n            }\n            // Then try flattening from the start.\n            while (this._stateStack.length > 0) {\n                if (!(await this._flattenStateInternal(this._stateStack[0].transaction))) {\n                    break;\n                }\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Returns the index of the given name.\n     * If the index does not exist, it returns undefined.\n     * @param {string} indexName The name of the requested index.\n     * @returns {IIndex} The index associated with the given name.\n     */\n    index(indexName) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        return this._currentState.index(indexName);\n    }\n\n    /**\n     * Creates a new secondary index on the object store.\n     * Currently, all secondary indices are non-unique.\n     * They are defined by a key within the object or alternatively a path through the object to a specific subkey.\n     * For example, ['a', 'b'] could be used to use 'key' as the key in the following object:\n     * { 'a': { 'b': 'key' } }\n     * Secondary indices may be multiEntry, i.e., if the keyPath resolves to an iterable object, each item within can\n     * be used to find this entry.\n     * If a new object does not possess the key path associated with that index, it is simply ignored.\n     *\n     * This function may only be called before the database is connected.\n     * Moreover, it is only executed on database version updates or on first creation.\n     * @param {string} indexName The name of the index.\n     * @param {string|Array.<string>} [keyPath] The path to the key within the object. May be an array for multiple levels.\n     * @param {IndexConfig} [options] An options object.\n     */\n    createIndex(indexName, keyPath, options = {}) {\n        return this._backend.createIndex(indexName, keyPath, options);\n    }\n\n    /**\n     * Deletes a secondary index from the object store.\n     * @param indexName\n     * @param {{upgradeCondition:?boolean|?function(oldVersion:number, newVersion:number):boolean}} [options]\n     */\n    deleteIndex(indexName, options = {}) {\n        return this._backend.deleteIndex(indexName, options);\n    }\n\n    /**\n     * Creates a new transaction, ensuring read isolation\n     * on the most recently successfully committed state.\n     * @param {boolean} [enableWatchdog]\n     * @returns {Transaction} The transaction object.\n     */\n    transaction(enableWatchdog=true) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n\n        // Prefer synchronous transactions.\n        if (this._backend.isSynchronous()) return this.synchronousTransaction(enableWatchdog);\n\n        const tx = new Transaction(this, this._currentState, this, enableWatchdog);\n        this._transactions.set(tx.id, new TransactionInfo(tx, this._currentStateInfo));\n        return tx;\n    }\n\n    /**\n     * Creates a new synchronous transaction, ensuring read isolation\n     * on the most recently successfully committed state.\n     *\n     * WARNING: If not all required key-value-pairs are preloaded, the results of any call on a synchronous transaction\n     * might be wrong. Only use synchronous transactions, if unavoidable.\n     * @param {boolean} [enableWatchdog]\n     * @returns {SynchronousTransaction} The synchronous transaction object.\n     */\n    synchronousTransaction(enableWatchdog=true) {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        const tx = new SynchronousTransaction(this, this._currentState, this, enableWatchdog);\n        this._transactions.set(tx.id, new TransactionInfo(tx, this._currentStateInfo));\n        return tx;\n    }\n\n    /**\n     * Checks whether an object store implements the ISynchronousObjectStore interface.\n     * @returns {boolean} The transaction object.\n     */\n    isSynchronous() {\n        return this._backend.isSynchronous();\n    }\n\n    /**\n     * Creates an in-memory snapshot of the current state.\n     * This snapshot only maintains the differences between the state at the time of the snapshot\n     * and the current state.\n     * To stop maintaining the snapshot, it has to be aborted.\n     * @returns {Snapshot}\n     */\n    snapshot() {\n        if (this._currentStateId !== ObjectStore.BACKEND_ID) {\n            return this._currentState.snapshot();\n        }\n        return this._snapshotManager.createSnapshot(this, this._currentState);\n    }\n\n    /**\n     * An object store is strongly connected to a backend.\n     * Hence, it does not store anything by itself and the _apply method is not supported.\n     * @param {Transaction} tx\n     * @returns {Promise.<boolean>}\n     * @protected\n     */\n    async _apply(tx) {\n        throw new Error('Unsupported operation');\n    }\n\n    /**\n     * Empties the object store.\n     * @returns {Promise} The promise resolves after emptying the object store.\n     */\n    async truncate() {\n        if (!this._backend.connected) throw new Error('JungleDB is not connected');\n        const tx = this.transaction();\n        await tx.truncate();\n        return tx.commit();\n    }\n\n    /**\n     * Closes the object store and potential connections.\n     * @returns {Promise} The promise resolves after closing the object store.\n     */\n    close() {\n        // TODO perhaps use a different strategy here\n        if (this._stateStack.length > 0) {\n            throw new Error('Cannot close database while transactions are active');\n        }\n        return this._backend.close();\n    }\n\n    /**\n     * Method called to decode a single value.\n     * @param {*} value Value to be decoded.\n     * @param {string} key Key corresponding to the value.\n     * @returns {*} The decoded value.\n     */\n    decode(value, key) {\n        return this._backend.decode(value, key);\n    }\n\n    /**\n     * Method called to encode a single value.\n     * @param {*} value Value to be encoded.\n     * @returns {*} The encoded value.\n     */\n    encode(value) {\n        return this._backend.encode(value);\n    }\n\n    toStringFull() {\n        return `ObjectStore{\n    stack=[${this._stateStack.map(tx => `{tx=${tx.toStringShort()}, open=${this._openTransactions.get(tx.id) ? this._openTransactions.get(tx.id).size : 0}}`)}],\n    db=${this._db}/${this._name ? this._name : 'unnamed'}\n}`;\n    }\n\n    toString() {\n        return `ObjectStore{stackSize=${this._stateStack.length}, db=${this._db}/${this._name ? this._name : 'unnamed'}}`;\n    }\n}\n/** @type {number} The maximum number of states to stack. */\nObjectStore.MAX_STACK_SIZE = 10;\nObjectStore.BACKEND_ID = 'backend';\nClass.register(ObjectStore);\n\nclass TransactionInfo {\n    /**\n     * @param {Transaction} transaction\n     * @param {TransactionInfo} parentInfo\n     * @param {Array.<TransactionInfo>} children\n     */\n    constructor(transaction, parentInfo, children = []) {\n        this.transaction = transaction;\n        this.children = children;\n        this._parentInfo = parentInfo;\n        this._open = true;\n\n        if (this._parentInfo) {\n            this._parentInfo.addChild(this);\n        }\n    }\n\n    /**\n     * @param {TransactionInfo} transaction\n     */\n    addChild(transaction) {\n        this.children.push(transaction);\n    }\n\n    /**\n     * @param {TransactionInfo} transaction\n     */\n    removeChild(transaction) {\n        const i = this.children.indexOf(transaction);\n        if (i >= 0) {\n            this.children.splice(i, 1);\n        }\n    }\n\n    flush() {\n        if (!this.isBackend()) {\n            const parent = this.parent;\n            this.parent.removeChild(this);\n            for (const /** @type {TransactionInfo} */ child of this.children.slice()) {\n                child.parent = parent;\n            }\n            this.children = [];\n            this._parentInfo = null;\n        }\n    }\n\n    abort() {\n        if (!this.isBackend()) {\n            this.parent.removeChild(this);\n        }\n    }\n\n    close() {\n        this._open = false;\n    }\n\n    /** @type {TransactionInfo} */\n    get parent() {\n        return this._parentInfo;\n    }\n\n    /**\n     * @param {TransactionInfo} parent\n     */\n    set parent(parent) {\n        this.parent.removeChild(this);\n        this._parentInfo = parent;\n        this.parent.addChild(this);\n        this.transaction._setParent(parent.transaction);\n    }\n\n    /** @type {number} */\n    get id() {\n        return this.isBackend() ? ObjectStore.BACKEND_ID : this.transaction.id;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isBackend() {\n        return this._parentInfo === null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isOpen() {\n        return this._open;\n    }\n\n    /**\n     * @type {number}\n     */\n    get numOpenChildren() {\n        return this.children.filter(child => child.isOpen()).length;\n    }\n\n\n    /**\n     * @returns {*|boolean}\n     */\n    isCommittable() {\n        return this._parentInfo && this._parentInfo.children.every(child => child.isOpen());\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFlushable() {\n        return this.parent && this.parent.numOpenChildren === 0 && (this.transaction.dependency === null || this.parent.isBackend());\n    }\n}\n","/**\n * This class represents a Query object.\n * Queries are constructed using the static helper methods.\n */\nclass Query {\n    /**\n     * Internal helper method that translates an operation to a KeyRange object.\n     * @param {Query.OPERATORS} op The operator of the query.\n     * @param {*} value The first operand of the query.\n     * @param {*} [value2] The optional second operand of the query.\n     * @private\n     */\n    static _parseKeyRange(op, value, value2) {\n        switch (op) {\n            case Query.OPERATORS.GT:\n                return KeyRange.lowerBound(value, true);\n            case Query.OPERATORS.GE:\n                return KeyRange.lowerBound(value, false);\n            case Query.OPERATORS.LT:\n                return KeyRange.upperBound(value, true);\n            case Query.OPERATORS.LE:\n                return KeyRange.upperBound(value, false);\n            case Query.OPERATORS.EQ:\n                return KeyRange.only(value);\n            case Query.OPERATORS.BETWEEN:\n                return KeyRange.bound(value, value2, true, true);\n            case Query.OPERATORS.WITHIN:\n                return KeyRange.bound(value, value2, false, false);\n        }\n        Log.e(`Unknown operator: ${op}`);\n        throw new Error('Unknown operator');\n    }\n\n    /**\n     * Returns the conjunction of multiple queries.\n     * @param {...Query} var_args The list of queries, which all have to be fulfilled.\n     * @returns {Query} The conjunction of the queries.\n     */\n    static and(var_args) {\n        const args = Array.from(arguments);\n        return new Query(args, Query.OPERATORS.AND);\n    }\n\n    /**\n     * Returns the disjunction of multiple queries.\n     * @param {...Query} var_args The list of queries, out of which at least one has to be fulfilled.\n     * @returns {Query} The disjunction of the queries.\n     */\n    static or(var_args) {\n        const args = Array.from(arguments);\n        return new Query(args, Query.OPERATORS.OR);\n    }\n\n    /**\n     * Returns a query for the max key of an index.\n     * @param {string} indexName The name of the index, whose maximal key the query matches.\n     * @returns {Query} The query for the max key of the index.\n     */\n    static max(indexName) {\n        return new Query(indexName, Query.OPERATORS.MAX);\n    }\n\n    /**\n     * Returns a query for the min key of an index.\n     * @param {string} indexName The name of the index, whose minimal key the query matches.\n     * @returns {Query} The query for the min key of the index.\n     */\n    static min(indexName) {\n        return new Query(indexName, Query.OPERATORS.MIN);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that are less than a value.\n     * The query matches all keys k, such that k < val.\n     * @param {string} indexName The name of the index.\n     * @param {*} val The upper bound of the query.\n     * @returns {Query} The resulting query object.\n     */\n    static lt(indexName, val) {\n        return new Query(indexName, Query.OPERATORS.LT, val);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that are less or equal than a value.\n     * The query matches all keys k, such that k ≤ val.\n     * @param {string} indexName The name of the index.\n     * @param {*} val The upper bound of the query.\n     * @returns {Query} The resulting query object.\n     */\n    static le(indexName, val) {\n        return new Query(indexName, Query.OPERATORS.LE, val);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that are greater than a value.\n     * The query matches all keys k, such that k > val.\n     * @param {string} indexName The name of the index.\n     * @param {*} val The lower bound of the query.\n     * @returns {Query} The resulting query object.\n     */\n    static gt(indexName, val) {\n        return new Query(indexName, Query.OPERATORS.GT, val);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that are greater or equal than a value.\n     * The query matches all keys k, such that k ≥ val.\n     * @param {string} indexName The name of the index.\n     * @param {*} val The lower bound of the query.\n     * @returns {Query} The resulting query object.\n     */\n    static ge(indexName, val) {\n        return new Query(indexName, Query.OPERATORS.GE, val);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that equal to a value.\n     * The query matches all keys k, such that k = val.\n     * @param {string} indexName The name of the index.\n     * @param {*} val The value to look for.\n     * @returns {Query} The resulting query object.\n     */\n    static eq(indexName, val) {\n        return new Query(indexName, Query.OPERATORS.EQ, val);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that are between two values, excluding the boundaries.\n     * The query matches all keys k, such that lower < k < upper.\n     * @param {string} indexName The name of the index.\n     * @param {*} lower The lower bound.\n     * @param {*} upper The upper bound.\n     * @returns {Query} The resulting query object.\n     */\n    static between(indexName, lower, upper) {\n        return new Query(indexName, Query.OPERATORS.BETWEEN, lower, upper);\n    }\n\n    /**\n     * Returns a query that matches all keys of an index that are between two values, including the boundaries.\n     * The query matches all keys k, such that lower ≤ k ≤ upper.\n     * @param {string} indexName The name of the index.\n     * @param {*} lower The lower bound.\n     * @param {*} upper The upper bound.\n     * @returns {Query} The resulting query object.\n     */\n    static within(indexName, lower, upper) {\n        return new Query(indexName, Query.OPERATORS.WITHIN, lower, upper);\n    }\n\n    /**\n     * Internal constructor for a query.\n     * Should not be called directly.\n     * @param {string|Array.<Query>} arg Either a list of queries or an index name (depending on the operator).\n     * @param {Query.OPERATORS} op The operator to apply.\n     * @param {*} [value] The first operand if applicable.\n     * @param {*} [value2] The second operand if applicable.\n     * @private\n     */\n    constructor(arg, op, value, value2) {\n        // If first argument is an array of queries, this is a combined query.\n        if (Array.isArray(arg)) {\n            if (arg.some(it => !(it instanceof Query))) {\n                throw new Error('Invalid query');\n            }\n            if (Query.COMBINED_OPERATORS.indexOf(op) < 0) {\n                throw new Error('Unknown operator');\n            }\n            this._queryType = Query.Type.COMBINED;\n            this._queries = arg;\n            this._op = op;\n        }\n        // Otherwise we have a single query.\n        else {\n            if (Query.RANGE_OPERATORS.indexOf(op) >= 0) {\n                this._queryType = Query.Type.RANGE;\n                this._keyRange = Query._parseKeyRange(op, value, value2);\n            } else if (Query.ADVANCED_OPERATORS.indexOf(op) >= 0) {\n                this._queryType = Query.Type.ADVANCED;\n                this._op = op;\n            } else {\n                throw new Error('Unknown operator');\n            }\n            this._indexName = arg;\n        }\n    }\n\n    /**\n     * Returns a promise of an array of objects fulfilling this query.\n     * @param {IObjectStore} objectStore The object store to execute the query on.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to this query.\n     */\n    async values(objectStore, limit = null) {\n        const keys = await this._execute(objectStore, limit);\n        const resultPromises = [];\n        for (const key of keys) {\n            resultPromises.push(objectStore.get(key));\n        }\n        return Promise.all(resultPromises);\n    }\n\n    /**\n     * Returns a promise of a set of keys fulfilling this query.\n     * @param {IObjectStore} objectStore The object store to execute the query on.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to this query.\n     */\n    keys(objectStore, limit = null) {\n        return this._execute(objectStore, limit);\n    }\n\n    /**\n     * Internal method to execute a query on an object store.\n     * @param {IObjectStore} objectStore The object store to execute the query on.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to this query.\n     * @private\n     */\n    async _execute(objectStore, limit = null) {\n        switch (this._queryType) {\n            case Query.Type.COMBINED:\n                return Promise.resolve(this._executeCombined(objectStore, limit));\n\n            case Query.Type.ADVANCED:\n                return Promise.resolve(this._executeAdvanced(objectStore, limit));\n\n            case Query.Type.RANGE:\n                return this._executeRange(objectStore, limit);\n        }\n        return Promise.resolve(new Set());\n    }\n\n    /**\n     * Internal method for and/or operators.\n     * @param {IObjectStore} objectStore The object store to execute the query on.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to this query.\n     * @private\n     */\n    async _executeCombined(objectStore, limit = null) {\n        // Evaluate children.\n        const resultPromises = [];\n        for (const query of this._queries) {\n            resultPromises.push(query._execute(objectStore, limit));\n        }\n        const results = await Promise.all(resultPromises);\n\n        if (this._op === Query.OPERATORS.AND) {\n            // Provide shortcuts.\n            if (results.length === 0) {\n                return new Set();\n            } else if (results.length === 1) {\n                // Limit\n                if (limit === null || limit >= 1) {\n                    return results[0];\n                }\n                return new Set();\n            }\n\n            // Set intersection of all keys.\n            const firstResult = results.shift();\n            const intersection = new Set();\n            let count = 0;\n            for (const val of firstResult) {\n                if (results.every(result => result.has(val))) {\n                    // Limit\n                    if (limit !== null && count >= limit) break;\n\n                    intersection.add(val);\n                    count++;\n                }\n            }\n            return intersection;\n        } else if (this._op === Query.OPERATORS.OR) {\n            // Set union of all keys.\n            const union = new Set();\n            let count = 0;\n            for (const result of results) {\n                for (const val of result) {\n                    // Limit\n                    if (limit !== null && count >= limit) break;\n\n                    union.add(val);\n                    count++;\n                }\n                if (limit !== null && count >= limit) break;\n            }\n            return union;\n        }\n        return new Set();\n    }\n\n    /**\n     * Internal method for min/max operators.\n     * @param {IObjectStore} objectStore The object store to execute the query on.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to this query.\n     * @private\n     */\n    async _executeAdvanced(objectStore, limit = null) {\n        const index = objectStore.index(this._indexName);\n        let results = new Set();\n        switch (this._op) {\n            case Query.OPERATORS.MAX:\n                results = await index.maxKeys();\n                break;\n            case Query.OPERATORS.MIN:\n                results = await index.minKeys();\n                break;\n        }\n        return new Set(results.limit(limit));\n    }\n\n    /**\n     * Internal method for range operators.\n     * @param {IObjectStore} objectStore The object store to execute the query on.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to this query.\n     * @private\n     */\n    async _executeRange(objectStore, limit = null) {\n        const index = objectStore.index(this._indexName);\n        return new Set(await index.keys(this._keyRange, limit));\n    }\n}\n/**\n * Enum for supported operators.\n * @enum {number}\n */\nQuery.OPERATORS = {\n    GT: 0,\n    GE: 1,\n    LT: 2,\n    LE: 3,\n    EQ: 4,\n    // NEQ: 5, not supported\n    BETWEEN: 7,\n    WITHIN: 8,\n    MAX: 9,\n    MIN: 10,\n    AND: 11,\n    OR: 12\n};\nQuery.RANGE_OPERATORS = [\n    Query.OPERATORS.GT,\n    Query.OPERATORS.GE,\n    Query.OPERATORS.LT,\n    Query.OPERATORS.LE,\n    Query.OPERATORS.EQ,\n    Query.OPERATORS.BETWEEN,\n    Query.OPERATORS.WITHIN\n];\nQuery.ADVANCED_OPERATORS = [Query.OPERATORS.MAX, Query.OPERATORS.MIN];\nQuery.COMBINED_OPERATORS = [Query.OPERATORS.AND, Query.OPERATORS.OR];\n/**\n * Enum for query types.\n * Each operator belongs to one of these types as specified above.\n * @enum {number}\n */\nQuery.Type = {\n    RANGE: 0,\n    ADVANCED: 1,\n    COMBINED: 2\n};\nClass.register(Query);\n\n","/**\n * This class constitutes an InMemoryIndex for Transactions.\n * It unifies the results of keys changed during the transaction\n * with the underlying backend.\n */\nclass TransactionIndex extends InMemoryIndex {\n    /**\n     * Derives the indices from the backend and returns a new map of transactions.\n     * @param {Transaction} objectStore The transaction the index should be based on.\n     * @param {IObjectStore} backend The backend underlying the transaction.\n     * @returns {Map.<string,TransactionIndex>} A map containing all indices for the transaction.\n     */\n    static derive(objectStore, backend) {\n        const indices = new Map();\n        for (const [name, index] of backend.indices) {\n            indices.set(name, new TransactionIndex(objectStore, backend, name, index.keyPath, index.multiEntry, index.unique));\n        }\n        return indices;\n    }\n\n    /** @type {IIndex} The index of the underlying backend. */\n    get _index() {\n        return this._backend.index(this._databaseDir);\n    }\n\n    /**\n     * Constructs a new TransactionIndex serving the transaction's changes\n     * and unifying the results with the underlying backend.\n     * @param {Transaction} objectStore The transaction the index should be based on.\n     * @param {IObjectStore} backend The backend underlying the transaction.\n     * @param {string|Array.<string>} keyPath The key path of the indexed attribute.\n     * @param {boolean} [multiEntry] Whether the indexed attribute is considered to be iterable or not.\n     * @param {boolean} [unique] Whether there is a unique constraint on the attribute.\n     * @protected\n     */\n    constructor(objectStore, backend, name, keyPath, multiEntry = false, unique = false) {\n        super(objectStore, keyPath, multiEntry, unique);\n        this._backend = backend;\n        this._databaseDir = name;\n    }\n\n    async checkUniqueConstraint(key, value) {\n        if (!this.unique) {\n            return;\n        }\n\n        // Calculate secondary keys.\n        let iKey = this._indexKey(key, value);\n        if (iKey !== undefined) {\n            if (!this.multiEntry || !Array.isArray(iKey)) {\n                iKey = [iKey];\n            }\n            // Check whether they already exist.\n            for (const secondaryKey of iKey) {\n                const count = await this._index.count(KeyRange.only(secondaryKey));\n                if (count > 0) {\n                    throw new Error(`Uniqueness constraint violated for key ${secondaryKey} on path ${this._keyPath}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated objects' secondary keys are in the given range.\n     * If the optional query is not given, it returns all primary keys in the index.\n     * If the query is of type KeyRange, it returns all primary keys for which the secondary key is within this range.\n     * @param {KeyRange} [query] Optional query to check the secondary keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Set.<string>>} A promise of the set of primary keys relevant to the query.\n     */\n    async keys(query = null, limit = null) {\n        const promises = [];\n        if (this._objectStore._truncated) {\n            promises.push(new Set());\n        } else {\n            promises.push(this._index.keys(query, limit));\n        }\n        promises.push(InMemoryIndex.prototype.keys.call(this, query, limit));\n        let [/** @type {Set} */ keys, /** @type {Set} */ newKeys] = await Promise.all(promises);\n        // Remove keys that have been deleted or modified.\n        keys = keys.difference(this._objectStore._removed);\n        keys = keys.difference(this._objectStore._modified.keys());\n        return keys.union(newKeys).limit(limit);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary keys fulfill the given query.\n     * If the optional query is not given, it returns all objects in the index.\n     * If the query is of type KeyRange, it returns all objects whose secondary keys are within this range.\n     * @param {KeyRange} [query] Optional query to check secondary keys against.\n     * @param {number} [limit] Limits the number of results if given.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    async values(query = null, limit = null) {\n        const keys = await this.keys(query, limit);\n        return InMemoryIndex.prototype._retrieveValues.call(this, keys);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary key is maximal for the given range.\n     * If the optional query is not given, it returns the objects whose secondary key is maximal within the index.\n     * If the query is of type KeyRange, it returns the objects whose secondary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of array of objects relevant to the query.\n     */\n    async maxValues(query=null) {\n        const keys = await this.maxKeys(query);\n        return InMemoryIndex.prototype._retrieveValues.call(this, keys);\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated secondary keys are maximal for the given range.\n     * If the optional query is not given, it returns the set of primary keys, whose associated secondary key is maximal within the index.\n     * If the query is of type KeyRange, it returns the set of primary keys, whose associated secondary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<*>>} A promise of the key relevant to the query.\n     */\n    async maxKeys(query=null) {\n        let backendKeys;\n        if (this._objectStore._truncated) {\n            backendKeys = new Set();\n        } else {\n            backendKeys = await this._index.maxKeys(query);\n        }\n\n        // Remove keys that have been deleted or modified.\n        let sampleElement = Set.sampleElement(backendKeys);\n        let value = undefined, maxIKey = undefined;\n        if (sampleElement !== undefined) {\n            value = await this._backend.get(sampleElement);\n            maxIKey = ObjectUtils.byKeyPath(value, this.keyPath);\n        }\n        backendKeys = backendKeys.difference(this._objectStore._removed);\n        backendKeys = backendKeys.difference(this._objectStore._modified.keys());\n\n        while (sampleElement !== undefined && backendKeys.size === 0) {\n            const tmpQuery = KeyRange.upperBound(maxIKey, true);\n            backendKeys = await this._index.maxKeys(tmpQuery);\n\n            // Remove keys that have been deleted or modified.\n            sampleElement = Set.sampleElement(backendKeys);\n            if (sampleElement !== undefined) {\n                value = await this._backend.get(sampleElement);\n                maxIKey = ObjectUtils.byKeyPath(value, this.keyPath);\n            }\n            backendKeys = backendKeys.difference(this._objectStore._removed);\n            backendKeys = backendKeys.difference(this._objectStore._modified.keys());\n\n            // If we get out of the range, stop here.\n            if (maxIKey && query !== null && !query.includes(maxIKey)) {\n                backendKeys = new Set();\n                break;\n            }\n        }\n\n        const newKeys = await InMemoryIndex.prototype.maxKeys.call(this, query);\n\n        if (backendKeys.size === 0) {\n            return newKeys;\n        } else if (newKeys.size === 0) {\n            return backendKeys;\n        }\n\n        // Both contain elements, check which one is larger.\n        const valueTx = await this._objectStore.get(Set.sampleElement(newKeys));\n\n        const iKeyBackend = maxIKey;\n        const iKeyTx = ObjectUtils.byKeyPath(valueTx, this.keyPath);\n\n        if (ComparisonUtils.compare(iKeyBackend, iKeyTx) > 0) {\n            return backendKeys;\n        } else if (ComparisonUtils.compare(iKeyBackend, iKeyTx) < 0) {\n            return newKeys;\n        }\n        return backendKeys.union(newKeys);\n    }\n\n    /**\n     * Returns a promise of an array of objects whose secondary key is minimal for the given range.\n     * If the optional query is not given, it returns the objects whose secondary key is minimal within the index.\n     * If the query is of type KeyRange, it returns the objects whose secondary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of array of objects relevant to the query.\n     */\n    async minValues(query=null) {\n        const keys = await this.minKeys(query);\n        return InMemoryIndex.prototype._retrieveValues.call(this, keys);\n    }\n\n    /**\n     * Returns a promise of a set of primary keys, whose associated secondary keys are minimal for the given range.\n     * If the optional query is not given, it returns the set of primary keys, whose associated secondary key is minimal within the index.\n     * If the query is of type KeyRange, it returns the set of primary keys, whose associated secondary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<*>>} A promise of the key relevant to the query.\n     */\n    async minKeys(query=null) {\n        let backendKeys;\n        if (this._objectStore._truncated) {\n            backendKeys = new Set();\n        } else {\n            backendKeys = await this._index.minKeys(query);\n        }\n\n        // Remove keys that have been deleted or modified.\n        let sampleElement = Set.sampleElement(backendKeys);\n        let value = undefined, minIKey = undefined;\n        if (sampleElement !== undefined) {\n            value = await this._backend.get(sampleElement);\n            minIKey = ObjectUtils.byKeyPath(value, this.keyPath);\n        }\n        backendKeys = backendKeys.difference(this._objectStore._removed);\n        backendKeys = backendKeys.difference(this._objectStore._modified.keys());\n\n        while (sampleElement !== undefined && backendKeys.size === 0) {\n            const tmpQuery = KeyRange.lowerBound(minIKey, true);\n            backendKeys = await this._index.minKeys(tmpQuery);\n\n            // Remove keys that have been deleted or modified.\n            sampleElement = Set.sampleElement(backendKeys);\n            if (sampleElement !== undefined) {\n                value = await this._backend.get(sampleElement);\n                minIKey = ObjectUtils.byKeyPath(value, this.keyPath);\n            }\n            backendKeys = backendKeys.difference(this._objectStore._removed);\n            backendKeys = backendKeys.difference(this._objectStore._modified.keys());\n\n            // If we get out of the range, stop here.\n            if (minIKey && query !== null && !query.includes(minIKey)) {\n                backendKeys = new Set();\n                break;\n            }\n        }\n\n        const newKeys = await InMemoryIndex.prototype.minKeys.call(this, query);\n\n        if (backendKeys.size === 0) {\n            return newKeys;\n        } else if (newKeys.size === 0) {\n            return backendKeys;\n        }\n\n        // Both contain elements, check which one is larger.\n        const valueTx = await this._objectStore.get(Set.sampleElement(newKeys));\n\n        const iKeyBackend = minIKey;\n        const iKeyTx = ObjectUtils.byKeyPath(valueTx, this.keyPath);\n\n        if (ComparisonUtils.compare(iKeyBackend, iKeyTx) < 0) {\n            return backendKeys;\n        } else if (ComparisonUtils.compare(iKeyBackend, iKeyTx) > 0) {\n            return newKeys;\n        }\n        return backendKeys.union(newKeys);\n    }\n\n    /**\n     * Returns the count of entries, whose secondary key is in the given range.\n     * If the optional query is not given, it returns the count of entries in the index.\n     * If the query is of type KeyRange, it returns the count of entries, whose secondary key is within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    async count(query=null) {\n        // Unfortunately, we cannot do better than getting keys + counting.\n        return (await this.keys(query)).size;\n    }\n}\nClass.register(TransactionIndex);\n","/**\n * Transactions are created by calling the transaction method on an ObjectStore object.\n * Transactions ensure read-isolation.\n * On a given state, only *one* transaction can be committed successfully.\n * Other transactions based on the same state will end up in a conflicted state if committed.\n * Transactions opened after the successful commit of another transaction will be based on the\n * new state and hence can be committed again.\n * Transactions do *not* check unique constraints of secondary indices before commiting them.\n * @implements {ISynchronousWritableObjectStore}\n * @implements {ICommittable}\n */\nclass Transaction {\n    /**\n     * This constructor should only be called by an ObjectStore object.\n     * Our transactions have a watchdog enabled by default,\n     * logging a warning after a certain time specified by WATCHDOG_TIMER.\n     * This helps to detect unclosed transactions preventing to store the state in\n     * the persistent backend.\n     * @param {ObjectStore} objectStore The object store this transaction belongs to.\n     * @param {IObjectStore} parent The backend on which the transaction is based,\n     * i.e., another transaction or the real database.\n     * @param {ICommittable} [managingBackend] The object store managing the transactions,\n     * i.e., the ObjectStore object.\n     * @param {boolean} [enableWatchdog] If this is is set to true (default),\n     * a warning will be logged if left open for longer than WATCHDOG_TIMER.\n     * @protected\n     */\n    constructor(objectStore, parent, managingBackend, enableWatchdog=true) {\n        this._id = Transaction._instanceCount++;\n        this._objectStore = objectStore;\n        this._parent = parent;\n        /** @type {ICommittable} */\n        this._managingBackend = managingBackend || parent;\n        this._modified = new Map();\n        this._removed = new Set();\n        this._truncated = false;\n        this._indices = TransactionIndex.derive(this, parent);\n\n        this._state = Transaction.STATE.OPEN;\n\n        // Keep track of nested transactions.\n        /** @type {Set.<Transaction>} */\n        this._nested = new Set();\n        this._nestedCommitted = false;\n\n        // Handle dependencies due to cross-objectstore transactions.\n        /** @type {CombinedTransaction} */\n        this._dependency = null;\n\n        this._snapshotManager = new SnapshotManager();\n\n        this._startTime = Date.now();\n        this._enableWatchdog = enableWatchdog;\n        if (this._enableWatchdog) {\n            this._watchdog = setTimeout(() => {\n                Log.w(Transaction, `Violation: tx id ${this._id} took longer than expected (still open after ${Transaction.WATCHDOG_TIMER/1000}s), ${this.toString()}.`);\n            }, Transaction.WATCHDOG_TIMER);\n        }\n    }\n\n    /** @type {ObjectStore} */\n    get objectStore() {\n        return this._objectStore;\n    }\n\n    /** @type {boolean} */\n    get nested() {\n        return this._managingBackend instanceof Transaction;\n    }\n\n    /**\n     * @type {CombinedTransaction} If existent, a combined transaction encompassing this object.\n     */\n    get dependency() {\n        return this._dependency;\n    }\n\n    /** @type {boolean} */\n    get connected() {\n        return this._managingBackend.connected;\n    }\n\n    /** @type {number} A unique transaction id. */\n    get id() {\n        return this._id;\n    }\n\n    /**\n     * A map of index names to indices.\n     * The index names can be used to access an index.\n     * @type {Map.<string,IIndex>}\n     */\n    get indices() {\n        return this._indices;\n    }\n\n    /**\n     * The transaction's current state.\n     * @returns {Transaction.STATE}\n     */\n    get state() {\n        return this._state;\n    }\n\n    /**\n     * Non-async version of _apply that does not update snapshots.\n     * Internally applies a transaction to the transaction's state.\n     * This needs to be done in batch (as a db level transaction), i.e., either the full state is updated\n     * or no changes are applied.\n     * @param {Transaction} tx The transaction to apply.\n     * @protected\n     */\n    _applySync(tx) {\n        if (tx._truncated) {\n            this.truncateSync();\n        }\n        for (const [key, value] of tx._modified) {\n            this._put(key, value);\n        }\n        for (const key of tx._removed) {\n            this._remove(key);\n        }\n    }\n\n    /**\n     * Empties the object store.\n     * @returns {Promise} The promise resolves after emptying the object store.\n     */\n    async truncate() {\n        return this.truncateSync();\n    }\n\n    /**\n     * Non-async variant to empty the object store.\n     * @protected\n     */\n    truncateSync() {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Transaction already closed');\n        }\n\n        this._truncated = true;\n        this._modified.clear();\n        this._removed.clear();\n\n        // Update indices.\n        for (const index of this._indices.values()) {\n            index.truncate();\n        }\n    }\n\n    /**\n     * Returns a promise of the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @param {string} key The primary key to look for.\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     * @returns {Promise.<*>} A promise of the object stored under the given key, or undefined if not present.\n     */\n    async get(key, options = {}) {\n        // Order is as follows:\n        // 1. check if removed,\n        // 2. check if modified,\n        // 3. check if truncated\n        // 4. request from backend\n        if (this._removed.has(key)) {\n            return undefined;\n        }\n        if (this._modified.has(key)) {\n            if (options && options.raw) {\n                return this.encode(this._modified.get(key));\n            }\n            return this._modified.get(key);\n        }\n        if (this._truncated) {\n            return undefined;\n        }\n        return this._parent.get(key, options);\n    }\n\n    /**\n     * Inserts or replaces a key-value pair.\n     * @param {string} key The primary key to associate the value with.\n     * @param {*} value The value to write.\n     * @returns {Promise} The promise resolves after writing to the current object store finished.\n     */\n    async put(key, value) {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Transaction already closed');\n        }\n\n        // Check indices.\n        const constraints = [];\n        for (const index of this._indices.values()) {\n            constraints.push(index.checkUniqueConstraint(key, value));\n        }\n        await Promise.all(constraints);\n\n        this._put(key, value);\n    }\n\n    /**\n     * Inserts or replaces a key-value pair.\n     * @param {string} key The primary key to associate the value with.\n     * @param {*} value The value to write.\n     */\n    putSync(key, value) {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Transaction already closed');\n        }\n\n        this._put(key, value);\n    }\n\n    /**\n     * Removes the key-value pair of the given key from the object store.\n     * @param {string} key The primary key to delete along with the associated object.\n     * @returns {Promise} The promise resolves after writing to the current object store finished.\n     */\n    async remove(key) {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Transaction already closed');\n        }\n\n        this._remove(key);\n    }\n\n    /**\n     * Removes the key-value pair of the given key from the object store.\n     * @param {string} key The primary key to delete along with the associated object.\n     */\n    removeSync(key) {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Transaction already closed');\n        }\n\n        this._remove(key);\n    }\n\n    /**\n     * Returns a promise of a set of keys fulfilling the given query.\n     * If the optional query is not given, it returns all keys in the object store.\n     * If the query is of type KeyRange, it returns all keys of the object store being within this range.\n     * If the query is of type Query, it returns all keys fulfilling the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Set.<string>>} A promise of the set of keys relevant to the query.\n     */\n    async keys(query=null) {\n        if (query !== null && query instanceof Query) {\n            return query.keys(this);\n        }\n        let keys = new Set();\n        if (!this._truncated) {\n            keys = await this._parent.keys(query);\n        }\n        keys = keys.difference(this._removed);\n        for (const key of this._modified.keys()) {\n            if (query === null || query.includes(key)) {\n                keys.add(key);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * Returns a promise of an array of objects whose primary keys fulfill the given query.\n     * If the optional query is not given, it returns all objects in the object store.\n     * If the query is of type KeyRange, it returns all objects whose primary keys are within this range.\n     * If the query is of type Query, it returns all objects whose primary keys fulfill the query.\n     * @param {Query|KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<Array.<*>>} A promise of the array of objects relevant to the query.\n     */\n    async values(query=null) {\n        if (query !== null && query instanceof Query) {\n            return query.values(this);\n        }\n        const keys = await this.keys(query);\n        const valuePromises = [];\n        for (const key of keys) {\n            valuePromises.push(this.get(key));\n        }\n        return Promise.all(valuePromises);\n    }\n\n    /**\n     * Iterates over the keys in a given range and direction.\n     * The callback is called for each primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(key:string):boolean} callback A predicate called for each key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    async keyStream(callback, ascending=true, query=null) {\n        // TODO Optimize this sorting step.\n        let keys = Array.from(this._modified.keys());\n        if (query instanceof KeyRange) {\n            keys = keys.filter(key => query.includes(key));\n        }\n        keys = keys.sort();\n\n        let txIt = keys.iterator(ascending);\n        if (!this._truncated) {\n            let stopped = false;\n\n            await this._parent.keyStream(key => {\n                // Iterate over TxKeys as long as they are smaller (ascending) or larger (descending).\n                while (txIt.hasNext() && ((ascending && ComparisonUtils.compare(txIt.peek(), key) < 0) || (!ascending && ComparisonUtils.compare(txIt.peek(), key) > 0))) {\n                    const currentTxKey = txIt.next();\n                    if (!callback(currentTxKey)) {\n                        // Do not continue iteration.\n                        stopped = true;\n                        return false;\n                    }\n                }\n                // Special case: what if next key is identical (-> modified)?\n                // Present modified version and continue.\n                if (txIt.hasNext() && ComparisonUtils.equals(txIt.peek(), key)) {\n                    const currentTxKey = txIt.next();\n                    if (!callback(currentTxKey)) {\n                        // Do not continue iteration.\n                        stopped = true;\n                        return false;\n                    }\n                    return true;\n                }\n                // Then give key of the backend's key stream.\n                // But only if it hasn't been removed (lazy operator prevents calling callback in this case).\n                if (!this._removed.has(key) && !callback(key)) {\n                    // Do not continue iteration.\n                    stopped = true;\n                    return false;\n                }\n                return true;\n            }, ascending, query);\n\n            // Do not continue, if already stopped.\n            if (stopped) {\n                return;\n            }\n        }\n\n        // Iterate over the remaining TxKeys.\n        while (txIt.hasNext()) {\n            if (!callback(txIt.next())) {\n                break;\n            }\n        }\n    }\n\n    /**\n     * Iterates over the keys and values in a given range and direction.\n     * The callback is called for each value and primary key fulfilling the query\n     * until it returns false and stops the iteration.\n     * @param {function(value:*, key:string):boolean} callback A predicate called for each value and key until returning false.\n     * @param {boolean} ascending Determines the direction of traversal.\n     * @param {KeyRange} query An optional KeyRange to narrow down the iteration space.\n     * @returns {Promise} The promise resolves after all elements have been streamed.\n     */\n    async valueStream(callback, ascending=true, query=null) {\n        // TODO Optimize this sorting step.\n        let keys = Array.from(this._modified.keys());\n        if (query instanceof KeyRange) {\n            keys = keys.filter(key => query.includes(key));\n        }\n        keys = keys.sort();\n\n        let txIt = keys.iterator(ascending);\n        if (!this._truncated) {\n            let stopped = false;\n\n            await this._parent.valueStream((value, key) => {\n                // Iterate over TxKeys as long as they are smaller (ascending) or larger (descending).\n                while (txIt.hasNext() && ((ascending && ComparisonUtils.compare(txIt.peek(), key) < 0) || (!ascending && ComparisonUtils.compare(txIt.peek(), key) > 0))) {\n                    const currentTxKey = txIt.next();\n                    const value = this._modified.get(currentTxKey);\n                    if (!callback(value, currentTxKey)) {\n                        // Do not continue iteration.\n                        stopped = true;\n                        return false;\n                    }\n                }\n                // Special case: what if next key is identical (-> modified)?\n                // Present modified version and continue.\n                if (txIt.hasNext() && ComparisonUtils.equals(txIt.peek(), key)) {\n                    const currentTxKey = txIt.next();\n                    const value = this._modified.get(currentTxKey);\n                    if (!callback(value, currentTxKey)) {\n                        // Do not continue iteration.\n                        stopped = true;\n                        return false;\n                    }\n                    return true;\n                }\n                // Then give key of the backend's key stream.\n                // But only if it hasn't been removed (lazy operator prevents calling callback in this case).\n                if (!this._removed.has(key) && !callback(value, key)) {\n                    // Do not continue iteration.\n                    stopped = true;\n                    return false;\n                }\n                return true;\n            }, ascending, query);\n\n            // Do not continue, if already stopped.\n            if (stopped) {\n                return;\n            }\n        }\n\n        // Iterate over the remaining TxKeys.\n        while (txIt.hasNext()) {\n            const key = txIt.next();\n            const value = await this.get(key);\n            if (!callback(value, key)) {\n                break;\n            }\n        }\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is maximal for the given range.\n     * If the optional query is not given, it returns the object whose key is maximal.\n     * If the query is of type KeyRange, it returns the object whose primary key is maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    async maxValue(query=null) {\n        const maxKey = await this.maxKey(query);\n        return this.get(maxKey);\n    }\n\n    /**\n     * Returns a promise of the key being maximal for the given range.\n     * If the optional query is not given, it returns the maximal key.\n     * If the query is of type KeyRange, it returns the key being maximal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    async maxKey(query=null) {\n        // Take underlying maxKey.\n        let maxKey = undefined;\n        if (!this._truncated) {\n            maxKey = await this._parent.maxKey(query);\n        }\n\n        // If this key has been removed, find next best key.\n        while (maxKey !== undefined && this._removed.has(maxKey)) {\n            const tmpQuery = KeyRange.upperBound(maxKey, true);\n            maxKey = await this._parent.maxKey(tmpQuery);\n\n            // If we get out of the range, stop here.\n            if (query !== null && !query.includes(maxKey)) {\n                maxKey = undefined;\n                break;\n            }\n        }\n\n        for (const key of this._modified.keys()) {\n            // Find better maxKey in modified data.\n            if ((query === null || query.includes(key)) && (maxKey === undefined || ComparisonUtils.compare(key, maxKey) > 0)) {\n                maxKey = key;\n            }\n        }\n        return maxKey;\n    }\n\n    /**\n     * Returns a promise of the object whose primary key is minimal for the given range.\n     * If the optional query is not given, it returns the object whose key is minimal.\n     * If the query is of type KeyRange, it returns the object whose primary key is minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<*>} A promise of the object relevant to the query.\n     */\n    async minValue(query=null) {\n        const minKey = await this.minKey(query);\n        return this.get(minKey);\n    }\n\n    /**\n     * Returns a promise of the key being minimal for the given range.\n     * If the optional query is not given, it returns the minimal key.\n     * If the query is of type KeyRange, it returns the key being minimal for the given range.\n     * @param {KeyRange} [query] Optional query to check keys against.\n     * @returns {Promise.<string>} A promise of the key relevant to the query.\n     */\n    async minKey(query=null) {\n        // Take underlying minKey.\n        let minKey = undefined;\n        if (!this._truncated) {\n            minKey = await this._parent.minKey(query);\n        }\n\n        // If this key has been removed, find next best key.\n        while (minKey !== undefined && this._removed.has(minKey)) {\n            const tmpQuery = KeyRange.lowerBound(minKey, true);\n            minKey = await this._parent.minKey(tmpQuery);\n\n            // If we get out of the range, stop here.\n            if (query !== null && !query.includes(minKey)) {\n                minKey = undefined;\n                break;\n            }\n        }\n\n        for (const key of this._modified.keys()) {\n            // Find better maxKey in modified data.\n            if ((query === null || query.includes(key)) && (minKey === undefined || key < minKey)) {\n                minKey = key;\n            }\n        }\n        return minKey;\n    }\n\n    /**\n     * Returns the count of entries in the given range.\n     * If the optional query is not given, it returns the count of entries in the object store.\n     * If the query is of type KeyRange, it returns the count of entries within the given range.\n     * @param {KeyRange} [query]\n     * @returns {Promise.<number>}\n     */\n    async count(query=null) {\n        // Unfortunately, we cannot do better than getting keys + counting.\n        return (await this.keys(query)).size;\n    }\n\n    /**\n     * Returns the index of the given name.\n     * If the index does not exist, it returns undefined.\n     * @param {string} indexName The name of the requested index.\n     * @returns {IIndex} The index associated with the given name.\n     */\n    index(indexName) {\n        return this._indices.get(indexName);\n    }\n\n    /**\n     * Alias for abort.\n     * @returns {Promise} The promise resolves after successful abortion of the transaction.\n     */\n    close() {\n        return this.abort();\n    }\n\n    /**\n     * Creates a nested transaction, ensuring read isolation.\n     * This makes the current transaction read-only until all sub-transactions have been closed (committed/aborted).\n     * The same semantic for commits applies: Only the first transaction that commits will be applied. Subsequent transactions will be conflicted.\n     * This behaviour has one exception: If all nested transactions are closed, the outer transaction returns to a normal state and new nested transactions can again be created and committed.\n     * @param {boolean} [enableWatchdog]\n     * @returns {Transaction} The transaction object.\n     */\n    transaction(enableWatchdog = true) {\n        if (this._state !== Transaction.STATE.OPEN && this._state !== Transaction.STATE.NESTED) {\n            throw new Error('Transaction already closed');\n        }\n        const tx = new Transaction(this._objectStore, this, this, enableWatchdog);\n        this._nested.add(tx);\n        this._state = Transaction.STATE.NESTED;\n        return tx;\n    }\n\n\n    /**\n     * Creates a nested synchronous transaction, ensuring read isolation.\n     * This makes the current transaction read-only until all sub-transactions have been closed (committed/aborted).\n     * The same semantic for commits applies: Only the first transaction that commits will be applied. Subsequent transactions will be conflicted.\n     * This behaviour has one exception: If all nested transactions are closed, the outer transaction returns to a normal state and new nested transactions can again be created and committed.\n     * @param {boolean} [enableWatchdog]\n     * @returns {SynchronousTransaction} The transaction object.\n     */\n    synchronousTransaction(enableWatchdog = true) {\n        if (this._state !== Transaction.STATE.OPEN && this._state !== Transaction.STATE.NESTED) {\n            throw new Error('Transaction already closed');\n        }\n        const tx = new SynchronousTransaction(this._objectStore, this, this, enableWatchdog);\n        this._nested.add(tx);\n        this._state = Transaction.STATE.NESTED;\n        return tx;\n    }\n\n    /**\n     * Checks whether an object store implements the ISynchronousObjectStore interface.\n     * @returns {boolean} The transaction object.\n     */\n    isSynchronous() {\n        return false;\n    }\n\n    /**\n     * Creates an in-memory snapshot of this state.\n     * This snapshot only maintains the differences between the state at the time of the snapshot\n     * and the current state.\n     * To stop maintaining the snapshot, it has to be aborted.\n     * @returns {Snapshot}\n     */\n    snapshot() {\n        if (this.state !== Transaction.STATE.COMMITTED) {\n            const snapshot = this._managingBackend.snapshot();\n            snapshot.inherit(this);\n            return snapshot;\n        }\n        return this._snapshotManager.createSnapshot(this._objectStore, this);\n    }\n\n    toString() {\n        return `Transaction{id=${this._id}, changes=±${this._modified.size+this._removed.size}, truncated=${this._truncated}, objectStore=${this._objectStore}, state=${this._state}, dependency=${this._dependency}}`;\n    }\n\n    toStringShort() {\n        return `Transaction{id=${this._id}, changes=±${this._modified.size+this._removed.size}, truncated=${this._truncated}, state=${this._state}, dependency=${this._dependency}}`;\n    }\n\n    /**\n     * Commits a transaction to the underlying backend.\n     * The state is only written to the persistent backend if no other transaction is open.\n     * If the commit was successful, new transactions will always be based on the new state.\n     * There are two outcomes for a commit:\n     * If there was no other transaction committed that was based on the same state,\n     * it will be successful and change the transaction's state to COMMITTED (returning true).\n     * Otherwise, the state will be CONFLICTED and the method will return false.\n     *\n     * Note that transactions may fail since secondary index constraints are *not* checked in transactions.\n     * @param {Transaction} [tx] The transaction to be applied, only used internally.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    async commit(tx) {\n        // Transaction is given, so check whether this is a nested one.\n        if (tx !== undefined) {\n            if (!this._isCommittable(tx)) {\n                await this.abort(tx);\n                return false;\n            }\n\n            await this._commitInternal(tx);\n            return true;\n        }\n\n        if (this._dependency !== null) {\n            return this._dependency.commit();\n        }\n\n        await this._checkConstraints();\n\n        return this._commitBackend();\n    }\n\n    /**\n     * Aborts a transaction and (if this was the last open transaction) potentially\n     * persists the most recent, committed state.\n     * @param {Transaction} [tx] The transaction to be applied, only used internally.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    async abort(tx) {\n        // Transaction is given, so check whether this is a nested one.\n        if (tx !== undefined) {\n            // Handle snapshots.\n            if (tx instanceof Snapshot) {\n                return this._snapshotManager.abortSnapshot(tx);\n            }\n\n            // Make sure transaction is based on this transaction.\n            if (!this._nested.has(tx) || tx.state !== Transaction.STATE.OPEN) {\n                throw new Error('Can only abort open, nested transactions');\n            }\n            this._nested.delete(tx);\n            // If there are no more nested transactions, change back to OPEN state.\n            if (this._nested.size === 0) {\n                this._state = Transaction.STATE.OPEN;\n                this._nestedCommitted = false;\n            }\n            return true;\n        }\n\n        if (this._dependency !== null) {\n            return this._dependency.abort();\n        }\n\n        return this._abortBackend();\n    }\n\n    /**\n     * Internally applies a transaction to the transaction's state.\n     * This needs to be done in batch (as a db level transaction), i.e., either the full state is updated\n     * or no changes are applied.\n     * @param {Transaction} tx The transaction to apply.\n     * @returns {Promise} The promise resolves after applying the transaction.\n     * @protected\n     */\n    async _apply(tx) {\n        if (!(tx instanceof Transaction)) {\n            throw new Error('Can only apply transactions');\n        }\n\n        // First handle snapshots.\n        await this._snapshotManager.applyTx(tx, this);\n\n        this._applySync(tx);\n    }\n\n    /**\n     * Commits the transaction to the backend.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @protected\n     */\n    async _commitBackend() {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Transaction already closed or in nested state');\n        }\n        if (this._enableWatchdog) {\n            clearTimeout(this._watchdog);\n        }\n\n        const commitStart = Date.now();\n        if (await this._managingBackend.commit(this)) {\n            this._state = Transaction.STATE.COMMITTED;\n            this._performanceCheck(commitStart, 'commit');\n            this._performanceCheck();\n            return true;\n        } else {\n            this._state = Transaction.STATE.CONFLICTED;\n            this._performanceCheck(commitStart, 'commit');\n            this._performanceCheck();\n            return false;\n        }\n    }\n\n    /**\n     * @param {number} [startTime]\n     * @param {string} [functionName]\n     * @private\n     */\n    _performanceCheck(startTime=this._startTime, functionName=null) {\n        const executionTime = Date.now() - startTime;\n        functionName = functionName ? ` function '${functionName}'` : '';\n        if (executionTime > Transaction.WATCHDOG_TIMER) {\n            Log.w(Transaction, `Violation: tx id ${this._id}${functionName} took ${(executionTime/1000).toFixed(2)}s (${this.toString()}).`);\n        }\n    }\n\n    /**\n     * Is used to probe whether a transaction can be committed.\n     * This, for example, includes a check whether another transaction has already been committed.\n     * @protected\n     * @param {Transaction} [tx] The transaction to be applied, if not given checks for the this transaction.\n     * @returns {boolean} Whether a commit will be successful.\n     */\n    _isCommittable(tx) {\n        if (tx !== undefined) {\n            // Make sure transaction is based on this transaction.\n            if (!this._nested.has(tx) || tx.state !== Transaction.STATE.OPEN) {\n                throw new Error('Can only commit open, nested transactions');\n            }\n            return !this._nestedCommitted;\n        }\n        return this._managingBackend._isCommittable(this);\n    }\n\n    /**\n     * Is used to commit the transaction to the in memory state.\n     * @protected\n     * @param {Transaction} tx The transaction to be applied.\n     * @returns {Promise} A promise that resolves upon successful application of the transaction.\n     */\n    async _commitInternal(tx) {\n        this._nested.delete(tx);\n        // Apply nested transaction.\n        this._nestedCommitted = true;\n        await this._apply(tx);\n        // If there are no more nested transactions, change back to OPEN state.\n        if (this._nested.size === 0) {\n            this._state = Transaction.STATE.OPEN;\n            this._nestedCommitted = false;\n        }\n    }\n\n    /**\n     * Allows to change the backend of a Transaction when the state has been flushed.\n     * @param parent\n     * @protected\n     */\n    _setParent(parent) {\n        this._parent = parent;\n    }\n\n    /**\n     * Aborts a transaction on the backend.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    async _abortBackend() {\n        if (this._state === Transaction.STATE.ABORTED || this._state === Transaction.STATE.CONFLICTED) {\n            return true;\n        }\n        if (this._state !== Transaction.STATE.OPEN && this._state !== Transaction.STATE.NESTED) {\n            throw new Error('Transaction already closed');\n        }\n        if (this._state === Transaction.STATE.NESTED) {\n            await Promise.all(Array.from(this._nested).map(tx => tx.abort()));\n        }\n        if (this._enableWatchdog) {\n            clearTimeout(this._watchdog);\n        }\n        const abortStart = Date.now();\n        await this._managingBackend.abort(this);\n        this._setAborted();\n        this._performanceCheck(abortStart, 'abort');\n        this._performanceCheck();\n        return true;\n    }\n\n    /**\n     * Sets the state to aborted.\n     */\n    _setAborted() {\n        this._state = Transaction.STATE.ABORTED;\n    }\n\n    /**\n     * Internal method for inserting/replacing a key-value pair.\n     * @param {string} key The primary key to associate the value with.\n     * @param {*} value The value to write.\n     * @protected\n     */\n    _put(key, value) {\n        this._removed.delete(key);\n        const localOldValue = this._modified.get(key);\n        this._modified.set(key, value);\n\n        // Update indices.\n        for (const index of this._indices.values()) {\n            index.put(key, value, localOldValue);\n        }\n    }\n\n    /**\n     * Internal method for removing a key-value pair.\n     * @param {string} key The primary key to delete along with the associated object.\n     * @protected\n     */\n    _remove(key) {\n        this._removed.add(key);\n        const localOldValue = this._modified.get(key);\n        this._modified.delete(key);\n\n        // Update indices.\n        for (const index of this._indices.values()) {\n            index.remove(key, localOldValue);\n        }\n    }\n\n    /**\n     * Is used to check constraints before committing.\n     * If a constraint is not satisfied, the commitable is aborted and an exception is thrown.\n     * @returns {Promise.<boolean>}\n     * @throws\n     * @protected\n     */\n    async _checkConstraints() {\n        // Check unique indices.\n        // TODO: Improve performance (|modified| count queries).\n        const constraintChecks = [];\n        for (const /** @type {TransactionIndex} */ index of this._indices.values()) {\n            if (!index.unique) continue;\n            for (const [key, value] of this._modified) {\n                constraintChecks.push(index.checkUniqueConstraint(key, value));\n            }\n        }\n        if (constraintChecks.length > 0) {\n            try {\n                await Promise.all(constraintChecks);\n            } catch (e) {\n                await this.abort();\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Method called to decode a single value.\n     * @param {*} value Value to be decoded.\n     * @param {string} key Key corresponding to the value.\n     * @returns {*} The decoded value.\n     */\n    decode(value, key) {\n        return this._objectStore.decode(value, key);\n    }\n\n    /**\n     * Method called to encode a single value.\n     * @param {*} value Value to be encoded.\n     * @returns {*} The encoded value.\n     */\n    encode(value) {\n        return this._objectStore.encode(value);\n    }\n}\n/** @type {number} Milliseconds to wait until automatically aborting transaction. */\nTransaction.WATCHDOG_TIMER = 5000 /*ms*/;\n/**\n * The states of a transaction.\n * New transactions are in the state OPEN until they are aborted, committed or a nested transaction is created.\n * Aborted transactions move to the state ABORTED.\n * Committed transactions move to the state COMMITTED,\n * if no other transaction has been applied to the same state.\n * Otherwise, they change their state to CONFLICTED.\n * When creating a nested (not read-isolated) transaction on top of a transaction,\n * the outer transaction moves to the state NESTED until the inner transaction is either aborted or committed.\n * Again, only one inner transaction may be committed.\n * @enum {number}\n */\nTransaction.STATE = {\n    OPEN: 0,\n    COMMITTED: 1,\n    ABORTED: 2,\n    CONFLICTED: 3,\n    NESTED: 4\n};\nTransaction._instanceCount = 0;\nClass.register(Transaction);\n","/**\n * Synchronous transactions avoid unnecessary async/await calls by preloading and caching\n * all necessary key-value-pairs.\n *\n * WARNING: If not all required key-value-pairs are preloaded, the results of any call on a synchronous transaction\n * might be wrong. Only use synchronous transactions, if unavoidable.\n * @implements {ISynchronousObjectStore}\n * @implements {ICommittable}\n * @extends {Transaction}\n */\nclass SynchronousTransaction extends Transaction {\n    /**\n     * This constructor should only be called by an ObjectStore object.\n     * Our transactions have a watchdog enabled by default,\n     * logging a warning after a certain time specified by WATCHDOG_TIMER.\n     * This helps to detect unclosed transactions preventing to store the state in\n     * the persistent backend.\n     * @param {ObjectStore} objectStore The object store this transaction belongs to.\n     * @param {IObjectStore} parent The backend on which the transaction is based,\n     * i.e., another transaction or the real database.\n     * @param {ICommittable} [managingBackend] The object store managing the transactions,\n     * i.e., the ObjectStore object.\n     * @param {boolean} [enableWatchdog] If this is is set to true (default),\n     * a warning will be logged if left open for longer than WATCHDOG_TIMER.\n     * @protected\n     */\n    constructor(objectStore, parent, managingBackend, enableWatchdog=true) {\n        super(objectStore, parent, managingBackend, enableWatchdog);\n        /** @type {Map.<string,*>} */\n        this._cache = new Map();\n    }\n\n    /**\n     * This method preloads a set of keys and caches them.\n     * It can be called as often as needed.\n     * @param {Array.<string>} keys The keys to preload.\n     * @return {Promise}\n     */\n    preload(keys) {\n        keys = keys.filter(key => !this.isCached(key));\n        return Promise.all(keys.map(key => this.get(key)));\n    }\n\n    /**\n     * A check whether a certain key is cached.\n     * @param {string} key The key to check.\n     * @return {boolean} A boolean indicating whether the key is already in the cache.\n     */\n    isCached(key) {\n        // This also prevents double caching.\n        return this._cache.has(key) || (this._parent.isSynchronous() ? this._parent.isCached(key) : false);\n    }\n\n    /**\n     * @param {string} key\n     * @param {RetrievalConfig} [options] Advanced retrieval options.\n     */\n    async get(key, options = {}) {\n        options.expectPresence = false;\n        // Use cache or ask parent.\n        let value;\n        if (this.isCached(key)) {\n            value = this.getSync(key, options);\n        } else {\n            value = await Transaction.prototype.get.call(this, key, options);\n            if (options && options.raw) {\n                this._cache.set(key, this.decode(value, key));\n            } else {\n                this._cache.set(key, value);\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Internal method to query cache.\n     * @param {string} key\n     * @param {SyncRetrievalConfig} [options] Advanced retrieval options.\n     * @return {*} The cached value.\n     * @private\n     */\n    _getCached(key, options = {}) {\n        const { expectPresence = true } = options || {};\n        let value = this._cache.get(key);\n\n        // Use cache only if the parent is not synchronous.\n        if (!value && this._parent.isSynchronous()) {\n            return this._parent.getSync(key, options);\n        }\n\n        if (expectPresence && !value) {\n            throw new Error(`Missing key in cache: ${key}`);\n        }\n\n        // Raw requests\n        if (options && options.raw) {\n            value = this.encode(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Returns the object stored under the given primary key.\n     * Resolves to undefined if the key is not present in the object store.\n     * @param {string} key The primary key to look for.\n     * @param {SyncRetrievalConfig} [options] Advanced retrieval options.\n     * @returns {*} The object stored under the given key, or undefined if not present.\n     */\n    getSync(key, options = {}) {\n        // Order is as follows:\n        // 1. check if removed,\n        // 2. check if modified,\n        // 3. check if truncated\n        // 4. request from backend\n        if (this._removed.has(key)) {\n            return undefined;\n        }\n        if (this._modified.has(key)) {\n            if (options && options.raw) {\n                return this.encode(this._modified.get(key));\n            }\n            return this._modified.get(key);\n        }\n        if (this._truncated) {\n            return undefined;\n        }\n        return this._getCached(key, options);\n    }\n\n    /**\n     * Checks whether an object store implements the ISynchronousObjectStore interface.\n     * @override\n     * @returns {boolean} The transaction object.\n     */\n    isSynchronous() {\n        return true;\n    }\n}\nClass.register(SynchronousTransaction);\n","/**\n * Snapshots present a read-only version of a specific state.\n * As long as a snapshot is not aborted, the object store will reflect changes to the state\n * in form of the differences to the originating state in the snapshot.\n * This makes efficient queries against a fixed state possible without blocking other transactions\n * to commit.\n * @extends {Transaction}\n */\nclass Snapshot extends Transaction {\n    /**\n     * This constructor should only be called by an ObjectStore object.\n     * @param {ObjectStore} objectStore The object store this transaction belongs to.\n     * @param {IObjectStore} backend The backend this transaction is based on.\n     * @protected\n     */\n    constructor(objectStore, backend) {\n        super(objectStore, backend, objectStore, false);\n    }\n\n    /**\n     * A specific set of changes can be assumed to be already applied by providing a Transaction or Snapshot.\n     * These differences will be inherited while the backend of the snapshot remains the current state.\n     * This is useful, if we have a transaction/snapshot to a previous state, which we do not want to commit.\n     * Then, we can still base our snapshot on this earlier state although the current backend is already ahead.\n     * @param {Transaction} tx A transaction or snapshot containing changes that have already been applied.\n     * @protected\n     */\n    inherit(tx) {\n        if (!(tx instanceof Transaction)) {\n            throw new Error('Can only inherit transactions');\n        }\n\n        return super._applySync(tx);\n    }\n\n    /**\n     * Internally applies a transaction to the snapshot state.\n     * In contrast to transactions, this tries to reflect the old state in the snapshot.\n     * @param {Transaction} tx The transaction to apply.\n     * @returns {Promise} The promise resolves after applying the transaction.\n     * @protected\n     */\n    async _apply(tx) {\n        if (!(tx instanceof Transaction)) {\n            throw new Error('Can only apply transactions');\n        }\n        if (tx._truncated) {\n            // Need to copy complete old state.\n            await this.valueStream((value, key) => {\n                if (!this._modified.has(key)) {\n                    this._put(key, value);\n                }\n                return true;\n            });\n        }\n        for (const [key, value] of tx._modified) {\n            // Continue if we already have the old value for this key.\n            if (this._modified.has(key)) {\n                continue;\n            }\n            let oldValue = await this.get(key);\n            // If this key is newly introduced,\n            // we have to mark it as removed to maintain our state.\n            if (!oldValue) {\n                this._remove(key, value);\n            } else {\n                // Otherwise store oldValue.\n                this._put(key, oldValue, value);\n            }\n        }\n        for (const key of tx._removed) {\n            // Continue if we already have the old value for this key.\n            if (this._modified.has(key)) {\n                continue;\n            }\n            // Removed values have to be remembered.\n            let oldValue = await this.get(key);\n            this._put(key, oldValue);\n        }\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @returns {Promise}\n     * @override\n     */\n    async truncate() {\n        throw new Error('Unsupported operation on snapshots: truncate');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     */\n    truncateSync() {\n        throw new Error('Unsupported operation on snapshots: truncateSync');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     * @throws\n     */\n    async commit(tx) {\n        throw new Error('Cannot commit snapshots: commit');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     * @protected\n     * @param {Transaction} [tx] The transaction to be applied, if not given checks for the this transaction.\n     * @returns {boolean} Whether a commit will be successful.\n     */\n    _isCommittable(tx) {\n        return false;\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     * @protected\n     * @param {Transaction} tx The transaction to be applied.\n     * @returns {Promise} A promise that resolves upon successful application of the transaction.\n     */\n    async _commitInternal(tx) {\n        throw new Error('Cannot commit snapshots');\n    }\n\n    /**\n     * Commits the transaction to the backend.\n     * @override\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @protected\n     */\n    async _commitBackend() {\n        throw new Error('Cannot commit snapshots');\n    }\n\n    /**\n     * Aborts a snapshot and stops updating its diff.\n     * @override\n     * @param [tx]\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    abort(tx) {\n        return this._abortBackend();\n    }\n\n    /**\n     * Aborts a transaction on the backend.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @override\n     */\n    async _abortBackend() {\n        if (this._state !== Transaction.STATE.OPEN) {\n            throw new Error('Snapshot already closed');\n        }\n        const result = await this._managingBackend.abort(this);\n        if (!result) {\n            return false;\n        }\n\n        this._state = Transaction.STATE.ABORTED;\n\n        // Cleanup.\n        this._truncated = true;\n        this._modified.clear();\n        this._removed.clear();\n\n        // Update indices.\n        for (const index of this._indices.values()) {\n            index.truncate();\n        }\n\n        return true;\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     * @returns {Promise}\n     */\n    async put(key, value) {\n        throw new Error('Unsupported operation on snapshots: put');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     */\n    putSync(key, value) {\n        throw new Error('Unsupported operation on snapshots: putSync');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     * @returns {Promise}\n     */\n    async remove(key) {\n        throw new Error('Unsupported operation on snapshots: remove');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     */\n    removeSync(key) {\n        throw new Error('Unsupported operation on snapshots: removeSync');\n    }\n\n    /**\n     * Alias for abort.\n     * @returns {Promise} The promise resolves after successful abortion of the transaction.\n     */\n    close() {\n        return this.abort();\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     */\n    transaction() {\n        throw new Error('Unsupported operation on snapshots: transaction');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     */\n    synchronousTransaction() {\n        throw new Error('Unsupported operation on snapshots: synchronousTransaction');\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @override\n     */\n    snapshot() {\n        throw new Error('Unsupported operation on snapshots: snapshot');\n    }\n}\nClass.register(Snapshot);\n","/**\n * Defines the functionality needed for handling snapshots.\n * @abstract\n */\nclass SnapshotManager {\n    constructor() {\n        this._snapshots = new Set();\n    }\n\n    /**\n     * Creates an in-memory snapshot of the current state.\n     * This snapshot only maintains the differences between the state at the time of the snapshot\n     * and the current state.\n     * To stop maintaining the snapshot, it has to be aborted.\n     * @param {ObjectStore} objectStore\n     * @param {IObjectStore} backend\n     * @returns {Snapshot}\n     */\n    createSnapshot(objectStore, backend) {\n        const snapshot = new Snapshot(objectStore, backend);\n        this._snapshots.add(snapshot);\n        return snapshot;\n    }\n\n\n    /**\n     * Aborts a snapshot.\n     * @param {Snapshot} snapshot\n     * @returns {boolean} A promise of the success outcome.\n     */\n    abortSnapshot(snapshot) {\n        return this._snapshots.delete(snapshot);\n    }\n\n    /**\n     * Updates the snapshots managed by this class.\n     * @param {Transaction} tx The transaction to apply.\n     * @param {IObjectStore} backend\n     * @returns {Promise} The promise resolves after applying the transaction.\n     */\n    async applyTx(tx, backend) {\n        if (!(tx instanceof Transaction)) {\n            throw new Error('Can only apply transactions');\n        }\n\n        // First handle snapshots:\n        // - Apply tx to own snapshots.\n        // - Take over new snapshots.\n        const applications = [];\n        for (const snapshot of this._snapshots) {\n            applications.push(snapshot._apply(tx));\n        }\n        for (const snapshot of tx._snapshotManager) {\n            snapshot._backend = backend;\n            this._snapshots.add(snapshot);\n        }\n        return Promise.all(applications);\n    }\n\n    /**\n     * Returns an iterator over the snapshots.\n     * @returns {Iterator.<Snapshot>}\n     */\n    [Symbol.iterator]() {\n        return this._snapshots.values();\n    }\n}\nClass.register(SnapshotManager);\n","/**\n * This class represents a combined transaction across object stores.\n * @implements {ICommittable}\n */\nclass CombinedTransaction {\n    /**\n     * @param {...Transaction} transactions The transactions to build the combined transaction from.\n     */\n    constructor(...transactions) {\n        if (!this.isConsistent(transactions)) {\n            throw new Error('Given set of transactions violates rules for combined transactions');\n        }\n        this._transactions = transactions;\n        /** @type {Map.<Transaction,function()>} */\n        this._flushable = new Map();\n        /** @type {Map.<Transaction,function()>} */\n        this._preprocessing = [];\n\n        // Update members.\n        this._dependency = this;\n    }\n\n    /** @type {JungleDB} */\n    get backend() {\n        return this._jdb;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n     * Verifies the two most important consistency rules for combined transactions:\n     * 1. only transactions from different object stores\n     * 2. only open transactions\n     * 3. only transactions from the same JungleDB instance\n     * 4. only non-nested transactions\n     * @param {Array.<Transaction>} transactions\n     * @returns {boolean} Whether the given set of transactions is suitable for a combined transaction.\n     */\n    isConsistent(transactions) {\n        const objectStores = new Set();\n        this._jdb = null;\n        for (const tx of transactions) {\n            // Rule 2 is violated:\n            if (tx.state !== Transaction.STATE.OPEN) {\n                return false;\n            }\n            // Rule 4 is violated:\n            if (tx.nested) {\n                return false;\n            }\n            // Rule 1 is violated:\n            if (objectStores.has(tx._objectStore)) {\n                return false;\n            }\n            // Rule 3 is violated:\n            if (this._jdb === null) {\n                this._jdb = tx._objectStore.jungleDB;\n            } else if (this._jdb !== tx._objectStore.jungleDB && tx._objectStore.jungleDB !== null) { // null = InMemory\n                return false;\n            }\n            objectStores.add(tx._objectStore);\n        }\n        return true;\n    }\n\n    /**\n     * To be called when a transaction is flushable to the persistent state.\n     * Triggers combined flush as soon as all transactions are ready.\n     * @param {Transaction} tx Transaction to be reported flushable.\n     * @param {function()} [callback] A callback to be called after the transaction is flushed.\n     * @param {function():Promise} [preprocessing] A callback to be called right before the transaction is flushed.\n     * @returns {Promise.<boolean>} Whether the flushing has been triggered.\n     */\n    async onFlushable(tx, callback=null, preprocessing=null) {\n        // Save as flushable and prepare and flush only if all are flushable.\n        // Afterwards call the callbacks to cleanup the ObjectStores' transaction stacks.\n        this._flushable.set(tx, callback);\n        if (preprocessing !== null) {\n            this._preprocessing.push(preprocessing);\n        }\n\n        // All are flushable, so go ahead.\n        if (this._transactions.every(tx => this._flushable.has(tx))) {\n            // Allow to prepare final flush.\n            const preprocessings = [];\n            for (const f of this._preprocessing) {\n                preprocessings.push(f());\n            }\n            await Promise.all(preprocessings);\n\n            await JungleDB.commitCombined(this);\n            for (const value of this._flushable.values()) {\n                value();\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Is used to commit the state of an open transaction.\n     * A user only needs to call this method on Transactions without arguments.\n     * The optional tx argument is only used internally, in order to commit a transaction to the underlying store.\n     * If the commit was successful, the method returns true, and false otherwise.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     */\n    async commit() {\n        if (this._isCommittable()) {\n            await this._checkConstraints();\n\n            await this._commitBackend();\n            return true;\n        }\n        await this.abort();\n        return false;\n    }\n\n    /**\n     * Is used to abort an open transaction.\n     * A user only needs to call this method on Transactions without arguments.\n     * The optional tx argument is only used internally, in order to abort a transaction on the underlying store.\n     * @returns {Promise} The promise resolves after successful abortion of the transaction.\n     */\n    abort() {\n        return this._abortBackend();\n    }\n\n    /**\n     * Aborts a transaction on the backend.\n     * @returns {Promise.<boolean>} A promise of the success outcome.\n     * @override\n     */\n    async _abortBackend() {\n        return (await Promise.all(this._transactions.map(tx => tx._abortBackend()))).every(r => r);\n    }\n\n    /**\n     * Creates a new transaction, ensuring read isolation\n     * on the most recently successfully committed state.\n     * @param {boolean} [enableWatchdog]\n     * @returns {Transaction} The transaction object.\n     */\n    transaction(enableWatchdog) {\n        throw new Error('Unsupported operation');\n    }\n\n    /**\n     * Creates an in-memory snapshot of the current state.\n     * This snapshot only maintains the differences between the state at the time of the snapshot\n     * and the current state.\n     * To stop maintaining the snapshot, it has to be aborted.\n     * @returns {Snapshot}\n     */\n    snapshot() {\n        throw new Error('Unsupported operation');\n    }\n\n    /**\n     * Is used to probe whether a transaction can be committed.\n     * This, for example, includes a check whether another transaction has already been committed.\n     * @protected\n     * @returns {boolean} Whether a commit will be successful.\n     */\n    _isCommittable() {\n        return this._transactions.every(tx => tx._isCommittable());\n    }\n\n    /**\n     * Is used to check constraints before committing.\n     * If a constraint is not satisfied, the commitable is aborted and an exception is thrown.\n     * @returns {Promise.<boolean>}\n     * @throws\n     * @protected\n     */\n    async _checkConstraints() {\n        try {\n            await Promise.all(this._transactions.map(tx => tx._checkConstraints()));\n        } catch (e) {\n            await this.abort();\n            throw e;\n        }\n    }\n\n    /**\n     * Is used to commit the transaction.\n     * @protected\n     * @returns {Promise} A promise that resolves upon successful application of the transaction.\n     */\n    async _commitBackend() {\n        return (await Promise.all(this._transactions.map(tx => tx._commitBackend()))).every(r => r);\n    }\n\n    /**\n     * Unsupported operation for snapshots.\n     * @protected\n     * @param {Transaction} tx The transaction to be applied.\n     * @returns {Promise} A promise that resolves upon successful application of the transaction.\n     */\n    async _commitInternal(tx) {\n        throw new Error('Cannot commit transactions to a combined transaction');\n    }\n\n    /**\n     * Allows to change the backend of a Transaction when the state has been flushed.\n     * @param parent\n     * @protected\n     */\n    _setParent(parent) {\n        throw new Error('Unsupported operation');\n    }\n\n    /**\n     * Sets a new CombinedTransaction as dependency.\n     * @param {CombinedTransaction} dependency\n     * @protected\n     */\n    set _dependency(dependency) {\n        for (const tx of this._transactions) {\n            tx._dependency = dependency;\n        }\n    }\n\n    /**\n     * @type {CombinedTransaction} If existent, a combined transaction encompassing this object.\n     */\n    get dependency() {\n        return this;\n    }\n\n    /**\n     * Returns the object store this transaction belongs to.\n     * @type {ObjectStore}\n     */\n    get objectStore() {\n        throw new Error('Unsupported operation');\n    }\n\n    toString() {\n        return `CombinedTransaction{size=${this._transactions.length}, states=[${this._transactions.map(tx => tx.state)}]}`;\n    }\n}\nClass.register(CombinedTransaction);\n","    exports._loaded = true;\n    if (typeof exports._onload === 'function') exports._onload();\n    return exports;\n})(JDB);\n","class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","class Observable {\n    /**\n     * @returns {string}\n     * @constant\n     */\n    static get WILDCARD() {\n        return '*';\n    }\n\n    constructor() {\n        /** @type {Map.<string, Array.<Function>>} */\n        this._listeners = new Map();\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) {\n        if (!this._listeners.has(type)) {\n            this._listeners.set(type, [callback]);\n            return 0;\n        } else {\n            return this._listeners.get(type).push(callback) - 1;\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) {\n        if (!this._listeners.has(type) || !this._listeners.get(type)[id]) return;\n        delete this._listeners.get(type)[id];\n    }\n\n    /**\n     * @param {string} type\n     * @param {...*} args\n     * @returns {Promise|null}\n     */\n    fire(type, ...args) {\n        const promises = [];\n        // Notify listeners for this event type.\n        if (this._listeners.has(type)) {\n            for (const i in this._listeners.get(type)) {\n                const listener = this._listeners.get(type)[i];\n                const res = listener.apply(null, args);\n                if (res instanceof Promise) promises.push(res);\n            }\n        }\n\n        // Notify wildcard listeners. Pass event type as first argument\n        if (this._listeners.has(Observable.WILDCARD)) {\n            for (const i in this._listeners.get(Observable.WILDCARD)) {\n                const listener = this._listeners.get(Observable.WILDCARD)[i];\n                const res = promises.push(listener.apply(null, arguments));\n                if (res instanceof Promise) promises.push(res);\n            }\n        }\n\n        if (promises.length > 0) return Promise.all(promises);\n        return null;\n    }\n\n    /**\n     * @param {Observable} observable\n     * @param {...string} types\n     */\n    bubble(observable, ...types) {\n        for (const type of types) {\n            let callback;\n            if (type == Observable.WILDCARD) {\n                callback = function() {\n                    this.fire.apply(this, arguments);\n                };\n            } else {\n                callback = function() {\n                    this.fire.apply(this, [type, ...arguments]);\n                };\n            }\n            observable.on(type, callback.bind(this));\n        }\n    }\n}\nClass.register(Observable);\n","/**\n * @abstract\n */\nclass DataChannel extends Observable {\n    constructor() {\n        super();\n\n        // Buffer for chunked messages.\n        // XXX We currently only support one chunked message at a time.\n        /** @type {SerialBuffer} */\n        this._buffer = null;\n\n        /** @type {Message.Type} */\n        this._msgType = 0;\n\n        /** @type {number} */\n        this._receivingTag = -1;\n\n        /** @type {number} */\n        this._sendingTag = 0;\n\n        /** @type {Map.<Message.Type, ExpectedMessage>} */\n        this._expectedMessagesByType = new Map();\n\n        /** @type {Timers} */\n        this._timers = new Timers();\n\n        /** @type {number} */\n        this._lastChunkReceivedAt = 0;\n    }\n\n    /**\n     * @param {Message.Type} type\n     * @returns {boolean}\n     */\n    isExpectingMessage(type) {\n        return this._expectedMessagesByType.has(type);\n    }\n\n    /**\n     * @param {Message.Type} type\n     * @param {boolean} success\n     */\n    confirmExpectedMessage(type, success) {\n        const expectedMsg = this._expectedMessagesByType.get(type);\n        if (!expectedMsg) return;\n\n        this._timers.clearTimeout(`chunk-${expectedMsg.id}`);\n        this._timers.clearTimeout(`msg-${expectedMsg.id}`);\n        for (const type of expectedMsg.types) {\n            this._expectedMessagesByType.delete(type);\n        }\n\n        if (!success) {\n            expectedMsg.timeoutCallback();\n        }\n    }\n\n    /**\n     * @param {Message.Type|Array.<Message.Type>} types\n     * @param {function()} timeoutCallback\n     * @param {number} [msgTimeout]\n     * @param {number} [chunkTimeout]\n     */\n    expectMessage(types, timeoutCallback, msgTimeout = DataChannel.MESSAGE_TIMEOUT, chunkTimeout = DataChannel.CHUNK_TIMEOUT) {\n        if (!Array.isArray(types)) {\n            types = [types];\n        }\n\n        if (types.length === 0) return;\n\n        const expectedMsg = new ExpectedMessage(types, timeoutCallback, msgTimeout, chunkTimeout);\n        for (const type of types) {\n            this._expectedMessagesByType.set(type, expectedMsg);\n        }\n\n        // Set timers for any of the expected types.\n        this._timers.resetTimeout(`chunk-${expectedMsg.id}`, this._onTimeout.bind(this, expectedMsg), chunkTimeout);\n        this._timers.resetTimeout(`msg-${expectedMsg.id}`, this._onTimeout.bind(this, expectedMsg), msgTimeout);\n    }\n\n    /**\n     * @abstract\n     */\n\n    /* istanbul ignore next */\n    close() { throw new Error('Not implemented'); }\n\n    /**\n     * @protected\n     */\n    _onClose() {\n        this._timers.clearAll();\n        this.fire('close', this);\n    }\n\n    /**\n     * @param {string} msg\n     * @private\n     */\n    _error(msg) {\n        this.fire('error', msg, this);\n        Log.e(DataChannel, msg);\n        this.close();\n    }\n\n    /**\n     * @param {ArrayBuffer} msg\n     * @protected\n     */\n    _onMessage(msg) {\n        try {\n            // Drop message if the channel is not open.\n            if (this.readyState !== DataChannel.ReadyState.OPEN) {\n                return;\n            }\n\n            // Drop empty messages.\n            const buffer = new SerialBuffer(msg);\n            if (buffer.byteLength === 0) {\n                return;\n            }\n\n            // Chunk is too large.\n            if (buffer.byteLength > DataChannel.CHUNK_SIZE_MAX) {\n                this._error('Received chunk larger than maximum chunk size, discarding');\n                return;\n            }\n\n            const tag = buffer.readUint8();\n\n            // Buffer length without tag.\n            const effectiveChunkLength = buffer.byteLength - buffer.readPos;\n            const chunk = buffer.read(effectiveChunkLength);\n\n            // Detect if this is a new message.\n            if (this._buffer === null && tag === (this._receivingTag + 1) % NumberUtils.UINT8_MAX) {\n                const chunkBuffer = new SerialBuffer(chunk);\n                const messageSize = Message.peekLength(chunkBuffer);\n\n                if (messageSize > DataChannel.MESSAGE_SIZE_MAX) {\n                    this._error(`Received message with excessive message size ${messageSize} > ${DataChannel.MESSAGE_SIZE_MAX}`);\n                    return;\n                }\n\n                this._buffer = new SerialBuffer(messageSize);\n                this._receivingTag = tag;\n                this._msgType = Message.peekType(chunkBuffer);\n            }\n\n            if (this._buffer === null) {\n                Log.e(DataChannel, `Message does not start with next tag ${this._receivingTag + 1} (got ${tag} instead), but buffer is null`);\n                return;\n            }\n\n            // Currently, we only support one message at a time.\n            if (tag !== this._receivingTag) {\n                this._error(`Received message with wrong message tag ${tag}, expected ${this._receivingTag}`);\n                return;\n            }\n\n            let remainingBytes = this._buffer.byteLength - this._buffer.writePos;\n\n            // Mismatch between buffer sizes.\n            if (effectiveChunkLength > remainingBytes) {\n                this._error('Received chunk larger than remaining bytes to read, discarding');\n                return;\n            }\n\n            // Write chunk and subtract remaining byte length.\n            this._buffer.write(chunk);\n            remainingBytes -= effectiveChunkLength;\n\n            // Update last chunk timestamp.\n            this._lastChunkReceivedAt = Date.now();\n\n            const expectedMsg = this._expectedMessagesByType.get(this._msgType);\n            if (remainingBytes === 0) {\n                const msg = this._buffer.buffer;\n                this._buffer = null;\n                this.fire('message', msg, this);\n            } else {\n                // Set timeout.\n                if (expectedMsg) {\n                    this._timers.resetTimeout(`chunk-${expectedMsg.id}`, this._onTimeout.bind(this, expectedMsg), expectedMsg.chunkTimeout);\n                }\n                this.fire('chunk', this._buffer);\n            }\n        } catch (e) {\n            this._error(`Error occurred while parsing incoming message, ${e.message}`);\n        }\n    }\n\n    /**\n     * @param {ExpectedMessage} [expectedMsg]\n     * @private\n     */\n    _onTimeout(expectedMsg) {\n        if (expectedMsg) {\n            this._timers.clearTimeout(`chunk-${expectedMsg.id}`);\n            this._timers.clearTimeout(`msg-${expectedMsg.id}`);\n\n            for (const type of expectedMsg.types) {\n                this._expectedMessagesByType.delete(type);\n            }\n\n            expectedMsg.timeoutCallback();\n        }\n\n        Log.e(DataChannel, 'Timeout while receiving chunked message');\n        this._buffer = null;\n    }\n\n    /**\n     * @param {Uint8Array} msg\n     */\n    send(msg) {\n        Assert.that(msg.byteLength <= DataChannel.MESSAGE_SIZE_MAX, 'DataChannel.send() max message size exceeded');\n\n        const tag = this._sendingTag;\n        this._sendingTag = (this._sendingTag + 1) % NumberUtils.UINT8_MAX;\n        this._sendChunked(msg, tag);\n    }\n\n    /**\n     * @param {Uint8Array} msg\n     * @param {number} tag\n     * @private\n     */\n    _sendChunked(msg, tag) {\n        // Send chunks.\n        let remaining = msg.byteLength;\n        let chunk = null;\n        while (remaining > 0) {\n            let buffer = null;\n            if (remaining + /*tag*/ 1 >= DataChannel.CHUNK_SIZE_MAX) {\n                buffer = new SerialBuffer(DataChannel.CHUNK_SIZE_MAX);\n                buffer.writeUint8(tag);\n                chunk = new Uint8Array(msg.buffer, msg.byteLength - remaining, DataChannel.CHUNK_SIZE_MAX - /*tag*/ 1);\n            } else {\n                buffer = new SerialBuffer(remaining + /*tag*/ 1);\n                buffer.writeUint8(tag);\n                chunk = new Uint8Array(msg.buffer, msg.byteLength - remaining, remaining);\n            }\n\n            buffer.write(chunk);\n            this.sendChunk(buffer);\n            remaining -= chunk.byteLength;\n        }\n    }\n\n    /**\n     * @abstract\n     * @param {Uint8Array} msg\n     */\n    /* istanbul ignore next */\n    sendChunk(msg) { throw  new Error('Not implemented'); }\n\n    /**\n     * @abstract\n     * @type {DataChannel.ReadyState}\n     */\n    /* istanbul ignore next */\n    get readyState() { throw new Error('Not implemented'); }\n\n    /** @type {number} */\n    get lastMessageReceivedAt() {\n        return this._lastChunkReceivedAt;\n    }\n}\n\nDataChannel.CHUNK_SIZE_MAX = 1024 * 16; // 16 kb\nDataChannel.MESSAGE_SIZE_MAX = 10 * 1024 * 1024; // 10 mb\nDataChannel.CHUNK_TIMEOUT = 1000 * 5; // 5 seconds\nDataChannel.MESSAGE_TIMEOUT = (DataChannel.MESSAGE_SIZE_MAX / DataChannel.CHUNK_SIZE_MAX) * DataChannel.CHUNK_TIMEOUT;\n\nclass ExpectedMessage {\n    /**\n     * @param {Array.<Message.Type>} types\n     * @param {function()} timeoutCallback\n     * @param {number} msgTimeout\n     * @param {number} chunkTimeout\n     */\n    constructor(types, timeoutCallback, msgTimeout = DataChannel.MESSAGE_TIMEOUT, chunkTimeout = DataChannel.CHUNK_TIMEOUT) {\n        this.id = types.join(':');\n        this.types = types;\n        this.timeoutCallback = timeoutCallback;\n        this.msgTimeout = msgTimeout;\n        this.chunkTimeout = chunkTimeout;\n    }\n}\n\n/**\n * @enum {number}\n */\nDataChannel.ReadyState = {\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSING: 2,\n    CLOSED: 3\n};\n\n/**\n * @param {string} str\n * @return {DataChannel.ReadyState}\n */\nDataChannel.ReadyState.fromString = function (str) {\n    switch (str) {\n        case 'connecting':\n            return DataChannel.ReadyState.CONNECTING;\n        case 'open':\n            return DataChannel.ReadyState.OPEN;\n        case 'closing':\n            return DataChannel.ReadyState.CLOSING;\n        case 'closed':\n            return DataChannel.ReadyState.CLOSED;\n        default:\n            throw new Error('Invalid string');\n    }\n};\n\nClass.register(DataChannel);\n","class CryptoLib {\n    /**\n     * @return {SubtleCrypto|*}\n     */\n    static get instance() {\n        if (!CryptoLib._instance) {\n            const instance = {};\n            instance.getRandomValues = (window.crypto || window.msCrypto).getRandomValues.bind(window.crypto);\n\n            CryptoLib._instance = instance;\n        }\n        return CryptoLib._instance;\n    }\n}\nCryptoLib._instance = null;\nClass.register(CryptoLib);\n","class WebRtcFactory {\n    /**\n     * @param {?RTCConfiguration} configuration\n     * @returns {RTCPeerConnection}\n     */\n    static newPeerConnection(configuration) {\n        return new RTCPeerConnection(configuration);\n    }\n\n    /**\n     * @param {*} rtcSessionDescriptionInit\n     * @returns {RTCSessionDescription}\n     */\n    static newSessionDescription(rtcSessionDescriptionInit) {\n        return new RTCSessionDescription(rtcSessionDescriptionInit);\n    }\n\n    /**\n     * @param {*} rtcIceCandidateInit\n     * @returns {RTCIceCandidate}\n     */\n    static newIceCandidate(rtcIceCandidateInit) {\n        return new RTCIceCandidate(rtcIceCandidateInit);\n    }\n}\nClass.register(WebRtcFactory);\n","class WebSocketFactory {\n    /**\n     * @static\n     * @return {Observable}\n     */\n    static newWebSocketServer() {\n        return new Observable();\n    }\n\n    /**\n     * @static\n     * @param {string} url\n     * @return {WebSocket}\n     */\n    static newWebSocket(url) {\n        return new WebSocket(url);\n    }\n}\nClass.register(WebSocketFactory);\n","class DnsUtils {\n    /**\n     * @static\n     * @param {string} host\n     * @return {Promise.<NetAddress>}\n     */\n    static lookup(host) {\n        return Promise.resolve(NetAddress.UNSPECIFIED);\n    }\n}\nClass.register(DnsUtils);\n","class ConstantHelper {\n    constructor() {\n        this._originalValues = new Map();\n    }\n\n    static get instance() {\n        if (!ConstantHelper._instance) {\n            ConstantHelper._instance = new ConstantHelper();\n        }\n        return ConstantHelper._instance;\n    }\n\n    /**\n     * @param {string} constant\n     * @return {boolean}\n     */\n    isConstant(constant) {\n        if (constant.indexOf('.') < 1) return false;\n        const clazz = constant.split('.', 2)[0];\n        constant = constant.split('.', 2)[1];\n        if (constant.startsWith('_')) return false;\n        if (constant.toUpperCase() !== constant) return false;\n        if (!(clazz in Class.scope)) return false;\n        if (!Class.scope[clazz]) return false;\n        if (!Class.scope[clazz].hasOwnProperty) return false;\n        if (!Class.scope[clazz].hasOwnProperty(constant)) return false;\n        if (!Object.keys(Class.scope[clazz]).includes(constant)) return false;\n        if (typeof Class.scope[clazz][constant] !== 'number') return false;\n        return true;\n    }\n\n    /**\n     * @param {string} constant\n     */\n    _ensureIsConstant(constant) {\n        if (!this.isConstant(constant)) {\n            throw new Error(`${constant} is not a numerical constant.`);\n        }\n    }\n\n    /**\n     * @param {string} constant\n     * @returns {number}\n     */\n    get(constant) {\n        this._ensureIsConstant(constant);\n        const clazz = constant.split('.', 2)[0];\n        constant = constant.split('.', 2)[1];\n        return Class.scope[clazz][constant];\n    }\n\n    /**\n     * @param {string} constant\n     * @param {number} value\n     */\n    set(constant, value) {\n        this._ensureIsConstant(constant);\n        if (!this._originalValues.has(constant)) {\n            this._originalValues.set(constant, this.get(constant));\n        }\n        const clazz = constant.split('.', 2)[0];\n        constant = constant.split('.', 2)[1];\n        Class.scope[clazz][constant] = value;\n    }\n\n    /**\n     * @param {string} constant\n     */\n    reset(constant) {\n        this._ensureIsConstant(constant);\n        if (this._originalValues.has(constant)) {\n            this.set(constant, this._originalValues.get(constant));\n        }\n    }\n}\n\nClass.register(ConstantHelper);\n","class Services {\n    /**\n     * @constructor\n     * @param {number} [provided=Services.NONE] Bitmap of services that can be provided by this node\n     * @param {number} [accepted=Services.NONE] Bitmap of services that can be accepted by this node\n     */\n    constructor(provided = Services.NONE, accepted = Services.NONE) {\n        this._provided = provided;\n        this._accepted = accepted;\n    }\n\n    /**\n     * @type {number}\n     */\n    get provided() {\n        return this._provided;\n    }\n\n    /**\n     * @type {number}\n     */\n    get accepted() {\n        return this._accepted;\n    }\n\n    /**\n     * @param {number} services Bitmap of services that can be provided\n     */\n    set provided(services) {\n        this._provided = services;\n    }\n\n    /**\n     * @param {number} services Bitmap of services that can be accepted\n     */\n    set accepted(services) {\n        this._accepted = services;\n    }\n\n    /**\n     * @param {number} services Bitmap of the services to check\n     * @returns {boolean}\n     */\n    static isFullNode(services) {\n        return (services & Services.FULL) !== 0;\n    }\n\n    /**\n     * @param {number} services Bitmap of the services to check\n     * @returns {boolean}\n     */\n    static isLightNode(services) {\n        return (services & Services.LIGHT) !== 0;\n    }\n\n    /**\n     * @param {number} services Bitmap of the services to check\n     * @returns {boolean}\n     */\n    static isNanoNode(services) {\n        return services === Services.NANO;\n    }\n}\nServices.NONE   = 0;\nServices.NANO   = 1;\nServices.LIGHT  = 2;\nServices.FULL   = 4;\nClass.register(Services);\n","class Timers {\n    constructor() {\n        this._timeouts = {};\n        this._intervals = {};\n    }\n\n    setTimeout(key, fn, waitTime) {\n        if (this._timeouts[key]) throw 'Duplicate timeout for key ' + key;\n        this._timeouts[key] = setTimeout(fn, waitTime);\n    }\n\n    clearTimeout(key) {\n        clearTimeout(this._timeouts[key]);\n        delete this._timeouts[key];\n    }\n\n    resetTimeout(key, fn, waitTime) {\n        clearTimeout(this._timeouts[key]);\n        this._timeouts[key] = setTimeout(fn, waitTime);\n    }\n\n    timeoutExists(key) {\n        return this._timeouts[key] !== undefined;\n    }\n\n    setInterval(key, fn, intervalTime) {\n        if (this._intervals[key]) throw 'Duplicate interval for key ' + key;\n        this._intervals[key] = setInterval(fn, intervalTime);\n    }\n\n    clearInterval(key) {\n        clearInterval(this._intervals[key]);\n        delete this._intervals[key];\n    }\n\n    resetInterval(key, fn, intervalTime) {\n        clearInterval(this._intervals[key]);\n        this._intervals[key] = setInterval(fn, intervalTime);\n    }\n\n    intervalExists(key) {\n        return this._intervals[key] !== undefined;\n    }\n\n    clearAll() {\n        for (const key in this._timeouts) {\n            this.clearTimeout(key);\n        }\n        for (const key in this._intervals) {\n            this.clearInterval(key);\n        }\n    }\n}\nClass.register(Timers);\n","class Version {\n    static isCompatible(code) {\n        // Allow future, backwards-compatible versions.\n        return code >= Version.CODE;\n    }\n}\nVersion.CODE = 1;\nClass.register(Version);\n","/**\n * This class stores and provides the network time (current system\n * time with an offset calculated from our peer's time)\n */\nclass Time {\n    /**\n     * @constructor\n     * @param {number} [offset=0]\n     */\n    constructor(offset = 0) {\n        this._offset = offset;\n    }\n\n    /**\n     * @param {number} offset\n     */\n    set offset(offset) {\n        this._offset = offset;\n    }\n\n    /**\n     * Returns the current time adjusted with the network's offset\n     * @return {number}\n     */\n    now() {\n        return Date.now() + this._offset;\n    }\n}\nClass.register(Time);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @return {Generator}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","/**\n * @template K,V\n */\nclass HashMap {\n    /**\n     * @param {function(o: object): string} [fnHash]\n     */\n    constructor(fnHash = HashMap._hash) {\n        /** @type {Map.<string,V>} */\n        this._map = new Map();\n        /** @type {function(o: object): string} */\n        this._fnHash = fnHash;\n    }\n\n    /**\n     * @param {{hashCode: function():string}|*} o\n     * @returns {string}\n     * @private\n     */\n    static _hash(o) {\n        if (o === null || o === undefined) return o;\n        return o.hashCode ? o.hashCode() : o.toString();\n    }\n\n    /**\n     * @param {K|*} key\n     * @returns {V|*}\n     */\n    get(key) {\n        return this._map.get(this._fnHash(key));\n    }\n\n    /**\n     * @param {K|*} key\n     * @param {V|*} value\n     */\n    put(key, value) {\n        this._map.set(this._fnHash(key), value);\n    }\n\n    /**\n     * @param {K|*} key\n     */\n    remove(key) {\n        this._map.delete(this._fnHash(key));\n    }\n\n    clear() {\n        this._map.clear();\n    }\n\n    /**\n     * @param {K|*} key\n     * @returns {boolean}\n     */\n    contains(key) {\n        return this._map.has(this._fnHash(key));\n    }\n\n    /**\n     * @returns {Array.<K|*>}\n     */\n    keys() {\n        return Array.from(this._map.keys());\n    }\n\n    /**\n     * @returns {Iterator.<K|*>}\n     */\n    keyIterator() {\n        return this._map.keys();\n    }\n\n    /**\n     * @returns {Array.<V|*>}\n     */\n    values() {\n        return Array.from(this._map.values());\n    }\n\n    /**\n     * @returns {Iterator.<V|*>}\n     */\n    valueIterator() {\n        return this._map.values();\n    }\n\n    /**\n     * @returns {number}\n     */\n    get length() {\n        return this._map.size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this._map.size === 0;\n    }\n}\nClass.register(HashMap);\n","/**\n * @template V\n * @implements {Iterable.<V>}\n */\nclass HashSet {\n    constructor(fnHash = HashSet._hash) {\n        /** @type {Map.<string,V>} */\n        this._map = new Map();\n        /** @type {function(o: object): string} */\n        this._fnHash = fnHash;\n    }\n\n    /**\n     * @param {{hashCode: function():string}|*} o\n     * @returns {string}\n     * @private\n     */\n    static _hash(o) {\n        if (o === null || o === undefined) return o;\n        return o.hashCode ? o.hashCode() : o.toString();\n    }\n\n    /**\n     * @param {V|*} value\n     */\n    add(value) {\n        this._map.set(this._fnHash(value), value);\n    }\n\n    /**\n     * @param {Iterable.<V|*>} collection\n     */\n    addAll(collection) {\n        for (const value of collection) {\n            this.add(value);\n        }\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {V|*}\n     */\n    get(value) {\n        return this._map.get(this._fnHash(value));\n    }\n\n    /**\n     * @param {V|*} value\n     */\n    remove(value) {\n        this._map.delete(this._fnHash(value));\n    }\n\n    /**\n     * @param {Array.<V|*>} collection\n     */\n    removeAll(collection) {\n        for (const value of collection) {\n            this.remove(value);\n        }\n    }\n\n    clear() {\n        this._map.clear();\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {boolean}\n     */\n    contains(value) {\n        return this._map.has(this._fnHash(value));\n    }\n\n    /**\n     * @returns {Array.<V|*>}\n     */\n    values() {\n        return Array.from(this._map.values());\n    }\n\n    /**\n     * @returns {Iterator.<V|*>}\n     */\n    valueIterator() {\n        return this._map.values();\n    }\n\n    /**\n     * @returns {Iterator.<V|*>}\n     */\n    [Symbol.iterator]() {\n        return this.valueIterator();\n    }\n\n    /**\n     * @returns {number}\n     */\n    get length() {\n        return this._map.size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this._map.size === 0;\n    }\n}\nClass.register(HashSet);\n","/**\n * @template T\n * @implements {Iterable.<T>}\n */\nclass LimitIterable {\n    /**\n     * @param {Iterable.<T>|Iterator.<T>} it\n     * @param {number} limit\n     */\n    constructor(it, limit) {\n        /** @type {Iterator.<T>} */\n        this._iterator = it[Symbol.iterator] ? it[Symbol.iterator]() : it;\n        /** @type {number} */\n        this._limit = limit;\n    }\n\n    /**\n     * @returns {{next: function():object}}\n     */\n    [Symbol.iterator]() {\n        return LimitIterable.iterator(this._iterator, this._limit);\n    }\n\n    /**\n     * @template V\n     * @param {Iterator.<V>} iterator\n     * @param {number} limit\n     * @returns {{next: function():object}}\n     */\n    static iterator(iterator, limit) {\n        let count = 0;\n        return {\n            next: () => {\n                const done = count++ >= limit;\n                const next = iterator.next();\n                return {\n                    value: done ? undefined : next.value,\n                    done: done || next.done\n                };\n            }\n        };\n    }\n}\nClass.register(LimitIterable);\n","/**\n * @template V\n */\nclass Queue {\n    /**\n     * @param {function(o: object): string} [fnHash]\n     */\n    constructor(fnHash) {\n        /**\n         * @type {Array.<V|*>}\n         * @protected\n         */\n        this._queue = [];\n\n        /**\n         * @type {function(o: object): string}\n         * @protected\n         */\n        this._fnHash = fnHash || Queue._hash;\n    }\n\n    /**\n     * @param {{hashCode: function():string}|*} o\n     * @returns {string}\n     * @protected\n     */\n    static _hash(o) {\n        if (o === null || o === undefined) return o;\n        return o.hashCode ? o.hashCode() : o.toString();\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     */\n    enqueue(value) {\n        this._queue.push(value);\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     */\n    enqueueFirst(value) {\n        this._queue.unshift(value);\n    }\n\n    /**\n     * @returns {V|*}\n     */\n    dequeue() {\n        return this._queue.shift();\n    }\n\n    /**\n     * @returns {V|*}\n     */\n    peek() {\n        return this._queue[0];\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {number}\n     */\n    indexOf(value) {\n        const hash = this._fnHash(value);\n        for (let i = 0; i < this._queue.length; ++i) {\n            if (hash === this._fnHash(this._queue[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     */\n    remove(value) {\n        const index = this.indexOf(value);\n        if (index > -1) {\n            this._queue.splice(index, 1);\n        }\n    }\n\n    /**\n     * @param {number} count\n     * @returns {Array.<V|*>}\n     */\n    dequeueMulti(count) {\n        return this._queue.splice(0, count);\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {Array.<V|*>}\n     */\n    dequeueUntil(value) {\n        const index = this.indexOf(value);\n        if (index > -1) {\n            return this._queue.splice(0, index + 1);\n        }\n        return [];\n    }\n\n    /**\n     * @returns {void}\n     */\n    clear() {\n        this._queue = [];\n    }\n\n    /**\n     * @returns {Array.<V|*>}\n     */\n    values() {\n        return this._queue;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._queue.length;\n    }\n}\nClass.register(Queue);\n","/**\n * @template V\n */\nclass UniqueQueue extends Queue {\n    /**\n     * @param {function(o: object): string} [fnHash]\n     */\n    constructor(fnHash) {\n        super(fnHash);\n        this._set = new Set();\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     * @override\n     */\n    enqueue(value) {\n        super.enqueue(value);\n        this._set.add(this._fnHash(value));\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     * @override\n     */\n    enqueueFirst(value) {\n        super.enqueueFirst(value);\n        this._set.add(this._fnHash(value));\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     * @override\n     */\n    enqueueUnique(value) {\n        const hashCode = this._fnHash(value);\n        if (this._set.has(hashCode)) return;\n\n        super.enqueue(value);\n        this._set.add(hashCode);\n    }\n\n    /**\n     * @param {Array.<V|*>} values\n     * @returns {void}\n     * @override\n     */\n    enqueueAllNew(values) {\n        for (const value of values) {\n            this.enqueueUnique(value);\n        }\n    }\n\n    /**\n     * @returns {V|*}\n     * @override\n     */\n    dequeue() {\n        const value = super.dequeue();\n        this._set.delete(this._fnHash(value));\n        return value;\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {void}\n     * @override\n     */\n    remove(value) {\n        super.remove(value);\n        this._set.delete(this._fnHash(value));\n    }\n\n    /**\n     * @param {number} count\n     * @returns {Array.<V|*>}\n     * @override\n     */\n    dequeueMulti(count) {\n        const values = super.dequeueMulti(count);\n        for (const value of values) {\n            this._set.delete(this._fnHash(value));\n        }\n        return values;\n    }\n\n    /**\n     * @param {V|*} value\n     * @returns {Array.<V|*>}\n     * @override\n     */\n    dequeueUntil(value) {\n        const values = super.dequeueUntil(value);\n        for (const val of values) {\n            this._set.delete(this._fnHash(val));\n        }\n        return values;\n    }\n}\nClass.register(UniqueQueue);\n","class ThrottledQueue extends UniqueQueue {\n    /**\n     * @param {number} [maxAtOnce]\n     * @param {number} [allowanceNum]\n     * @param {number} [allowanceInterval]\n     * @param {number} [maxSize]\n     * @param {function} [allowanceCallback]\n     */\n    constructor(maxAtOnce = Number.POSITIVE_INFINITY, allowanceNum = maxAtOnce, allowanceInterval = 1000, maxSize = Number.POSITIVE_INFINITY, allowanceCallback) {\n        super();\n        this._maxSize = maxSize;\n        this._maxAtOnce = maxAtOnce;\n        this._availableNow = this._maxAtOnce;\n\n        this._timers = new Timers();\n        this._timers.setInterval('allowance', () => {\n            this._availableNow = Math.min(this._maxAtOnce, this._availableNow + allowanceNum);\n            if (typeof allowanceCallback === 'function' && this.isAvailable()) allowanceCallback();\n        }, allowanceInterval);\n    }\n\n    stop() {\n        this._timers.clearAll();\n    }\n\n    enqueue(value) {\n        if (this.length >= this._maxSize) return;\n        super.enqueue(value);\n    }\n\n    enqueueFirst(value) {\n        super.enqueueFirst(value);\n        if (this.length > this._maxSize) this._queue.pop();\n    }\n\n    dequeue() {\n        if (this.available > 0) {\n            this._availableNow--;\n            return super.dequeue();\n        }\n        return null;\n    }\n\n    /**\n     * @param count\n     * @returns {Array}\n     */\n    dequeueMulti(count) {\n        count = Math.min(this.available, count);\n        this._availableNow -= count;\n        return super.dequeueMulti(count);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isAvailable() {\n        return this.available > 0;\n    }\n\n    get available() {\n        return Math.min(this._availableNow, this.length);\n    }\n}\n\nClass.register(ThrottledQueue);\n","class SortedList {\n    constructor(sortedList = [], compare) {\n        this._list = sortedList;\n        this._compare = compare || SortedList._compare;\n    }\n\n    static _compare(a, b) {\n        return a.compare ? a.compare(b) : (a > b ? 1 : (a < b ? -1 : 0));\n    }\n\n    indexOf(o) {\n        let a = 0, b = this._list.length - 1;\n        let currentIndex = null;\n        let currentElement = null;\n\n        while (a <= b) {\n            currentIndex = Math.round((a + b) / 2);\n            currentElement = this._list[currentIndex];\n\n            if (this._compare(currentElement, o) < 0) {\n                a = currentIndex + 1;\n            }\n            else if (this._compare(currentElement, o) > 0) {\n                b = currentIndex - 1;\n            }\n            else {\n                return currentIndex;\n            }\n        }\n\n        return -1;\n    }\n\n    _insertionIndex(o) {\n        let a = 0, b = this._list.length - 1;\n        let currentIndex = null;\n        let currentElement = null;\n\n        while (a <= b) {\n            currentIndex = Math.round((a + b) / 2);\n            currentElement = this._list[currentIndex];\n\n            if (this._compare(currentElement, o) < 0) {\n                a = currentIndex + 1;\n            }\n            else if (this._compare(currentElement, o) > 0) {\n                b = currentIndex - 1;\n            }\n            else {\n                break;\n            }\n        }\n\n        return a;\n    }\n\n    add(value) {\n        this._list.splice(this._insertionIndex(value), 0, value);\n    }\n\n    shift() {\n        return this._list.shift();\n    }\n\n    pop() {\n        return this._list.pop();\n    }\n\n    peekFirst() {\n        return this._list[0];\n    }\n\n    peekLast() {\n        return this._list[this._list.length - 1];\n    }\n\n    remove(value) {\n        const index = this.indexOf(value);\n        if (index > -1) {\n            this._list.splice(index, 1);\n        }\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    values() {\n        return this._list;\n    }\n\n    /**\n     * @returns {Iterator.<V|*>}\n     */\n    [Symbol.iterator]() {\n        return this._list[Symbol.iterator]();\n    }\n\n    copy() {\n        return new SortedList(this._list.slice(), this._compare);\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._list.length;\n    }\n}\nClass.register(SortedList);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return new Buffer(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return value;\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n","class Synchronizer extends Observable {\n    constructor() {\n        super();\n        this._queue = [];\n        this._working = false;\n    }\n\n    /**\n     * Push function to the Synchronizer for later, synchronous execution\n     * @template T\n     * @param {function():T} fn Function to be invoked later by this Synchronizer\n     * @returns {Promise.<T>}\n     */\n    push(fn) {\n        return new Promise((resolve, reject) => {\n            this._queue.push({fn: fn, resolve: resolve, reject: reject});\n            if (!this._working) {\n                this._doWork().catch(Log.w.tag(Synchronizer));\n            }\n        });\n    }\n\n    /**\n     * Reject all jobs in the queue and clear it.\n     * @returns {void}\n     */\n    clear() {\n        for (const job of this._queue) {\n            if (job.reject) job.reject();\n        }\n        this._queue = [];\n    }\n\n    async _doWork() {\n        this._working = true;\n        this.fire('work-start', this);\n\n        while (this._queue.length > 0) {\n            const job = this._queue.shift();\n            try {\n                const result = await job.fn();\n                job.resolve(result);\n            } catch (e) {\n                if (job.reject) job.reject(e);\n            }\n        }\n\n        this._working = false;\n        this.fire('work-end', this);\n    }\n\n    /** @type {boolean} */\n    get working() {\n        return this._working;\n    }\n}\nClass.register(Synchronizer);\n","class MultiSynchronizer extends Observable {\n    constructor() {\n        super();\n        /** @type {Map.<string, Synchronizer>} */\n        this._synchronizers = new Map();\n    }\n\n    /**\n     * Push function to the Synchronizer for later, synchronous execution\n     * @template T\n     * @param {string} tag\n     * @param {function():T} fn Function to be invoked later by this Synchronizer\n     * @returns {Promise.<T>}\n     */\n    push(tag, fn) {\n        let synchonizer = this._synchronizers.get(tag);\n        if (!synchonizer) {\n            synchonizer = new Synchronizer();\n            synchonizer.on('work-start', () => this.fire('work-start', synchonizer, tag, this));\n            synchonizer.on('work-end', () => this.fire('work-end', synchonizer, tag, this));\n            this._synchronizers.set(tag, synchonizer);\n        }\n        return synchonizer.push(fn);\n    }\n\n    /**\n     * Reject all jobs in the queue and clear it.\n     * @returns {void}\n     */\n    clear() {\n        for (const synchronizer of this._synchronizers.values()) {\n            synchronizer.clear();\n        }\n        this._synchronizers.clear();\n    }\n\n    /**\n     * @param {string} tag\n     * @returns {boolean}\n     */\n    isWorking(tag) {\n        const synchonizer = this._synchronizers.get(tag);\n        return !!synchonizer && synchonizer.working;\n    }\n}\nClass.register(MultiSynchronizer);\n","class PrioritySynchronizer extends Observable {\n    /**\n     * @param {number} numPriorities\n     */\n    constructor(numPriorities) {\n        super();\n        this._queues = [];\n        for (let i = 0; i < numPriorities; i++) {\n            this._queues[i] = [];\n        }\n        this._working = false;\n    }\n\n    /**\n     * Push function to the Synchronizer for later, synchronous execution\n     * @template T\n     * @param {number} priority A discrete priority, 0 being highest.\n     * @param {function():T} fn Function to be invoked later by this Synchronizer\n     * @returns {Promise.<T>}\n     */\n    push(priority, fn) {\n        Assert.that(priority >= 0 && priority < this._queues.length && Number.isInteger(priority), 'Invalid priority');\n\n        return new Promise((resolve, reject) => {\n            this._queues[priority].push({fn: fn, resolve: resolve, reject: reject});\n            if (!this._working) {\n                this._doWork().catch(Log.w.tag(PrioritySynchronizer));\n            }\n        });\n    }\n\n    /**\n     * Reject all jobs in the queue and clear it.\n     * @returns {void}\n     */\n    clear() {\n        for (const queue of this._queues) {\n            for (const job of queue) {\n                if (job.reject) job.reject();\n            }\n        }\n        this._queues = [];\n    }\n\n    async _doWork() {\n        this._working = true;\n        this.fire('work-start', this);\n\n        for (const queue of this._queues) {\n            while (queue.length > 0) {\n                const job = queue.shift();\n                try {\n                    const result = await job.fn();\n                    job.resolve(result);\n                } catch (e) {\n                    if (job.reject) job.reject(e);\n                }\n            }\n        }\n\n        this._working = false;\n        this.fire('work-end', this);\n    }\n\n    /** @type {boolean} */\n    get working() {\n        return this._working;\n    }\n}\nClass.register(PrioritySynchronizer);\n","class RateLimit {\n    /**\n     * @param {number} allowedOccurences\n     * @param {number} [timeRange=60000]\n     */\n    constructor(allowedOccurences, timeRange = 60000) {\n        /** @type {number} */\n        this._allowedEntries = allowedOccurences;\n        /** @type {number} */\n        this._timeRange = timeRange;\n\n        /** @type {number} */\n        this._lastReset = 0;\n        /** @type {number} */\n        this._counter = 0;\n    }\n\n    /**\n     * @param {number} [number=1]\n     * @returns {boolean}\n     */\n    note(number = 1) {\n        if (this._lastReset < Date.now() - this._timeRange) {\n            this._lastReset = Date.now();\n            this._counter = 0;\n        }\n        return (this._counter += number) <= this._allowedEntries;\n    }\n}\n\nClass.register(RateLimit);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => window.setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","class WasmHelper {\n\n    static async doImportBrowser() {\n        if (PlatformUtils.isNodeJs()) return;\n        if (WasmHelper._importStarted) {\n            Log.e(WasmHelper, 'doImportBrowser invoked twice');\n            return;\n        }\n        WasmHelper._importStarted = true;\n        if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n            await WasmHelper.importScriptBrowser('worker-wasm.js');\n        } else {\n            await WasmHelper.importScriptBrowser('worker-js.js');\n        }\n        WasmHelper._importFinished = true;\n    }\n\n    static doImportNodeJs() {\n        if (!PlatformUtils.isNodeJs()) return;\n        if (WasmHelper.importWasmNodeJs('worker-wasm.wasm')) {\n            WasmHelper.importScriptNodeJs('worker-wasm.js');\n        } else {\n            WasmHelper.importScriptNodeJs('worker-js.js');\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static importWasmNodeJs(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return false;\n        }\n\n        const toUint8Array = function (buf) {\n            const u = new Uint8Array(buf.length);\n            for (let i = 0; i < buf.length; ++i) {\n                u[i] = buf[i];\n            }\n            return u;\n        };\n        const fs = require('fs');\n        try {\n            const data = fs.readFileSync(wasm);\n            WasmHelper._global[module] = WasmHelper._global[module] || {};\n            WasmHelper._global[module].wasmBinary = toUint8Array(data);\n            return true;\n        } catch (e) {\n            Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}: ${e}`);\n            return false;\n        }\n    }\n\n    static importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static importScriptNodeJs(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n\n        if (typeof require === 'function') {\n            WasmHelper._global[module] = require(script)(moduleSettings);\n            if (!module) return true;\n        }\n        return false;\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class CryptoWorkerImpl extends IWorker.Stub(CryptoWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n        CryptoWorker._workerAsync = this;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    computeArgon2d(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Array.<Uint8Array>}\n     */\n    computeArgon2dBatch(inputs) {\n        const hashes = [];\n        if (PlatformUtils.isNodeJs()) {\n            for(const input of inputs) {\n                const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n                const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                hashes.push(out);\n            }\n            return hashes;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const stackTmp = Module.stackSave();\n                for (const input of inputs) {\n                    Module.stackRestore(stackTmp);\n                    const wasmIn = Module.stackAlloc(input.length);\n                    new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                    const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                    if (res !== 0) {\n                        throw res;\n                    }\n                    const hash = new Uint8Array(hashSize);\n                    hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                    hashes.push(hash);\n                }\n                return hashes;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Uint8Array}\n     */\n    kdf(key, salt, iterations) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_kdf(out, new Uint8Array(key), new Uint8Array(salt), 512, iterations);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(key.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n                const wasmSalt = Module.stackAlloc(salt.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n                const res = Module._nimiq_kdf(wasmOut, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} blockSerialized\n     * @param {Array.<boolean|undefined>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(blockSerialized, transactionValid, timeNow, genesisHash, networkId) {\n        // The worker only uses a stub genesis config.\n        GenesisConfig = {\n            GENESIS_HASH: Hash.unserialize(new SerialBuffer(genesisHash)),\n            NETWORK_ID: networkId\n        };\n\n        const block = Block.unserialize(new SerialBuffer(blockSerialized));\n        for (let i = 0; i < transactionValid.length; i++) {\n            block.body.transactions[i]._valid = transactionValid[i];\n        }\n\n        const valid = await block._verify(timeNow);\n        const pow = await block.header.pow();\n        const interlinkHash = block.interlink.hash();\n        const bodyHash = block.body.hash();\n        return { valid: valid, pow: pow.serialize(), interlinkHash: interlinkHash.serialize(), bodyHash: bodyHash.serialize() };\n    }\n}\n\nIWorker.prepareForWorkerUse(CryptoWorker, new CryptoWorkerImpl());\n","class CRC32 {\n    static _createTable () {\n        let b;\n        const table = [];\n\n        for (let j = 0; j < 256; ++j) {\n            b = j;\n            for (let k = 0; k < 8; ++k) {\n                b = b & 1 ? CRC32._POLYNOMIAL ^ (b >>> 1) : b >>> 1;\n            }\n            table[j] = b >>> 0;\n        }\n        return table;\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @returns {number}\n     */\n    static compute(buf) {\n        if (!CRC32._table) CRC32._table = CRC32._createTable();\n        if (!CRC32._hex_chars) CRC32._hex_chars = '0123456789abcdef'.split('');\n\n        const message = new Uint8Array(buf);\n        const initialValue = -1;\n\n        let crc = initialValue;\n        let hex = '';\n\n        for (let i = 0; i < message.length; ++i) {\n            crc = CRC32._table[(crc ^ message[i]) & 0xFF] ^ (crc >>> 8);\n        }\n        crc ^= initialValue;\n\n        hex += CRC32._hex_chars[(crc >> 28) & 0x0F] + CRC32._hex_chars[(crc >> 24) & 0x0F] +\n            CRC32._hex_chars[(crc >> 20) & 0x0F] + CRC32._hex_chars[(crc >> 16) & 0x0F] +\n            CRC32._hex_chars[(crc >> 12) & 0x0F] + CRC32._hex_chars[(crc >> 8) & 0x0F] +\n            CRC32._hex_chars[(crc >> 4) & 0x0F] + CRC32._hex_chars[crc & 0x0F];\n\n        return parseInt(hex, 16);\n    }\n}\nCRC32._table = null;\nCRC32._hex_chars = null;\nCRC32._POLYNOMIAL = 0xEDB88320;\nClass.register(CRC32);\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class MerkleTree {\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    static computeRoot(values, fnHash = MerkleTree._hash) {\n        return MerkleTree._computeRoot(values, fnHash);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} fnHash\n     * @returns {Hash}\n     * @private\n     */\n    static _computeRoot(values, fnHash) {\n        const len = values.length;\n        if (len === 0) {\n            return Hash.light(new Uint8Array(0));\n        }\n        if (len === 1) {\n            return fnHash(values[0]);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const leftHash = MerkleTree._computeRoot(left, fnHash);\n        const rightHash = MerkleTree._computeRoot(right, fnHash);\n        return Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n    }\n\n    /**\n     * @param {Hash|Uint8Array|{hash: function():Hash}|{serialize: function():Uint8Array}} o\n     * @returns {Hash}\n     * @private\n     */\n    static _hash(o) {\n        if (o instanceof Hash) {\n            return o;\n        }\n        if (typeof o.hash === 'function') {\n            return o.hash();\n        }\n        if (typeof o.serialize === 'function') {\n            return Hash.light(o.serialize());\n        }\n        if (o instanceof Uint8Array) {\n            return Hash.light(o);\n        }\n        throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n    }\n}\nClass.register(MerkleTree);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class MerkleProof {\n    /**\n     * @param {Array.<*>} hashes\n     * @param {Array.<MerkleProof.Operation>} operations\n     */\n    constructor(hashes, operations) {\n        if (!Array.isArray(hashes) || !NumberUtils.isUint16(hashes.length)) throw new Error('Malformed nodes');\n        if (!Array.isArray(operations) || !NumberUtils.isUint16(operations.length)) throw new Error('Malformed operations');\n        /**\n         * @type {Array.<*>}\n         * @private\n         */\n        this._nodes = hashes;\n        this._operations = operations;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Array.<*>} leafValues\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerkleProof}\n     */\n    static compute(values, leafValues, fnHash = MerkleTree._hash) {\n        const leafHashes = leafValues.map(fnHash);\n        const {containsLeaf, operations, path, inner} = MerkleProof._compute(values, leafHashes, fnHash);\n        return new MerkleProof(path, operations);\n    }\n\n    /**\n     * Assumes ordered array of values.\n     * @param {Array} values\n     * @param {Array.<*>} leafValues\n     * @param {function(a: *, b: *):number} fnCompare\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerkleProof}\n     */\n    static computeWithAbsence(values, leafValues, fnCompare, fnHash = MerkleTree._hash) {\n        const leaves = new Set();\n        leafValues = leafValues.slice();\n        leafValues.sort(fnCompare);\n        // Find missing leaves and include neighbours instead.\n        let leafIndex = 0, valueIndex = 0;\n        while (valueIndex < values.length && leafIndex < leafValues.length) {\n            const value = values[valueIndex];\n            const comparisonResult = fnCompare(value, leafValues[leafIndex]);\n            // Leave is included.\n            if (comparisonResult === 0) {\n                leaves.add(leafValues[leafIndex]);\n                ++leafIndex;\n            }\n            // Leave should already have been there, so it is missing.\n            else if (comparisonResult > 0) {\n                // Use both, prevValue and value, as a proof of absence.\n                // Special case: prevValue unknown as we're at the first value.\n                if (valueIndex > 0) {\n                    leaves.add(values[valueIndex - 1]);\n                }\n                leaves.add(value);\n                ++leafIndex;\n            }\n            // This value is not interesting for us, skip it.\n            else {\n                ++valueIndex;\n            }\n        }\n        // If we processed all values but not all leaves, these are missing. Add last value as proof.\n        if (leafIndex < leafValues.length && values.length > 0) {\n            leaves.add(values[values.length - 1]);\n        }\n\n        return MerkleProof.compute(values, Array.from(leaves), fnHash);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Array.<Hash>} leafHashes\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHashes, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, operations: [MerkleProof.Operation.CONSUME_PROOF], path: [hash], inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            const isLeaf = leafHashes.some(h => hash.equals(h));\n            return {\n                containsLeaf: isLeaf,\n                operations: [isLeaf ? MerkleProof.Operation.CONSUME_INPUT : MerkleProof.Operation.CONSUME_PROOF],\n                path: isLeaf ? [] : [hash],\n                inner: hash\n            };\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, operations: leftOps, path: leftPath, inner: leftHash} = MerkleProof._compute(left, leafHashes, fnHash);\n        const {containsLeaf: rightLeaf, operations: rightOps, path: rightPath, inner: rightHash} = MerkleProof._compute(right, leafHashes, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        // If a branch does not contain a leaf, we can directly use its hash and discard any inner operations.\n        if (!leftLeaf && !rightLeaf) {\n            return {containsLeaf: false, operations: [MerkleProof.Operation.CONSUME_PROOF], path: [hash], inner: hash};\n        }\n\n        // At least one branch contains a leaf, so execute all operations.\n        let operations = leftOps;\n        operations = operations.concat(rightOps);\n        let path = leftPath;\n        path = path.concat(rightPath);\n\n        operations.push(MerkleProof.Operation.HASH);\n\n        return {containsLeaf: true, operations: operations, path: path, inner: hash};\n    }\n\n    /**\n     * @param {Array.<*>} leafValues\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValues, fnHash = MerkleTree._hash) {\n        /** @type {Array.<Hash>} */\n        const inputs = leafValues.map(fnHash);\n        const stack = [];\n        const proofNodes = this._nodes.slice();\n        for (const op of this._operations) {\n            switch (op) {\n                case MerkleProof.Operation.CONSUME_PROOF:\n                    if (proofNodes.length === 0) {\n                        throw new Error('Invalid operation.');\n                    }\n                    stack.push(proofNodes.shift());\n                    break;\n                case MerkleProof.Operation.CONSUME_INPUT:\n                    if (inputs.length === 0) {\n                        throw new Error('Invalid operation.');\n                    }\n                    stack.push(inputs.shift());\n                    break;\n                case MerkleProof.Operation.HASH: {\n                    if (stack.length < 2) {\n                        throw new Error('Invalid operation.');\n                    }\n                    const hashStack = stack.splice(-2, 2);\n                    const concat = new SerialBuffer(hashStack.reduce((size, hash) => size + hash.serializedSize, 0));\n                    const [left, right] = hashStack;\n                    left.serialize(concat);\n                    right.serialize(concat);\n                    stack.push(Hash.light(concat));\n                    break;\n                }\n                default:\n                    throw new Error('Invalid operation.');\n            }\n        }\n\n        // Everything but the root needs to be consumed.\n        if (stack.length !== 1 || proofNodes.length !== 0 || inputs.length !== 0) {\n            throw Error('Did not consume all nodes.');\n        }\n\n        return stack[0];\n    }\n\n    /**\n     * @param {Array.<MerkleProof.Operation>} operations\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(operations) {\n        const count = operations.length;\n        const opBitsSize = Math.ceil(count / 4);\n        const opBits = new Uint8Array(opBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            const op = operations[i] & 0x3;\n            opBits[Math.floor(i / 4)] |= op << (i % 4) * 2;\n        }\n\n        return opBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerkleProof}\n     */\n    static unserialize(buf) {\n        const opCount = buf.readUint16();\n        const opBitsSize = Math.ceil(opCount / 4);\n        const opBits = buf.read(opBitsSize);\n\n        const operations = [];\n        for (let i = 0; i < opCount; i++) {\n            const op = ((opBits[Math.floor(i / 4)] >>> (i % 4) * 2) & 0x3);\n            operations.push(op);\n        }\n\n        const countNodes = buf.readUint16();\n        const hashes = [];\n        for (let i = 0; i < countNodes; i++) {\n            hashes.push(Hash.unserialize(buf));\n        }\n        return new MerkleProof(hashes, operations);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._operations.length);\n        buf.write(MerkleProof._compress(this._operations));\n        buf.writeUint16(this._nodes.length);\n        for (const hash of this._nodes) {\n            hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const opBitsSize = Math.ceil(this._operations.length / 4);\n        return /*counts*/ 4\n            + opBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerkleProof} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerkleProof\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]))\n            && this._operations.length === o._operations.length\n            && this._operations.every((op, i) => op === o._operations[i]);\n    }\n\n    /** @type {Array.<Hash>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\n/** @enum {number} */\nMerkleProof.Operation = {\n    CONSUME_PROOF: 0,\n    CONSUME_INPUT: 1,\n    HASH: 2\n};\nClass.register(MerkleProof);\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @return {boolean}\n     */\n    static isNodeJs() {\n        return !PlatformUtils.isBrowser() && typeof process === 'object' && typeof require === 'function';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        let RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return (!PlatformUtils.isBrowser() || !('onLine' in window.navigator)) || window.navigator.onLine;\n    }\n}\nClass.register(PlatformUtils);\n","class StringUtils {\n    /**\n     * @param {string} str\n     * @returns {boolean}\n     */\n    static isMultibyte(str) {\n        return /[\\uD800-\\uDFFF]/.test(str);\n    }\n\n    /**\n     * @param {string} str\n     * @returns {boolean}\n     */\n    static isHex(str) {\n        return /^[0-9A-Fa-f]*$/.test(str);\n    }\n\n    /**\n     * @param {string} str\n     * @param {number} [length]\n     * @returns {boolean}\n     */\n    static isHexBytes(str, length) {\n        if (!StringUtils.isHex(str)) return false;\n        if (str.length % 2 !== 0) return false;\n        if (typeof length === 'number' && str.length / 2 !== length) return false;\n        return true;\n    }\n\n    /**\n     * @param {string} str1\n     * @param {string} str2\n     * @returns {string}\n     */\n    static commonPrefix(str1, str2) {\n        let i = 0;\n        for (; i < str1.length; ++i) {\n            if (str1[i] !== str2[i]) break;\n        }\n        return str1.substr(0, i);\n    }\n\n}\nClass.register(StringUtils);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis\n     */\n    static coinsToSatoshis(coins) {\n        return Math.round(coins * Policy.SATOSHIS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} satoshis Number of Satoshis.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = Math.pow(2, 240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.SATOSHIS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in satoshis.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in satoshis.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in satoshis until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.1;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {Hash} o\n     * @returns {Hash}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Hash(obj);\n    }\n\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PrivateKey extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PrivateKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @return {PrivateKey}\n     */\n    static generate() {\n        const privateKey = new Uint8Array(PrivateKey.SIZE);\n        CryptoWorker.lib.getRandomValues(privateKey);\n        return new PrivateKey(privateKey);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PrivateKey}\n     */\n    static unserialize(buf) {\n        return new PrivateKey(buf.read(PrivateKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PrivateKey.SIZE;\n    }\n\n    /**\n     * Overwrite this private key with a replacement in-memory\n     * @param {PrivateKey} privateKey\n     */\n    overwrite(privateKey) {\n        this._obj.set(privateKey._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PrivateKey && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _privateKeyDelinearize(privateKey, publicKey, publicKeysHash) {\n        if (privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_derive_delinearized_private_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_derive_delinearized_private_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey, wasmInPrivateKey);\n                const delinearizedPrivateKey = new Uint8Array(PrivateKey.SIZE);\n                delinearizedPrivateKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PrivateKey.SIZE));\n                return delinearizedPrivateKey;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPrivateKey.SIZE = 32;\n\nClass.register(PrivateKey);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class KeyPair extends Serializable {\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {boolean} locked\n     * @param {Uint8Array} lockSalt\n     * @private\n     */\n    constructor(privateKey, publicKey, locked = false, lockSalt = null) {\n        if (!(privateKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        if (!(publicKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        super();\n\n        /** @type {boolean} */\n        this._locked = locked;\n        /** @type {boolean} */\n        this._lockedInternally = locked;\n        /** @type {Uint8Array} */\n        this._lockSalt = lockSalt;\n        /** @type {PublicKey} */\n        this._publicKey = publicKey;\n        /** @type {PrivateKey} */\n        this._internalPrivateKey = new PrivateKey(privateKey.serialize());\n    }\n\n    /**\n     * @return {KeyPair}\n     */\n    static generate() {\n        const privateKey = PrivateKey.generate();\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {KeyPair}\n     */\n    static derive(privateKey) {\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    /**\n     * @param {string} hexBuf\n     * @return {KeyPair}\n     */\n    static fromHex(hexBuf) {\n        return KeyPair.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    /**\n     *\n     * @param {SerialBuffer} buf\n     * @param {Uint8Array} key\n     * @return {Promise<KeyPair>}\n     */\n    static async fromEncrypted(buf, key) {\n        const type = buf.readUint8();\n        if (type !== 1) throw new Error('Unsupported type');\n        const roundsLog = buf.readUint8();\n        if (roundsLog > 32) throw new Error('Rounds out-of-bounds');\n        const rounds = Math.pow(2, roundsLog);\n        const encryptedKey = PrivateKey.unserialize(buf);\n        const salt = buf.read(KeyPair.EXPORT_SALT_LENGTH);\n        const check = buf.read(KeyPair.EXPORT_CHECKSUM_LENGTH);\n\n        const privateKey = new PrivateKey(await KeyPair._otpKdf(encryptedKey.serialize(), key, salt, rounds));\n        const keyPair = KeyPair.derive(privateKey);\n        const pubHash = keyPair.publicKey.hash();\n        if (!BufferUtils.equals(pubHash.subarray(0, 4), check)) {\n            throw new Error('Invalid key');\n        }\n        return keyPair;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {KeyPair}\n     */\n    static unserialize(buf) {\n        const privateKey = PrivateKey.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        let locked = false;\n        let lockSalt = null;\n        if (buf.readPos < buf.byteLength) {\n            const extra = buf.readUint8();\n            if (extra === 1) {\n                locked = true;\n                lockSalt = buf.read(32);\n            }\n        }\n        return new KeyPair(privateKey, publicKey, locked, lockSalt);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._privateKey.serialize(buf);\n        this.publicKey.serialize(buf);\n        if (this._locked) {\n            buf.writeUint8(1);\n            buf.write(this._lockSalt);\n        } else {\n            buf.writeUint8(0);\n        }\n        return buf;\n    }\n\n    /**\n     * The unlocked private key.\n     * @type {PrivateKey}\n     */\n    get privateKey() {\n        if (this.isLocked) throw new Error('Wallet is locked');\n        return this._privateKey;\n    }\n\n    /**\n     * The private key in its current state, i.e., depending on this._locked.\n     * If this._locked, it is the internally locked private key.\n     * If !this._locked, it is either the internally unlocked private key (if !this._lockedInternally)\n     * or this._unlockedPrivateKey.\n     * @type {PrivateKey}\n     */\n    get _privateKey() {\n        return this._unlockedPrivateKey || this._internalPrivateKey;\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey || (this._publicKey = new PublicKey(this._obj.publicKey));\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._privateKey.serializedSize + this.publicKey.serializedSize + (this._locked ? this._lockSalt.byteLength + 1 : 1);\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} [unlockKey]\n     * @return {Promise.<Uint8Array>}\n     */\n    async exportEncrypted(key, unlockKey) {\n        const wasLocked = this._locked;\n        if (this._locked) {\n            try {\n                await this.unlock(unlockKey || key);\n            } catch (e) {\n                throw new Error('KeyPair is locked and lock key mismatches');\n            }\n        }\n\n        const salt = new Uint8Array(KeyPair.EXPORT_SALT_LENGTH);\n        CryptoWorker.lib.getRandomValues(salt);\n\n        const buf = new SerialBuffer(this.encryptedSize);\n        buf.writeUint8(1); // Argon2 KDF\n        buf.writeUint8(Math.log2(KeyPair.EXPORT_KDF_ROUNDS));\n        buf.write(await KeyPair._otpKdf(this.privateKey.serialize(), key, salt, KeyPair.EXPORT_KDF_ROUNDS));\n        buf.write(salt);\n        buf.write(this.publicKey.hash().subarray(0, KeyPair.EXPORT_CHECKSUM_LENGTH));\n\n        if (wasLocked) this.relock();\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get encryptedSize() {\n        return 2 + this.privateKey.serializedSize + KeyPair.EXPORT_SALT_LENGTH + KeyPair.EXPORT_CHECKSUM_LENGTH;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} [lockSalt]\n     */\n    async lock(key, lockSalt) {\n        if (this._locked) throw new Error('KeyPair already locked');\n\n        if (lockSalt) this._lockSalt = lockSalt;\n        if (!this._lockSalt || this._lockSalt.length === 0) {\n            this._lockSalt = new Uint8Array(32);\n            CryptoWorker.lib.getRandomValues(this._lockSalt);\n        }\n\n        this._internalPrivateKey.overwrite(await this._otpPrivateKey(key));\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n        this._lockedInternally = true;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     */\n    async unlock(key) {\n        if (!this._locked) throw new Error('KeyPair not locked');\n\n        const privateKey = await this._otpPrivateKey(key);\n        const verifyPub = PublicKey.derive(privateKey);\n        if (verifyPub.equals(this.publicKey)) {\n            // Only set this._internalPrivateKey, but keep this._obj locked.\n            this._unlockedPrivateKey = privateKey;\n            this._locked = false;\n        } else {\n            throw new Error('Invalid key');\n        }\n    }\n\n    /**\n     * Destroy cached unlocked private key if the internal key is in locked state.\n     */\n    relock() {\n        if (this._locked) throw new Error('KeyPair already locked');\n        if (!this._lockedInternally) throw new Error('KeyPair was never locked');\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n    }\n\n    _clearUnlockedPrivateKey() {\n        // If this wallet is not locked internally and unlocked, this method does not have any effect.\n        if (!this._lockedInternally || this._locked) return;\n\n        // Overwrite cached key in this._unlockedPrivateKey with 0s.\n        this._unlockedPrivateKey.overwrite(PrivateKey.unserialize(new SerialBuffer(this._unlockedPrivateKey.serializedSize)));\n        // Then, reset it.\n        this._unlockedPrivateKey = null;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @return {Promise<PrivateKey>}\n     * @private\n     */\n    async _otpPrivateKey(key) {\n        return new PrivateKey(await KeyPair._otpKdf(this._privateKey.serialize(), key, this._lockSalt, KeyPair.LOCK_KDF_ROUNDS));\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise<Uint8Array>}\n     * @private\n     */\n    static async _otpKdf(message, key, salt, iterations) {\n        return BufferUtils.xor(message, await (await CryptoWorker.getInstanceAsync()).kdf(key, salt, iterations));\n    }\n\n    get isLocked() {\n        return this._locked;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof KeyPair && super.equals(o);\n    }\n}\nKeyPair.LOCK_KDF_ROUNDS = 256;\nKeyPair.EXPORT_KDF_ROUNDS = 256;\nKeyPair.EXPORT_CHECKSUM_LENGTH = 4;\nKeyPair.EXPORT_SALT_LENGTH = 16;\n\nClass.register(KeyPair);\n","class RandomSecret extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== RandomSecret.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {RandomSecret}\n     */\n    static unserialize(buf) {\n        return new RandomSecret(buf.read(RandomSecret.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return RandomSecret.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof RandomSecret && super.equals(o);\n    }\n}\n\nRandomSecret.SIZE = 32;\n\nClass.register(RandomSecret);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Commitment extends Serializable {\n    /**\n     * @param {Commitment} o\n     * @returns {Commitment}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new Commitment(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Array.<Commitment>} commitments\n     * @return {Commitment}\n     */\n    static sum(commitments) {\n        return new Commitment(Commitment._commitmentsAggregate(commitments.map(c => c._obj)));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Commitment.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Commitment}\n     */\n    static unserialize(buf) {\n        return new Commitment(buf.read(Commitment.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Commitment.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Commitment && super.equals(o);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} commitments\n     * @returns {Uint8Array}\n     */\n    static _commitmentsAggregate(commitments) {\n        if (commitments.some(commitment => commitment.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedCommitments = new Uint8Array(commitments.length * PublicKey.SIZE);\n        for (let i = 0; i < commitments.length; ++i) {\n            concatenatedCommitments.set(commitments[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_commitments(out, concatenatedCommitments, commitments.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInCommitments = Module.stackAlloc(concatenatedCommitments.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInCommitments, concatenatedCommitments.length).set(concatenatedCommitments);\n                Module._ed25519_aggregate_commitments(wasmOut, wasmInCommitments, commitments.length);\n                const aggCommitments = new Uint8Array(PublicKey.SIZE);\n                aggCommitments.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggCommitments;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nCommitment.SIZE = 32;\n\nClass.register(Commitment);\n","class CommitmentPair extends Serializable {\n    /**\n     * @param {RandomSecret} arg\n     * @param {Commitment} arg\n     * @private\n     */\n    constructor(secret, commitment) {\n        super();\n        if (!(secret instanceof RandomSecret)) throw new Error('Primitive: Invalid type');\n        if (!(commitment instanceof Commitment)) throw new Error('Primitive: Invalid type');\n        this._secret = secret;\n        this._commitment = commitment;\n    }\n\n    /**\n     * @return {CommitmentPair}\n     */\n    static generate() {\n        const randomness = new Uint8Array(CommitmentPair.RANDOMNESS_SIZE);\n        CryptoWorker.lib.getRandomValues(randomness);\n        const raw = CommitmentPair._commitmentCreate(randomness);\n        return new CommitmentPair(new RandomSecret(raw.secret), new Commitment(raw.commitment));\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {CommitmentPair}\n     */\n    static unserialize(buf) {\n        const secret = RandomSecret.unserialize(buf);\n        const commitment = Commitment.unserialize(buf);\n        return new CommitmentPair(secret, commitment);\n    }\n\n    /**\n     * @param {string} hexBuf\n     * @return {CommitmentPair}\n     */\n    static fromHex(hexBuf) {\n        return this.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this.secret.serialize(buf);\n        this.commitment.serialize(buf);\n        return buf;\n    }\n\n    /** @type {RandomSecret} */\n    get secret() {\n        return this._secret;\n    }\n\n    /** @type {Commitment} */\n    get commitment() {\n        return this._commitment;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this.secret.serializedSize + this.commitment.serializedSize;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof CommitmentPair && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} randomness\n     * @returns {{commitment:Uint8Array, secret:Uint8Array}}\n     */\n    static _commitmentCreate(randomness) {\n        if (PlatformUtils.isNodeJs()) {\n            const commitment = new Uint8Array(PublicKey.SIZE);\n            const secret = new Uint8Array(PrivateKey.SIZE);\n            NodeNative.node_ed25519_create_commitment(secret, commitment, randomness);\n            return {commitment, secret};\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutCommitment = Module.stackAlloc(PublicKey.SIZE);\n                const wasmOutSecret = Module.stackAlloc(PrivateKey.SIZE);\n                const wasmIn = Module.stackAlloc(randomness.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, randomness.length).set(randomness);\n                const res = Module._ed25519_create_commitment(wasmOutSecret, wasmOutCommitment, wasmIn);\n                if (res !== 1) {\n                    throw new Error(`Secret must not be 0 or 1: ${res}`);\n                }\n                const commitment = new Uint8Array(PublicKey.SIZE);\n                const secret = new Uint8Array(PrivateKey.SIZE);\n                commitment.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutCommitment, PublicKey.SIZE));\n                secret.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSecret, PrivateKey.SIZE));\n                return {commitment, secret};\n            } catch (e) {\n                Log.w(CommitmentPair, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nCommitmentPair.SERIALIZED_SIZE = RandomSecret.SIZE + Signature.SIZE;\nCommitmentPair.RANDOMNESS_SIZE = 32;\n\nClass.register(CommitmentPair);\n","class PartialSignature extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PartialSignature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {RandomSecret} secret\n     * @param {Commitment} aggregateCommitment\n     * @param {Uint8Array} data\n     * @return {PartialSignature}\n     */\n    static create(privateKey, publicKey, publicKeys, secret, aggregateCommitment, data) {\n        const raw = PartialSignature._delinearizedPartialSignatureCreate(publicKeys.map(o => o._obj), privateKey._obj,\n            publicKey._obj, secret._obj, aggregateCommitment._obj, data);\n        return new PartialSignature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PartialSignature}\n     */\n    static unserialize(buf) {\n        return new PartialSignature(buf.read(PartialSignature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PartialSignature.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PartialSignature && super.equals(o);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} secret\n     * @param {Uint8Array} aggregateCommitment\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _delinearizedPartialSignatureCreate(publicKeys, privateKey, publicKey, secret, aggregateCommitment, message) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || secret.byteLength !== RandomSecret.SIZE\n            || aggregateCommitment.byteLength !== Commitment.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_delinearized_partial_sign(out, new Uint8Array(message), new Uint8Array(aggregateCommitment), new Uint8Array(secret), new Uint8Array(concatenatedPublicKeys), publicKeys.length, new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInSecret = Module.stackAlloc(secret.length);\n                const wasmInCommitment = Module.stackAlloc(aggregateCommitment.length);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInSecret, secret.length).set(secret);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInCommitment, aggregateCommitment.length).set(aggregateCommitment);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInMessage, message.length).set(message);\n                Module._ed25519_delinearized_partial_sign(wasmOut, wasmInMessage, message.length, wasmInCommitment, wasmInSecret, wasmInPublicKeys, publicKeys.length, wasmInPublicKey, wasmInPrivateKey);\n                const partialSignature = new Uint8Array(PartialSignature.SIZE);\n                partialSignature.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PartialSignature.SIZE));\n                return partialSignature;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPartialSignature.SIZE = 32;\nClass.register(PartialSignature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):Promise.<boolean>, verifyIncomingTransaction: function(transaction: Transaction):Promise.<boolean>}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","class PrunedAccount {\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     */\n    constructor(address, account) {\n        if (!(address instanceof Address)) throw new Error('Malformed address');\n\n        /** @type {Address} */\n        this._address = address;\n        /** @type {Account} */\n        this._account = account;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PrunedAccount}\n     */\n    static unserialize(buf) {\n        return new PrunedAccount(Address.unserialize(buf), Account.unserialize(buf));\n    }\n\n    /**\n     * @param {PrunedAccount} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return this._address.compare(o._address);\n    }\n\n    /**\n     * @returns {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {Account}\n     */\n    get account() {\n        return this._account;\n    }\n\n    /**\n     * @param buf\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._address.serialize(buf);\n        this._account.serialize(buf);\n        return this;\n    }\n\n    get serializedSize() {\n        return this._address.serializedSize + this._account.serializedSize;\n    }\n}\n\nClass.register(PrunedAccount);\n","/**\n * This is a classic account that can send all his funds and receive any transaction.\n * All outgoing transactions are signed using the key corresponding to this address.\n */\nclass BasicAccount extends Account {\n    /**\n     * @param {BasicAccount} o\n     * @returns {BasicAccount}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new BasicAccount(o._balance);\n    }\n\n    /**\n     * @param {number} [balance]\n     */\n    constructor(balance = 0) {\n        super(Account.Type.BASIC, balance);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BasicAccount}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.BASIC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof BasicAccount\n            && this._type === o._type\n            && this._balance === o._balance;\n    }\n\n    toString() {\n        return `BasicAccount{balance=${this._balance}}`;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        return SignatureProof.verifyTransaction(transaction);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (transaction.data.byteLength > 64) return false;\n        return true;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            const isContractCreation = transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION);\n            const isTypeChange = transaction.recipientType !== this._type;\n            if (isContractCreation !== isTypeChange) {\n                throw new Error('Data Error!');\n            }\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.recipientType !== this._type && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract creation\n            return Account.TYPE_MAP.get(transaction.recipientType).create(this._balance, blockHeight, transaction);\n        }\n        return this;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this._balance === 0;\n    }\n}\n\nAccount.INITIAL = new BasicAccount(0);\nAccount.TYPE_MAP.set(Account.Type.BASIC, BasicAccount);\nClass.register(BasicAccount);\n","class Contract extends Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        super(type, balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (!transaction.recipient.equals(transaction.getContractCreationAddress())) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract already created\n            throw new Error('Data error');\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Revert contract creation\n            return new BasicAccount(this.balance);\n        }\n        return this;\n    }\n}\n\nClass.register(Contract);\n","class HashedTimeLockedContract extends Contract {\n    /**\n     * @param {number} balance\n     * @param {Address} sender\n     * @param {Address} recipient\n     * @param {Hash} hashRoot\n     * @param {number} hashCount\n     * @param {number} timeout\n     * @param {number} totalAmount\n     */\n    constructor(balance = 0, sender = Address.NULL, recipient = Address.NULL, hashRoot = Hash.NULL, hashCount = 1, timeout = 0, totalAmount = balance) {\n        super(Account.Type.HTLC, balance);\n        if (!(sender instanceof Address)) throw new Error('Malformed address');\n        if (!(recipient instanceof Address)) throw new Error('Malformed address');\n        if (!(hashRoot instanceof Hash)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint8(hashCount) || hashCount === 0) throw new Error('Malformed hashCount');\n        if (!NumberUtils.isUint32(timeout)) throw new Error('Malformed timeout');\n        if (!NumberUtils.isUint64(totalAmount)) throw new Error('Malformed totalAmount');\n\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Hash} */\n        this._hashRoot = hashRoot;\n        /** @type {number} */\n        this._hashCount = hashCount;\n        /** @type {number} */\n        this._timeout = timeout;\n        /** @type {number} */\n        this._totalAmount = totalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        const buf = new SerialBuffer(transaction.data);\n\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HashedTimeLockedContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.HTLC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n        const totalAmount = buf.readUint64();\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout, totalAmount);\n    }\n\n\n    /**\n     * Serialize this HTLC object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._sender.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._hashRoot.algorithm);\n        this._hashRoot.serialize(buf);\n        buf.writeUint8(this._hashCount);\n        buf.writeUint32(this._timeout);\n        buf.writeUint64(this._totalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._sender.serializedSize\n            + this._recipient.serializedSize\n            + /*hashAlgorithm*/ 1\n            + this._hashRoot.serializedSize\n            + /*hashCount*/ 1\n            + /*timeout*/ 4\n            + /*totalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Hash} */\n    get hashRoot() {\n        return this._hashRoot;\n    }\n\n    /** @type {number} */\n    get hashCount() {\n        return this._hashCount;\n    }\n\n    /** @type {number} */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /** @type {number} */\n    get totalAmount() {\n        return this._totalAmount;\n    }\n\n    toString() {\n        return `HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(false)}, recipient=${this._sender.toUserFriendlyAddress(false)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof HashedTimeLockedContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._sender.equals(o._sender)\n            && this._recipient.equals(o._recipient)\n            && this._hashRoot.equals(o._hashRoot)\n            && this._hashCount === o._hashCount\n            && this._timeout === o._timeout\n            && this._totalAmount === o._totalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    let preImage = Hash.unserialize(buf, hashAlgorithm);\n\n                    // Verify that the preImage hashed hashDepth times matches the _provided_ hashRoot.\n                    for (let i = 0; i < hashDepth; ++i) {\n                        preImage = Hash.compute(preImage.array, hashAlgorithm);\n                    }\n                    if (!hashRoot.equals(preImage)) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n\n            // Reject overlong proof.\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return true; // Accept\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.data);\n\n            Address.unserialize(buf); // sender address\n            Address.unserialize(buf); // recipient address\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            Hash.unserialize(buf, hashAlgorithm);\n            buf.readUint8(); // hash count\n            buf.readUint32(); // timeout\n\n            // Blacklist Argon2 hash function.\n            if (hashAlgorithm === Hash.Algorithm.ARGON2D) {\n                return false;\n            }\n\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return Contract.verifyIncomingTransaction(transaction);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new HashedTimeLockedContract(balance, this._sender, this._recipient, this._hashRoot, this._hashCount, this._timeout, this._totalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        const buf = new SerialBuffer(transaction.proof);\n        const type = buf.readUint8();\n        let minCap = 0;\n        switch (type) {\n            case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                // Check that the contract has not expired yet.\n                if (this._timeout < blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Check that the provided hashRoot is correct.\n                const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                const hashDepth = buf.readUint8();\n                const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                if (!hashRoot.equals(this._hashRoot)) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Ignore the preImage.\n                Hash.unserialize(buf, hashAlgorithm);\n\n                // Verify that the transaction is signed by the authorized recipient.\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                minCap = Math.max(0, Math.floor((1 - (hashDepth / this._hashCount)) * this._totalAmount));\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n                if (this._timeout >= blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            default:\n                throw new Error('Proof Error!');\n        }\n\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n        }\n\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n}\n\nHashedTimeLockedContract.ProofType = {\n    REGULAR_TRANSFER: 1,\n    EARLY_RESOLVE: 2,\n    TIMEOUT_RESOLVE: 3\n};\n\nAccount.TYPE_MAP.set(Account.Type.HTLC, HashedTimeLockedContract);\nClass.register(HashedTimeLockedContract);\n","class VestingContract extends Contract {\n    /**\n     * @param {number} [balance]\n     * @param {Address} [owner]\n     * @param {number} [vestingStart]\n     * @param {number} [vestingStepBlocks]\n     * @param {number} [vestingStepAmount]\n     * @param {number} [vestingTotalAmount]\n     */\n    constructor(balance = 0, owner = Address.NULL, vestingStart = 0, vestingStepBlocks = 0, vestingStepAmount = balance, vestingTotalAmount = balance) {\n        super(Account.Type.VESTING, balance);\n        if (!(owner instanceof Address)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint32(vestingStart)) throw new Error('Malformed vestingStart');\n        if (!NumberUtils.isUint32(vestingStepBlocks)) throw new Error('Malformed vestingStepBlocks');\n        if (!NumberUtils.isUint64(vestingStepAmount)) throw new Error('Malformed vestingStepAmount');\n        if (!NumberUtils.isUint64(vestingTotalAmount)) throw new Error('Malformed lowerCap');\n\n        /** @type {Address} */\n        this._owner = owner;\n        /** @type {number} */\n        this._vestingStart = vestingStart;\n        /** @type {number} */\n        this._vestingStepBlocks = vestingStepBlocks;\n        /** @type {number} */\n        this._vestingStepAmount = vestingStepAmount;\n        /** @type {number} */\n        this._vestingTotalAmount = vestingTotalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        /** @type {number} */\n        let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n        const buf = new SerialBuffer(transaction.data);\n        const owner = Address.unserialize(buf);\n        vestingTotalAmount = transaction.value;\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n                // Only block number: vest full amount at that block\n                vestingStart = 0;\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = vestingTotalAmount;\n                break;\n            case Address.SERIALIZED_SIZE + 16:\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                break;\n            case Address.SERIALIZED_SIZE + 24:\n                // Create a vesting account with some instantly vested funds or additional funds considered.\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                vestingTotalAmount = buf.readUint64();\n                break;\n            default:\n                throw new Error('Invalid transaction data');\n        }\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {VestingContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.VESTING) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const owner = Address.unserialize(buf);\n        const vestingStart = buf.readUint32();\n        const vestingStepBlocks = buf.readUint32();\n        const vestingStepAmount = buf.readUint64();\n        const vestingTotalAmount = buf.readUint64();\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * Serialize this VestingContract object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._owner.serialize(buf);\n        buf.writeUint32(this._vestingStart);\n        buf.writeUint32(this._vestingStepBlocks);\n        buf.writeUint64(this._vestingStepAmount);\n        buf.writeUint64(this._vestingTotalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._owner.serializedSize\n            + /*vestingStart*/ 4\n            + /*vestingStepBlocks*/ 4\n            + /*vestingStepAmount*/ 8\n            + /*vestingTotalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get owner() {\n        return this._owner;\n    }\n\n    /** @type {number} */\n    get vestingStart() {\n        return this._vestingStart;\n    }\n\n    /** @type {number} */\n    get vestingStepBlocks() {\n        return this._vestingStepBlocks;\n    }\n\n    /** @type {number} */\n    get vestingStepAmount() {\n        return this._vestingStepAmount;\n    }\n\n    /** @type {number} */\n    get vestingTotalAmount() {\n        return this._vestingTotalAmount;\n    }\n\n    toString() {\n        return `VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof VestingContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._owner.equals(o._owner)\n            && this._vestingStart === o._vestingStart\n            && this._vestingStepBlocks === o._vestingStepBlocks\n            && this._vestingStepAmount === o._vestingStepAmount\n            && this._vestingTotalAmount === o._vestingTotalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        const buf = new SerialBuffer(transaction.proof);\n\n        if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n            return false;\n        }\n\n        if (buf.readPos !== buf.byteLength) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n            case Address.SERIALIZED_SIZE + 16:\n            case Address.SERIALIZED_SIZE + 24:\n                return Contract.verifyIncomingTransaction(transaction);\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new VestingContract(balance, this._owner, this._vestingStart, this._vestingStepBlocks, this._vestingStepAmount, this._vestingTotalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const minCap = this.getMinCap(blockHeight);\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n\n            const buf = new SerialBuffer(transaction.proof);\n            if (!SignatureProof.unserialize(buf).isSignedBy(this._owner)) {\n                throw new Error('Proof Error!');\n            }\n        }\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    /**\n     * @param {number} blockHeight\n     * @returns {number}\n     */\n    getMinCap(blockHeight) {\n        return this._vestingStepBlocks && this._vestingStepAmount > 0\n            ? Math.max(0, this._vestingTotalAmount - Math.floor((blockHeight - this._vestingStart) / this._vestingStepBlocks) * this._vestingStepAmount)\n            : 0;\n    }\n}\n\nAccount.TYPE_MAP.set(Account.Type.VESTING, VestingContract);\nClass.register(VestingContract);\n","class AccountsTreeNode {\n    /**\n     * @param {string} prefix\n     * @param {Account} account\n     * @returns {AccountsTreeNode}\n     */\n    static terminalNode(prefix, account) {\n        return new AccountsTreeNode(AccountsTreeNode.TERMINAL, prefix, account);\n    }\n\n    /**\n     * @param {string} prefix\n     * @param {Array.<string>} childrenSuffixes\n     * @param {Array.<Hash>} childrenHashes\n     * @returns {AccountsTreeNode}\n     */\n    static branchNode(prefix, childrenSuffixes = [], childrenHashes = []) {\n        if (childrenSuffixes.length !== childrenHashes.length) {\n            throw new Error('Invalid list of children for branch node');\n        }\n        return new AccountsTreeNode(AccountsTreeNode.BRANCH, prefix, childrenSuffixes, childrenHashes);\n    }\n\n    /**\n     * @param type\n     * @param {string} prefix\n     * @param {Account|Array.<string>} arg\n     * @param {Array.<Hash>} [arg2]\n     */\n    constructor(type, prefix = '', arg, arg2 = []) {\n        this._type = type;\n        /** @type {string} */\n        this._prefix = prefix;\n        if (this.isBranch()) {\n            /** @type {Array.<string>} */\n            this._childrenSuffixes = arg;\n            /** @type {Array.<Hash>} */\n            this._childrenHashes = arg2;\n        } else if (this.isTerminal()) {\n            /** @type {Account} */\n            this._account = arg;\n        } else {\n            throw `Invalid AccountsTreeNode type: ${type}`;\n        }\n    }\n\n    /**\n     * @param type\n     * @returns {boolean}\n     */\n    static isTerminalType(type) {\n        return type === AccountsTreeNode.TERMINAL;\n    }\n\n    /**\n     * @param type\n     * @returns {boolean}\n     */\n    static isBranchType(type) {\n        return type === AccountsTreeNode.BRANCH;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {AccountsTreeNode}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        const prefix = buf.readVarLengthString();\n\n        if (AccountsTreeNode.isTerminalType(type)) {\n            // Terminal node\n            const account = Account.unserialize(buf);\n            return AccountsTreeNode.terminalNode(prefix, account);\n        } else if (AccountsTreeNode.isBranchType(type)) {\n            // Branch node\n            const childrenSuffixes = [], childrenHashes = [];\n            const childCount = buf.readUint8();\n            for (let i = 0; i < childCount; ++i) {\n                const childSuffix = buf.readVarLengthString();\n                const childHash = Hash.unserialize(buf);\n                const childIndex = parseInt(childSuffix[0], 16);\n                childrenSuffixes[childIndex] = childSuffix;\n                childrenHashes[childIndex] = childHash;\n            }\n            return AccountsTreeNode.branchNode(prefix, childrenSuffixes, childrenHashes);\n        } else {\n            throw `Invalid AccountsTreeNode type: ${type}`;\n        }\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeVarLengthString(this._prefix);\n        if (this.isTerminal()) {\n            // Terminal node\n            this._account.serialize(buf);\n        } else {\n            // Branch node\n            const childCount = this._childrenSuffixes.reduce((count, child) => count + !!child, 0);\n            buf.writeUint8(childCount);\n            for (let i = 0; i < this._childrenSuffixes.length; ++i) {\n                if (this._childrenHashes[i]) {\n                    buf.writeVarLengthString(this._childrenSuffixes[i]);\n                    this._childrenHashes[i].serialize(buf);\n                }\n            }\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let payloadSize;\n        if (this.isTerminal()) {\n            payloadSize = this._account.serializedSize;\n        } else {\n            // The children array contains undefined values for non existing children.\n            // Only count existing ones.\n            const childrenSize = this._childrenHashes.reduce((sum, child, i) => {\n                return sum + (child ? child.serializedSize + SerialBuffer.varLengthStringSize(this._childrenSuffixes[i]) : 0);\n            }, 0);\n            payloadSize = /*childCount*/ 1 + childrenSize;\n        }\n\n        return /*type*/ 1\n            + SerialBuffer.varLengthStringSize(this._prefix)\n            + payloadSize;\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {?Hash}\n     */\n    getChildHash(prefix) {\n        return this._childrenHashes && this._childrenHashes[this._getChildIndex(prefix)];\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {?string}\n     */\n    getChild(prefix) {\n        const suffix = this._childrenSuffixes && this._childrenSuffixes[this._getChildIndex(prefix)];\n        if (suffix) {\n            return this.prefix + suffix;\n        }\n        return suffix;\n    }\n\n    /**\n     * @param {string} prefix\n     * @param {Hash} childHash\n     * @returns {AccountsTreeNode}\n     */\n    withChild(prefix, childHash) {\n        const childrenSuffixes = this._childrenSuffixes.slice() || [];\n        const childrenHashes = this._childrenHashes.slice() || [];\n        childrenSuffixes[this._getChildIndex(prefix)] = prefix.substr(this.prefix.length);\n        childrenHashes[this._getChildIndex(prefix)] = childHash;\n        return AccountsTreeNode.branchNode(this._prefix, childrenSuffixes, childrenHashes);\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {AccountsTreeNode}\n     */\n    withoutChild(prefix) {\n        const childrenSuffixes = this._childrenSuffixes.slice() || [];\n        const childrenHashes = this._childrenHashes.slice() || [];\n        delete childrenSuffixes[this._getChildIndex(prefix)];\n        delete childrenHashes[this._getChildIndex(prefix)];\n        return AccountsTreeNode.branchNode(this._prefix, childrenSuffixes, childrenHashes);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    hasChildren() {\n        return this._childrenSuffixes && this._childrenSuffixes.some(child => !!child);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    hasSingleChild() {\n        return this._childrenSuffixes && this._childrenSuffixes.reduce((count, child) => count + !!child, 0) === 1;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    getFirstChild() {\n        if (!this._childrenSuffixes) {\n            return undefined;\n        }\n        const suffix = this._childrenSuffixes.find(child => !!child);\n        return suffix ? this.prefix + suffix : undefined;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    getLastChild() {\n        if (!this._childrenSuffixes) {\n            return undefined;\n        }\n        for (let i = this._childrenSuffixes.length - 1; i >= 0; --i) {\n            if (this._childrenSuffixes[i]) {\n                return this.prefix + this._childrenSuffixes[i];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * @returns {?Array.<string>}\n     */\n    getChildren() {\n        if (!this._childrenSuffixes) {\n            return undefined;\n        }\n        return this._childrenSuffixes.filter(child => !!child).map(child => this.prefix + child);\n    }\n\n    /** @type {Account} */\n    get account() {\n        return this._account;\n    }\n\n    /** @type {string} */\n    get prefix() {\n        return this._prefix;\n    }\n\n    /** @type {string} */\n    set prefix(value) {\n        this._prefix = value;\n        this._hash = undefined;\n    }\n\n    /**\n     * @param {Account} account\n     * @returns {AccountsTreeNode}\n     */\n    withAccount(account) {\n        return AccountsTreeNode.terminalNode(this._prefix, account);\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = Hash.light(this.serialize());\n        }\n        return this._hash;\n    }\n\n    /**\n     * Tests if this node is a child of some other node.\n     * @param {AccountsTreeNode} parent\n     * @returns {boolean}\n     */\n    isChildOf(parent) {\n        return parent.getChildren() && parent.getChildren().includes(this._prefix);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTerminal() {\n        return AccountsTreeNode.isTerminalType(this._type);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isBranch() {\n        return AccountsTreeNode.isBranchType(this._type);\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {number}\n     * @private\n     */\n    _getChildIndex(prefix) {\n        Assert.that(prefix.substr(0, this.prefix.length) === this.prefix, `Prefix ${prefix} is not a child of the current node ${this.prefix}`);\n        return parseInt(prefix[this.prefix.length], 16);\n    }\n\n    /**\n     * @param {AccountsTreeNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        if (!(o instanceof AccountsTreeNode)) return false;\n        if (!Object.is(this.prefix, o.prefix)) return false;\n        if (this.isTerminal()) {\n            return o.isTerminal() && o._account.equals(this._account);\n        } else {\n            if (!o.isBranch()) return false;\n            if (this._childrenSuffixes.length !== o._childrenSuffixes.length) return false;\n            if (o._childrenSuffixes.length !== o._childrenHashes.length) return false;\n            for (let i = 0; i < this._childrenSuffixes.length; ++i) {\n                // hashes of child nodes\n                const ourChild = this._childrenHashes[i];\n                const otherChild = o._childrenHashes[i];\n                if (ourChild) {\n                    if (!otherChild || !ourChild.equals(otherChild)) return false;\n                } else {\n                    if (otherChild) return false;\n                }\n                if (this._childrenSuffixes[i] !== o._childrenSuffixes[i]) return false;\n            }\n        }\n        return true;\n    }\n}\nAccountsTreeNode.BRANCH = 0x00;\nAccountsTreeNode.TERMINAL = 0xff;\nClass.register(AccountsTreeNode);\n","class AccountsTreeStore {\n    /**\n     * @param {JungleDB} jdb\n     */\n    static initPersistent(jdb) {\n        jdb.createObjectStore('Accounts', { codec: new AccountsTreeStoreCodec() });\n    }\n\n    /**\n     * @param {JungleDB} jdb\n     * @returns {AccountsTreeStore}\n     */\n    static getPersistent(jdb) {\n        return new AccountsTreeStore(jdb.getObjectStore('Accounts'));\n    }\n\n    /**\n     * @returns {AccountsTreeStore}\n     */\n    static createVolatile() {\n        const store = JDB.JungleDB.createVolatileObjectStore();\n        return new AccountsTreeStore(store);\n    }\n\n    /**\n     * @param {IObjectStore} store\n     */\n    constructor(store) {\n        this._store = store;\n    }\n\n    /**\n     * @override\n     * @param {string} key\n     * @returns {Promise.<AccountsTreeNode>}\n     */\n    get(key) {\n        return this._store.get(key);\n    }\n\n    /**\n     * @override\n     * @param {AccountsTreeNode} node\n     * @returns {Promise.<string>}\n     */\n    async put(node) {\n        const key = node.prefix;\n        await this._store.put(key, node);\n        return key;\n    }\n\n    /**\n     * @override\n     * @param {AccountsTreeNode} node\n     * @returns {Promise.<string>}\n     */\n    async remove(node) {\n        const key = node.prefix;\n        await this._store.remove(key);\n        return key;\n    }\n\n    /**\n     * @returns {Promise.<AccountsTreeNode>}\n     */\n    getRootNode() {\n        return this.get('');\n    }\n\n    /**\n     * @param startPrefix This prefix will *not* be included.\n     * @param size\n     * @returns {Promise.<Array.<AccountsTreeNode>>}\n     */\n    async getTerminalNodes(startPrefix, size) {\n        const relevantKeys = [];\n        await this._store.keyStream(key => {\n            if (key.length === Address.HEX_SIZE) {\n                relevantKeys.push(key);\n                if (relevantKeys.length === size) {\n                    return false;\n                }\n            }\n            return true;\n        }, true, JDB.KeyRange.lowerBound(startPrefix, true));\n        const nodes = [];\n        for (const key of relevantKeys) {\n            nodes.push(this._store.get(key));\n        }\n        return Promise.all(nodes);\n    }\n\n    /**\n     * @param {AccountsTreeStore} [tx]\n     * @returns {AccountsTreeStore}\n     */\n    snapshot(tx) {\n        const snapshot = this._store.snapshot();\n        if (tx) {\n            snapshot.inherit(tx._store);\n        }\n        return new AccountsTreeStore(snapshot);\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {AccountsTreeStore}\n     */\n    transaction(enableWatchdog = true) {\n        const tx = this._store.transaction(enableWatchdog);\n        return new AccountsTreeStore(tx);\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {SynchronousAccountsTreeStore}\n     */\n    synchronousTransaction(enableWatchdog = true) {\n        const tx = this._store.synchronousTransaction(enableWatchdog);\n        return new SynchronousAccountsTreeStore(tx);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    truncate() {\n        return this._store.truncate();\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    commit() {\n        return this._store.commit();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    abort() {\n        return this._store.abort();\n    }\n\n    /** @type {Transaction} */\n    get tx() {\n        if (this._store instanceof JDB.Transaction) {\n            return this._store;\n        }\n        return undefined;\n    }\n}\nClass.register(AccountsTreeStore);\n\n/**\n * @implements {ICodec}\n */\nclass AccountsTreeStoreCodec {\n    /**\n     * @param {*} obj The object to encode before storing it.\n     * @returns {*} Encoded object.\n     */\n    encode(obj) {\n        return obj.serialize();\n    }\n\n    /**\n     * @param {*} obj The object to decode.\n     * @param {string} key The object's primary key.\n     * @returns {*} Decoded object.\n     */\n    decode(obj, key) {\n        return AccountsTreeNode.unserialize(new SerialBuffer(obj));\n    }\n\n    /**\n     * @type {{encode: function(val:*):*, decode: function(val:*):*, buffer: boolean, type: string}|void}\n     */\n    get valueEncoding() {\n        return JDB.JungleDB.BINARY_ENCODING;\n    }\n}\n","class SynchronousAccountsTreeStore extends AccountsTreeStore {\n    /**\n     * @param {SynchronousTransaction} store\n     */\n    constructor(store) {\n        super(store);\n        this._syncStore = store;\n    }\n\n    /**\n     * @param {Array.<string>} keys\n     */\n    async preload(keys) {\n        await this._syncStore.preload(keys);\n    }\n\n    /**\n     * @param {string} key\n     * @param {boolean} [expectedToBePresent]\n     * @returns {AccountsTreeNode}\n     */\n    getSync(key, expectedToBePresent = true) {\n        return this._syncStore.getSync(key, { expectPresence: expectedToBePresent });\n    }\n\n    /**\n     * @param {AccountsTreeNode} node\n     * @returns {string}\n     */\n    putSync(node) {\n        const key = node.prefix;\n        this._syncStore.putSync(key, node);\n        return key;\n    }\n\n    /**\n     * @param {AccountsTreeNode} node\n     * @returns {string}\n     */\n    removeSync(node) {\n        const key = node.prefix;\n        this._syncStore.removeSync(key);\n        return key;\n    }\n\n    /**\n     * @returns {AccountsTreeNode}\n     */\n    getRootNodeSync() {\n        return this.getSync('');\n    }\n}\nClass.register(SynchronousAccountsTreeStore);\n","class AccountsProof {\n    /**\n     * @param {Array.<AccountsTreeNode>} nodes\n     */\n    constructor(nodes) {\n        if (!nodes || !Array.isArray(nodes) || !NumberUtils.isUint16(nodes.length)\n            || nodes.some(it => !(it instanceof AccountsTreeNode))) throw 'Malformed nodes';\n\n        /** @type {Array.<AccountsTreeNode>} */\n        this._nodes = nodes;\n        /** @type {HashMap.<Hash,AccountsTreeNode>} */\n        this._index = null;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {AccountsProof}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint16();\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            nodes.push(AccountsTreeNode.unserialize(buf));\n        }\n        return new AccountsProof(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._nodes.length);\n        for (const node of this._nodes) {\n            node.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let size = /*count*/ 2;\n        for (const node of this._nodes) {\n            size += node.serializedSize;\n        }\n        return size;\n    }\n\n    /**\n     * Assumes nodes to be in post order and hashes nodes to check internal consistency of proof.\n     * XXX Abuse this method to index the nodes contained in the proof. This forces callers to explicitly verify()\n     * the proof before retrieving accounts.\n     * @returns {boolean}\n     */\n    verify() {\n        /** @type {Array.<AccountsTreeNode>} */\n        const children = [];\n        this._index = new HashMap();\n        for (const node of this._nodes) {\n            // If node is a branch node, validate its children.\n            if (node.isBranch()) {\n                let child;\n                while (child = children.pop()) { // eslint-disable-line no-cond-assign\n                    if (child.isChildOf(node)) {\n                        const hash = child.hash();\n                        // If the child is not valid, return false.\n                        if (!node.getChildHash(child.prefix).equals(hash) || node.getChild(child.prefix) !== child.prefix) {\n                            return false;\n                        }\n                        this._index.put(hash, child);\n                    } else {\n                        children.push(child);\n                        break;\n                    }\n                }\n            }\n\n            // Append child.\n            children.push(node);\n        }\n\n        // The last element must be the root node.\n        return children.length === 1 && children[0].prefix === '' && children[0].isBranch();\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {?Account}\n     */\n    getAccount(address) {\n        if (!this._index) {\n            throw new Error('AccountsProof must be verified before retrieving accounts. Call verify() first.');\n        }\n\n        const rootNode = this._nodes[this._nodes.length - 1];\n        const prefix = address.toHex();\n        return this._getAccount(rootNode, prefix);\n    }\n\n    /**\n     * @param {AccountsTreeNode} node\n     * @param {string} prefix\n     * @returns {?Account}\n     * @private\n     */\n    _getAccount(node, prefix) {\n        // Find common prefix between node and requested address.\n        const commonPrefix = StringUtils.commonPrefix(node.prefix, prefix);\n\n        // If the prefix does not fully match, the requested account does not exist.\n        if (commonPrefix.length !== node.prefix.length) return null;\n\n        // If the remaining address is empty, we have found the requested node.\n        if (commonPrefix === prefix) return node.account;\n\n        // Descend into the matching child node if one exists.\n        const childKey = node.getChildHash(prefix);\n        if (childKey) {\n            const childNode = this._index.get(childKey);\n\n            // If the child exists but is not part of the proof, fail.\n            if (!childNode) {\n                throw new Error('Requested address not part of AccountsProof');\n            }\n\n            return this._getAccount(childNode, prefix);\n        }\n\n        // No matching child exists, the requested account does not exist.\n        return null;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `AccountsProof{length=${this.length}}`;\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    root() {\n        return this._nodes[this._nodes.length - 1].hash();\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._nodes.length;\n    }\n\n    /** @type {Array.<AccountsTreeNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(AccountsProof);\n","class AccountsTreeChunk {\n    /**\n     * @param {Array.<AccountsTreeNode>} nodes\n     * @param {AccountsProof} proof\n     */\n    constructor(nodes, proof) {\n        if (!nodes || !NumberUtils.isUint16(nodes.length)\n            || nodes.some(it => !(it instanceof AccountsTreeNode) || !it.isTerminal())) throw 'Malformed nodes';\n\n        /** @type {Array.<AccountsTreeNode>} */\n        this._nodes = nodes;\n        this._proof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {AccountsTreeChunk}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint16();\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            nodes.push(AccountsTreeNode.unserialize(buf));\n        }\n        const proof = AccountsProof.unserialize(buf);\n        return new AccountsTreeChunk(nodes, proof);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._nodes.length);\n        for (const node of this._nodes) {\n            node.serialize(buf);\n        }\n        this._proof.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let size = /*count*/ 2;\n        for (const node of this._nodes) {\n            size += node.serializedSize;\n        }\n        size += this._proof.serializedSize;\n        return size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verify() {\n        if (!this._proof.verify()) {\n            return false;\n        }\n\n        let lastPrefix = null;\n        for (let i = 0; i <= this._nodes.length; ++i) {\n            const node = i < this._nodes.length ? this._nodes[i] : this.tail;\n            if (lastPrefix && lastPrefix >= node.prefix) {\n                return false;\n            }\n            lastPrefix = node.prefix;\n        }\n        return true;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `AccountsTreeChunk{length=${this.length}}`;\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    root() {\n        return this._proof.root();\n    }\n\n    /** @type {Array.<AccountsTreeNode>} */\n    get terminalNodes() {\n        return this._nodes.concat([this.tail]);\n    }\n\n    /** @type {AccountsProof} */\n    get proof() {\n        return this._proof;\n    }\n\n    /** @type {AccountsTreeNode} */\n    get head() {\n        return this._nodes[0];\n    }\n\n    /** @type {AccountsTreeNode} */\n    get tail() {\n        return this._proof.nodes[0];\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._nodes.length + 1;\n    }\n}\nAccountsTreeChunk.SIZE_MAX = 1000;\nAccountsTreeChunk.EMPTY = new AccountsTreeChunk([], new AccountsProof([]));\nClass.register(AccountsTreeChunk);\n","class AccountsTree extends Observable {\n    /**\n     * @returns {Promise.<AccountsTree>}\n     */\n    static async getPersistent(jdb) {\n        const store = AccountsTreeStore.getPersistent(jdb);\n        const tree = new AccountsTree(store);\n        return tree._init();\n    }\n\n    /**\n     * @returns {Promise.<AccountsTree>}\n     */\n    static async createVolatile() {\n        const store = AccountsTreeStore.createVolatile();\n        const tree = new AccountsTree(store);\n        return tree._init();\n    }\n\n    /**\n     * @private\n     * @param {AccountsTreeStore} store\n     * @returns {AccountsTree}\n     */\n    constructor(store) {\n        super();\n        /** @type {AccountsTreeStore} */\n        this._store = store;\n        this._synchronizer = new Synchronizer();\n    }\n\n    /**\n     * @returns {Promise.<AccountsTree>}\n     * @protected\n     */\n    async _init() {\n        let rootNode = await this._store.getRootNode();\n        if (!rootNode) {\n            rootNode = AccountsTreeNode.branchNode(/*prefix*/ '', /*childrenSuffixes*/ [], /*childrenHashes*/ []);\n            await this._store.put(rootNode);\n        }\n        return this;\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     * @returns {Promise}\n     */\n    put(address, account) {\n        return this._synchronizer.push(() => {\n            return this._put(address, account);\n        });\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     * @returns {Promise}\n     * @private\n     */\n    async _put(address, account) {\n        if (account.isInitial() && !(await this.get(address))) {\n            return;\n        }\n\n        // Fetch the root node.\n        const rootNode = await this._store.getRootNode();\n        Assert.that(!!rootNode, 'Corrupted store: Failed to fetch AccountsTree root node');\n\n        // Insert account into the tree at address.\n        const prefix = address.toHex();\n        await this._insert(rootNode, prefix, account, []);\n    }\n\n    /**\n     * @param {AccountsTreeNode} node\n     * @param {string} prefix\n     * @param {Account} account\n     * @param {Array.<AccountsTreeNode>} rootPath\n     * @returns {Promise}\n     * @private\n     */\n    async _insert(node, prefix, account, rootPath) {\n        // Find common prefix between node and new address.\n        const commonPrefix = StringUtils.commonPrefix(node.prefix, prefix);\n\n        // If the node prefix does not fully match the new address, split the node.\n        if (commonPrefix.length !== node.prefix.length) {\n            // Insert the new account node.\n            const newChild = AccountsTreeNode.terminalNode(prefix, account);\n            const newChildHash = newChild.hash();\n            await this._store.put(newChild);\n\n            // Insert the new parent node.\n            const newParent = AccountsTreeNode.branchNode(commonPrefix)\n                .withChild(node.prefix, node.hash())\n                .withChild(newChild.prefix, newChildHash);\n            const newParentHash = newParent.hash();\n            await this._store.put(newParent);\n\n            return this._updateKeys(newParent.prefix, newParentHash, rootPath);\n        }\n\n        // If the commonPrefix is the specified address, we have found an (existing) node\n        // with the given address. Update the account.\n        if (commonPrefix === prefix) {\n            // XXX How does this generalize to more than one account type?\n            // Special case: If the new balance is the initial balance\n            // (i.e. balance=0, nonce=0), it is like the account never existed\n            // in the first place. Delete the node in this case.\n            if (account.isInitial()) {\n                await this._store.remove(node);\n                // We have already deleted the node, remove the subtree it was on.\n                return this._prune(node.prefix, rootPath);\n            }\n\n            // Update the account.\n            node = node.withAccount(account);\n            const nodeHash = node.hash();\n            await this._store.put(node);\n\n            return this._updateKeys(node.prefix, nodeHash, rootPath);\n        }\n\n        // If the node prefix matches and there are address bytes left, descend into\n        // the matching child node if one exists.\n        const childPrefix = node.getChild(prefix);\n        if (childPrefix) {\n            const childNode = await this._store.get(childPrefix);\n            rootPath.push(node);\n            return this._insert(childNode, prefix, account, rootPath);\n        }\n\n        // If no matching child exists, add a new child account node to the current node.\n        const newChild = AccountsTreeNode.terminalNode(prefix, account);\n        const newChildHash = newChild.hash();\n        await this._store.put(newChild);\n\n        node = node.withChild(newChild.prefix, newChildHash);\n        const nodeHash = node.hash();\n        await this._store.put(node);\n\n        return this._updateKeys(node.prefix, nodeHash, rootPath);\n    }\n\n    /**\n     * @param {string} prefix\n     * @param {Array.<AccountsTreeNode>} rootPath\n     * @returns {Promise}\n     * @private\n     */\n    async _prune(prefix, rootPath) {\n        // Walk along the rootPath towards the root node starting with the\n        // immediate predecessor of the node specified by 'prefix'.\n        let i = rootPath.length - 1;\n        for (; i >= 0; --i) {\n            let node = rootPath[i];\n\n            node = node.withoutChild(prefix);\n\n            // If the node has only a single child, merge it with the next node.\n            if (node.hasSingleChild() && node.prefix !== '') {\n                await this._store.remove(node); // eslint-disable-line no-await-in-loop\n\n                const childPrefix = node.getFirstChild();\n                const childNode = await this._store.get(childPrefix); // eslint-disable-line no-await-in-loop\n\n                await this._store.put(childNode); // eslint-disable-line no-await-in-loop\n                const childHash = childNode.hash();\n                return this._updateKeys(childNode.prefix, childHash, rootPath.slice(0, i));\n            }\n            // Otherwise, if the node has children left, update it and all keys on the\n            // remaining root path. Pruning finished.\n            // XXX Special case: We start with an empty root node. Don't delete it.\n            else if (node.hasChildren() || node.prefix === '') {\n                const nodeHash = node.hash();\n                await this._store.put(node); // eslint-disable-line no-await-in-loop\n                return this._updateKeys(node.prefix, nodeHash, rootPath.slice(0, i));\n            }\n\n            // The node has no children left, continue pruning.\n            prefix = node.prefix;\n        }\n\n        // XXX This should never be reached.\n        return undefined;\n    }\n\n    /**\n     * @param {string} prefix\n     * @param {Hash} nodeHash\n     * @param {Array.<AccountsTreeNode>} rootPath\n     * @returns {Promise}\n     * @private\n     */\n    async _updateKeys(prefix, nodeHash, rootPath) {\n        // Walk along the rootPath towards the root node starting with the\n        // immediate predecessor of the node specified by 'prefix'.\n        let i = rootPath.length - 1;\n        for (; i >= 0; --i) {\n            let node = rootPath[i];\n\n            node = node.withChild(prefix, nodeHash);\n            await this._store.put(node); // eslint-disable-line no-await-in-loop\n            nodeHash = node.hash();\n            prefix = node.prefix;\n        }\n\n        return nodeHash;\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise.<?Account>}\n     */\n    async get(address) {\n        const node = await this._store.get(address.toHex());\n        return node !== undefined ? node.account : null;\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<AccountsProof>}\n     */\n    async getAccountsProof(addresses) {\n        const rootNode = await this._store.getRootNode();\n        Assert.that(!!rootNode, 'Corrupted store: Failed to fetch AccountsTree root node');\n\n        const prefixes = [];\n        for (const address of addresses) {\n            prefixes.push(address.toHex());\n        }\n        // We sort the addresses to simplify traversal in post order (leftmost addresses first).\n        prefixes.sort();\n\n        const nodes = [];\n        await this._getAccountsProof(rootNode, prefixes, nodes);\n        return new AccountsProof(nodes);\n    }\n\n    /**\n     * Constructs the accounts proof in post-order.\n     * @param {AccountsTreeNode} node\n     * @param {Array.<string>} prefixes\n     * @param {Array.<AccountsTreeNode>} nodes\n     * @returns {Promise.<*>}\n     * @private\n     */\n    async _getAccountsProof(node, prefixes, nodes) {\n        // For each prefix, descend the tree individually.\n        let includeNode = false;\n        for (let i = 0; i < prefixes.length; ) {\n            let prefix = prefixes[i];\n\n            // Find common prefix between node and the current requested prefix.\n            const commonPrefix = StringUtils.commonPrefix(node.prefix, prefix);\n\n            // If the prefix fully matches, we have found the requested node.\n            // If the prefix does not fully match, the requested address is not part of this node.\n            // Include the node in the proof nevertheless to prove that the account doesn't exist.\n            if (commonPrefix.length !== node.prefix.length || node.prefix === prefix) {\n                includeNode = true;\n                i++;\n                continue;\n            }\n\n            // Descend into the matching child node if one exists.\n            const childKey = node.getChild(prefix);\n            if (childKey) {\n                const childNode = await this._store.get(childKey); // eslint-disable-line no-await-in-loop\n\n                // Group addresses with same prefix:\n                // Because of our ordering, they have to be located next to the current prefix.\n                // Hence, we iterate over the next prefixes, until we don't find commonalities anymore.\n                // In the next main iteration we can skip those we already requested here.\n                const subPrefixes = [prefix];\n                // Find other prefixes to descend into this tree as well.\n                let j = i + 1;\n                for (; j < prefixes.length; ++j) {\n                    // Since we ordered prefixes, there can't be any other prefixes with commonalities.\n                    if (!prefixes[j].startsWith(childNode.prefix)) break;\n                    // But if there is a commonality, add it to the list.\n                    subPrefixes.push(prefixes[j]);\n                }\n                // Now j is the last index which doesn't have commonalities,\n                // we continue from there in the next iteration.\n                i = j;\n\n                includeNode = (await this._getAccountsProof(childNode, subPrefixes, nodes)) || includeNode; // eslint-disable-line no-await-in-loop\n            }\n            // No child node exists with the requested prefix. Include the current node to prove the absence of the requested account.\n            else {\n                includeNode = true;\n                i++;\n            }\n        }\n\n        // If this branch contained at least one account, we add this node.\n        if (includeNode) {\n            nodes.push(node);\n        }\n\n        return includeNode;\n    }\n\n    /**\n     * @param {string} startPrefix The prefix to start with.\n     * @param {number} size The maximum number of terminal nodes to include.\n     * @returns {Promise.<AccountsTreeChunk>}\n     */\n    async getChunk(startPrefix, size) {\n        const chunk = await this._store.getTerminalNodes(startPrefix, size);\n        const lastNode = chunk.pop();\n        let /** @type {AccountsProof} */ proof;\n        if (lastNode) {\n            proof = await this.getAccountsProof([Address.fromHex(lastNode.prefix)]);\n        } else {\n            // The proof that the last address does not exist is sufficient to prove that there is no such chunk.\n            proof = await this.getAccountsProof([Address.fromHex('ffffffffffffffffffffffffffffffffffffffff')]);\n        }\n        return new AccountsTreeChunk(chunk, proof);\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {Promise.<AccountsTree>}\n     */\n    transaction(enableWatchdog = true) {\n        const tree = new AccountsTree(this._store.transaction(enableWatchdog));\n        return tree._init();\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {Promise.<SynchronousAccountsTree>}\n     */\n    synchronousTransaction(enableWatchdog = true) {\n        const tx = this._store.synchronousTransaction(enableWatchdog);\n        const tree = new SynchronousAccountsTree(tx);\n        return tree._init();\n    }\n\n    /**\n     * @returns {Promise.<PartialAccountsTree>}\n     */\n    async partialTree() {\n        const tx = this._store.synchronousTransaction(false);\n        await tx.truncate();\n        const tree = new PartialAccountsTree(tx);\n        return tree._init();\n    }\n\n    /**\n     * @param {AccountsTree} [tx]\n     * @returns {Promise.<AccountsTree>}\n     */\n    snapshot(tx) {\n        const tree = new AccountsTree(this._store.snapshot(tx ? tx._store : undefined));\n        return tree._init();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    async commit() {\n        Assert.that(!(await this.root()).equals(new Hash(null)));\n        return this._store.commit();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    abort() {\n        return this._store.abort();\n    }\n\n    /**\n     * @returns {Promise.<Hash>}\n     */\n    async root() {\n        const rootNode = await this._store.getRootNode();\n        return rootNode && rootNode.hash();\n    }\n\n    /** @type {Transaction} */\n    get tx() {\n        return this._store.tx;\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    async isEmpty() {\n        const rootNode = await this._store.getRootNode();\n        return !rootNode.hasChildren();\n    }\n}\nClass.register(AccountsTree);\n\n","class SynchronousAccountsTree extends AccountsTree {\n    /**\n     * @private\n     * @param {SynchronousAccountsTreeStore} store\n     * @returns {SynchronousAccountsTree}\n     */\n    constructor(store) {\n        super(store);\n        /** @type {SynchronousAccountsTreeStore} */\n        this._syncStore = store;\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     * @returns {Promise}\n     */\n    async preloadAddresses(addresses) {\n        const rootNode = await this._syncStore.getRootNode();\n        Assert.that(!!rootNode, 'Corrupted store: Failed to fetch AccountsTree root node');\n\n        const prefixes = [];\n        for (const address of addresses) {\n            prefixes.push(address.toHex());\n        }\n        // We sort the addresses to simplify traversal in post order (leftmost addresses first).\n        prefixes.sort();\n\n        await this._preloadAddresses(rootNode, prefixes);\n    }\n\n    /**\n     * @param {AccountsTreeNode} node\n     * @param {Array.<string>} prefixes\n     * @private\n     */\n    async _preloadAddresses(node, prefixes) {\n        if (node.hasChildren()) {\n            await this._syncStore.preload(node.getChildren());\n        }\n        \n        // For each prefix, descend the tree individually.\n        for (let i = 0; i < prefixes.length; ) {\n            const prefix = prefixes[i];\n\n            // Find common prefix between node and the current requested prefix.\n            const commonPrefix = StringUtils.commonPrefix(node.prefix, prefix);\n\n            // If the prefix fully matches, we have found the requested node.\n            // If the prefix does not fully match, the requested address is not part of this node.\n            // Include the node in the proof nevertheless to prove that the account doesn't exist.\n            if (commonPrefix.length !== node.prefix.length || node.prefix === prefix) {\n                i++;\n                continue;\n            }\n\n            // Descend into the matching child node if one exists.\n            const childKey = node.getChild(prefix);\n            if (childKey) {\n                const childNode = this._syncStore.getSync(childKey);\n\n                // Group addresses with same prefix:\n                // Because of our ordering, they have to be located next to the current prefix.\n                // Hence, we iterate over the next prefixes, until we don't find commonalities anymore.\n                // In the next main iteration we can skip those we already requested here.\n                const subPrefixes = [prefix];\n                // Find other prefixes to descend into this tree as well.\n                let j = i + 1;\n                for (; j < prefixes.length; ++j) {\n                    // Since we ordered prefixes, there can't be any other prefixes with commonalities.\n                    if (!prefixes[j].startsWith(childNode.prefix)) break;\n                    // But if there is a commonality, add it to the list.\n                    subPrefixes.push(prefixes[j]);\n                }\n                // Now j is the last index which doesn't have commonalities,\n                // we continue from there in the next iteration.\n                i = j;\n\n                await this._preloadAddresses(childNode, subPrefixes); // eslint-disable-line no-await-in-loop\n            }\n            // No child node exists with the requested prefix. Include the current node to prove the absence of the requested account.\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     */\n    putSync(address, account) {\n        this.putBatch(address, account);\n        this.finalizeBatch();\n    }\n\n    finalizeBatch() {\n        const rootNode = this._syncStore.getRootNodeSync();\n        this._updateHashes(rootNode);\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     * @private\n     */\n    putBatch(address, account) {\n        if (account.isInitial() && !this.getSync(address, false)) {\n            return;\n        }\n\n        // Fetch the root node.\n        const rootNode = this._syncStore.getRootNodeSync();\n        Assert.that(!!rootNode, 'Corrupted store: Failed to fetch AccountsTree root node');\n\n        // Insert account into the tree at address.\n        const prefix = address.toHex();\n        this._insertBatch(rootNode, prefix, account, []);\n    }\n\n    /**\n     * @param {AccountsTreeNode} node\n     * @param {string} prefix\n     * @param {Account} account\n     * @param {Array.<AccountsTreeNode>} rootPath\n     * @protected\n     */\n    _insertBatch(node, prefix, account, rootPath) {\n        // Find common prefix between node and new address.\n        const commonPrefix = StringUtils.commonPrefix(node.prefix, prefix);\n\n        // If the node prefix does not fully match the new address, split the node.\n        if (commonPrefix.length !== node.prefix.length) {\n            // Insert the new account node.\n            const newChild = AccountsTreeNode.terminalNode(prefix, account);\n            this._syncStore.putSync(newChild);\n\n            // Insert the new parent node.\n            const newParent = AccountsTreeNode.branchNode(commonPrefix)\n                .withChild(node.prefix, new Hash(null))\n                .withChild(newChild.prefix, new Hash(null));\n            this._syncStore.putSync(newParent);\n\n            return this._updateKeysBatch(newParent.prefix, rootPath);\n        }\n\n        // If the commonPrefix is the specified address, we have found an (existing) node\n        // with the given address. Update the account.\n        if (commonPrefix === prefix) {\n            // XXX How does this generalize to more than one account type?\n            // Special case: If the new balance is the initial balance\n            // (i.e. balance=0, nonce=0), it is like the account never existed\n            // in the first place. Delete the node in this case.\n            if (account.isInitial()) {\n                this._syncStore.removeSync(node);\n                // We have already deleted the node, remove the subtree it was on.\n                return this._pruneBatch(node.prefix, rootPath);\n            }\n\n            // Update the account.\n            node = node.withAccount(account);\n            this._syncStore.putSync(node);\n\n            return this._updateKeysBatch(node.prefix, rootPath);\n        }\n\n        // If the node prefix matches and there are address bytes left, descend into\n        // the matching child node if one exists.\n        const childPrefix = node.getChild(prefix);\n        if (childPrefix) {\n            const childNode = this._syncStore.getSync(childPrefix);\n            rootPath.push(node);\n            return this._insertBatch(childNode, prefix, account, rootPath);\n        }\n\n        // If no matching child exists, add a new child account node to the current node.\n        const newChild = AccountsTreeNode.terminalNode(prefix, account);\n        this._syncStore.putSync(newChild);\n\n        node = node.withChild(newChild.prefix, new Hash(null));\n        this._syncStore.putSync(node);\n\n        return this._updateKeysBatch(node.prefix, rootPath);\n    }\n\n    /**\n     * @param {string} prefix\n     * @param {Array.<AccountsTreeNode>} rootPath\n     * @private\n     */\n    _pruneBatch(prefix, rootPath) {\n        // Walk along the rootPath towards the root node starting with the\n        // immediate predecessor of the node specified by 'prefix'.\n        let i = rootPath.length - 1;\n        for (; i >= 0; --i) {\n            let node = rootPath[i];\n\n            node = node.withoutChild(prefix);\n\n            // If the node has only a single child, merge it with the next node.\n            if (node.hasSingleChild() && node.prefix !== '') {\n                this._syncStore.removeSync(node);\n\n                const childPrefix = node.getFirstChild();\n                const childNode = this._syncStore.getSync(childPrefix);\n\n                this._syncStore.putSync(childNode);\n                return this._updateKeysBatch(childNode.prefix, rootPath.slice(0, i));\n            }\n            // Otherwise, if the node has children left, update it and all keys on the\n            // remaining root path. Pruning finished.\n            // XXX Special case: We start with an empty root node. Don't delete it.\n            else if (node.hasChildren() || node.prefix === '') {\n                this._syncStore.putSync(node);\n                return this._updateKeysBatch(node.prefix, rootPath.slice(0, i));\n            }\n\n            // The node has no children left, continue pruning.\n            prefix = node.prefix;\n        }\n\n        // XXX This should never be reached.\n        return undefined;\n    }\n\n    /**\n     * @param {string} prefix\n     * @param {Array.<AccountsTreeNode>} rootPath\n     * @private\n     */\n    _updateKeysBatch(prefix, rootPath) {\n        // Walk along the rootPath towards the root node starting with the\n        // immediate predecessor of the node specified by 'prefix'.\n        let i = rootPath.length - 1;\n        for (; i >= 0; --i) {\n            let node = rootPath[i];\n\n            node = node.withChild(prefix, new Hash(null));\n            this._syncStore.putSync(node);\n            prefix = node.prefix;\n        }\n    }\n\n    /**\n     * This method updates all empty hashes (and only such).\n     * @param {AccountsTreeNode} node\n     * @protected\n     */\n    _updateHashes(node) {\n        if (node.isTerminal()) {\n            return node.hash();\n        }\n\n        const zeroHash = new Hash(null);\n        // Compute sub hashes if necessary.\n        const subHashes = node.getChildren().map(child => {\n            const currentHash = node.getChildHash(child);\n            if (!currentHash.equals(zeroHash)) {\n                return currentHash;\n            }\n            const childNode = this._syncStore.getSync(child);\n            return this._updateHashes(childNode);\n        });\n\n        // Then prepare new node and update.\n        let newNode = node;\n        node.getChildren().forEach((child, i) => {\n            newNode = newNode.withChild(child, subHashes[i]);\n        });\n        this._syncStore.putSync(newNode);\n        return newNode.hash();\n    }\n\n    /**\n     * @param {Address} address\n     * @param {boolean} [expectedToBePresent]\n     * @returns {?Account}\n     */\n    getSync(address, expectedToBePresent = true) {\n        const node = this._syncStore.getSync(address.toHex(), expectedToBePresent);\n        return node !== undefined ? node.account : null;\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    rootSync() {\n        const rootNode = this._syncStore.getRootNodeSync();\n        return rootNode && rootNode.hash();\n    }\n}\nClass.register(SynchronousAccountsTree);\n\n","class PartialAccountsTree extends SynchronousAccountsTree {\n    /**\n     * @private\n     * @param {SynchronousAccountsTreeStore} store\n     */\n    constructor(store) {\n        super(store);\n        this._complete = false;\n        /** @type {string} */\n        this._lastPrefix = '';\n    }\n\n    /**\n     * @param {AccountsTreeChunk} chunk\n     * @returns {Promise.<PartialAccountsTree.Status>}\n     */\n    async pushChunk(chunk) {\n        // First verify the proof.\n        if (!chunk.verify()) {\n            return PartialAccountsTree.Status.ERR_INCORRECT_PROOF;\n        }\n\n        const tx = this.synchronousTransaction();\n\n        // Then apply all\n        tx._putLight(chunk.terminalNodes);\n\n        // Check if proof can be merged.\n        if (!tx._mergeProof(chunk.proof, chunk.tail.prefix)) {\n            await tx.abort();\n            return PartialAccountsTree.Status.ERR_UNMERGEABLE;\n        }\n        this._complete = tx.complete;\n\n        // Now, we can put all nodes into the store.\n        await tx.commit();\n\n        // Update last prefix.\n        this._lastPrefix = chunk.tail.prefix;\n\n        // And return OK code depending on internal state.\n        return this._complete ? PartialAccountsTree.Status.OK_COMPLETE : PartialAccountsTree.Status.OK_UNFINISHED;\n    }\n\n    /**\n     * @param {AccountsProof} proof\n     * @param {string} upperBound\n     * @returns {boolean}\n     * @private\n     */\n    _mergeProof(proof, upperBound) {\n        // Retrieve rightmost path of the in-memory tree.\n        let node = this._store.getRootNodeSync();\n        let nodeChildren = node.getChildren();\n        let complete = true;\n\n        // Iterate over the proof and check for consistency.\n        let j = proof.length - 1;\n        for (; j > 0; --j) {\n            const proofNode = proof.nodes[j];\n            // The node's prefix might be shorter than the proof node's prefix if it is a newly\n            // introduces node in the proof.\n            if (StringUtils.commonPrefix(node.prefix, proofNode.prefix) !== node.prefix) {\n                return false;\n            }\n\n            const proofChildren = proofNode.getChildren();\n\n            // The tree node may not have more children than the proof node.\n            if (nodeChildren.length > proofChildren.length) {\n                return false;\n            }\n\n            // The nextChild we descend to.\n            const nextChild = node.getLastChild();\n            let insertedNode = false;\n\n            // There are three cases:\n            // 1) the child is in our inner tree (so between lower and upper bound), then the hashes must coincide.\n            // 2) the child is left of our chunk, so it must be in the store.\n            // 3) the child is right of our chunk, so it is a dangling reference.\n            let i = 0;\n            for (const proofChild of proofChildren) {\n                const upperBoundPrefix = upperBound.substr(0, proofChild.length);\n                if (proofChild <= upperBoundPrefix) {\n                    // An inner node.\n                    const child = nodeChildren.shift();\n\n                    // This is the next child.\n                    if (StringUtils.commonPrefix(nextChild, proofChild) === proofChild) {\n                        // If it is a real prefix of the next child, we have inserted a new node.\n                        if (proofChild !== nextChild) {\n                            insertedNode = true;\n                        }\n                        continue;\n                    }\n\n                    if (child !== proofChild) {\n                        return false;\n                    }\n                    // The child is equal and not the next child, so the hash must coincide.\n                    const nodeHash = node.getChildHash(child);\n                    const proofHash = proofNode.getChildHash(child);\n                    if (!nodeHash || !proofHash || !nodeHash.equals(proofHash)) {\n                        return false;\n                    }\n                } else {\n                    // The others may be dangling references.\n                    break;\n                }\n                ++i;\n            }\n\n            // We must have consumed all children!\n            if (nodeChildren.length !== 0) {\n                return false;\n            }\n\n            // If not all of the proof children have been tested, we are definitely incomplete.\n            complete = complete && (i === proofChildren.length - 1);\n\n            // If the prefix was the same, we can move on.\n            if (insertedNode) {\n                nodeChildren = [nextChild];\n            } else {\n                // We should never end here with a terminal node.\n                if (node.isTerminal()) {\n                    return false;\n                }\n                node = this._store.getSync(node.getLastChild());\n                nodeChildren = node.getChildren();\n                if (node.isTerminal()) {\n                    break;\n                }\n            }\n        }\n\n        // Check the terminal nodes.\n        if (!node.equals(proof.nodes[0])) {\n            return false;\n        }\n\n        this._complete = complete;\n        return true;\n    }\n\n    /**\n     * @param {Array.<AccountsTreeNode>} nodes\n     * @private\n     */\n    _putLight(nodes) {\n        Assert.that(nodes.every(node => node.isTerminal()), 'Can only build tree from terminal nodes');\n\n        // Fetch the root node.\n        let rootNode = this._store.getRootNodeSync();\n        Assert.that(!!rootNode, 'Corrupted store: Failed to fetch AccountsTree root node');\n\n        // TODO: Bulk insertion instead of sequential insertion!\n        for (const node of nodes) {\n            this._insertBatch(rootNode, node.prefix, node.account, []);\n            rootNode = this._store.getRootNodeSync();\n            Assert.that(!!rootNode, 'Corrupted store: Failed to fetch AccountsTree root node');\n        }\n        this._updateHashes(rootNode);\n    }\n\n    /** @type {boolean} */\n    get complete() {\n        return this._complete;\n    }\n\n    /** @type {string} */\n    get missingPrefix() {\n        return this._lastPrefix;\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {PartialAccountsTree}\n     */\n    synchronousTransaction(enableWatchdog = true) {\n        const tree = new PartialAccountsTree(this._store.synchronousTransaction(enableWatchdog));\n        tree._complete = this._complete;\n        tree._lastPrefix = this._lastPrefix;\n        return tree;\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {AccountsTree}\n     */\n    transaction(enableWatchdog = true) {\n        if (!this.complete) {\n            throw new Error('Can only construct AccountsTree from complete PartialAccountsTree');\n        }\n        // Use a synchronous transaction here to enable better caching.\n        return new AccountsTree(this._store.synchronousTransaction(enableWatchdog));\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    commit() {\n        return this._store.commit();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    abort() {\n        return this._store.abort();\n    }\n}\n\n/**\n * @enum {number}\n */\nPartialAccountsTree.Status = {\n    ERR_HASH_MISMATCH: -3,\n    ERR_INCORRECT_PROOF: -2,\n    ERR_UNMERGEABLE: -1,\n    OK_COMPLETE: 0,\n    OK_UNFINISHED: 1\n};\nClass.register(PartialAccountsTree);\n\n","class Accounts extends Observable {\n    /**\n     * Generate an Accounts object that is persisted to the local storage.\n     * @returns {Promise.<Accounts>} Accounts object\n     */\n    static async getPersistent(jdb) {\n        const tree = await AccountsTree.getPersistent(jdb);\n        return new Accounts(tree);\n    }\n\n    /**\n     * Generate an Accounts object that loses it's data after usage.\n     * @returns {Promise.<Accounts>} Accounts object\n     */\n    static async createVolatile() {\n        const tree = await AccountsTree.createVolatile();\n        return new Accounts(tree);\n    }\n\n    /**\n     * @param {AccountsTree} accountsTree\n     */\n    constructor(accountsTree) {\n        super();\n        this._tree = accountsTree;\n\n        // Forward balance change events to listeners registered on this Observable.\n        this.bubble(this._tree, '*');\n    }\n\n    /**\n     * @param {Block} genesisBlock\n     * @param {string} encodedAccounts\n     * @returns {Promise.<void>}\n     */\n    async initialize(genesisBlock, encodedAccounts) {\n        Assert.that(await this._tree.isEmpty());\n\n        const tree = await this._tree.synchronousTransaction();\n        try {\n            const buf = BufferUtils.fromBase64(encodedAccounts);\n            const count = buf.readUint16();\n            for (let i = 0; i < count; i++) {\n                const address = Address.unserialize(buf);\n                const account = Account.unserialize(buf);\n                tree.putSync(address, account);\n            }\n\n            await this._commitBlockBody(tree, genesisBlock.body, genesisBlock.height, new TransactionCache());\n\n            tree.finalizeBatch();\n        } catch (e) {\n            await tree.abort();\n            throw e;\n        }\n\n        const hash = tree.rootSync();\n        if (!genesisBlock.accountsHash.equals(hash)) {\n            await tree.abort();\n            throw new Error('Genesis AccountsHash mismatch');\n        }\n\n        return tree.commit();\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<AccountsProof>}\n     */\n    getAccountsProof(addresses) {\n        return this._tree.getAccountsProof(addresses);\n    }\n\n    /**\n     * @param {string} startPrefix\n     * @returns {Promise.<AccountsTreeChunk>}\n     */\n    getAccountsTreeChunk(startPrefix) {\n        return this._tree.getChunk(startPrefix, AccountsTreeChunk.SIZE_MAX);\n    }\n\n    /**\n     * @param {Block} block\n     * @param {TransactionCache} transactionCache\n     * @return {Promise}\n     */\n    async commitBlock(block, transactionCache) {\n        const tree = await this._tree.synchronousTransaction();\n        await tree.preloadAddresses(block.body.getAddresses());\n        try {\n            this._commitBlockBody(tree, block.body, block.height, transactionCache);\n        } catch (e) {\n            await tree.abort();\n            throw e;\n        }\n\n        tree.finalizeBatch();\n\n        const hash = tree.rootSync();\n        if (!block.accountsHash.equals(hash)) {\n            await tree.abort();\n            throw new Error('AccountsHash mismatch');\n        }\n        return tree.commit();\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionCache\n     * @return {Promise}\n     */\n    async commitBlockBody(body, blockHeight, transactionCache) {\n        const tree = await this._tree.synchronousTransaction();\n        await tree.preloadAddresses(body.getAddresses());\n        try {\n            this._commitBlockBody(tree, body, blockHeight, transactionCache);\n        } catch (e) {\n            await tree.abort();\n            throw e;\n        }\n        tree.finalizeBatch();\n        return tree.commit();\n    }\n\n    /**\n     * @param {Array.<Transaction>} transactions\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionCache\n     * @return {Promise<Array.<PrunedAccount>>}\n     */\n    async gatherToBePrunedAccounts(transactions, blockHeight, transactionCache) {\n        const tree = await this._tree.synchronousTransaction();\n        const addresses = [];\n        for (const tx of transactions) {\n            addresses.push(tx.sender, tx.recipient);\n        }\n        await tree.preloadAddresses(addresses);\n        try {\n            this._processSenderAccounts(tree, transactions, blockHeight, transactionCache);\n            this._processRecipientAccounts(tree, transactions, blockHeight);\n            this._processContracts(tree, transactions, blockHeight);\n\n            const toBePruned = [];\n            for (const tx of transactions) {\n                const senderAccount = this._getSync(tx.sender, undefined, tree);\n                if (senderAccount.isToBePruned()) {\n                    toBePruned.push(new PrunedAccount(tx.sender, senderAccount));\n                }\n            }\n            return toBePruned.sort((a, b) => a.compare(b));\n        } finally {\n            await tree.abort();\n        }\n    }\n\n    /**\n     * @param {Block} block\n     * @param {TransactionCache} transactionCache\n     * @return {Promise}\n     */\n    async revertBlock(block, transactionCache) {\n        if (!block) throw new Error('block undefined');\n\n        const hash = await this._tree.root();\n        if (!block.accountsHash.equals(hash)) {\n            throw new Error('AccountsHash mismatch');\n        }\n        return this.revertBlockBody(block.body, block.height, transactionCache);\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionCache\n     * @return {Promise}\n     */\n    async revertBlockBody(body, blockHeight, transactionCache) {\n        const tree = await this._tree.synchronousTransaction();\n        await tree.preloadAddresses(body.getAddresses());\n        try {\n            this._revertBlockBody(tree, body, blockHeight, transactionCache);\n        } catch (e) {\n            await tree.abort();\n            throw e;\n        }\n        tree.finalizeBatch();\n        return tree.commit();\n    }\n\n    /**\n     * Gets the {@link Account}-object for an address.\n     *\n     * @param {Address} address\n     * @param {Account.Type} [accountType]\n     * @param {AccountsTree} [tree]\n     * @return {Promise.<Account>}\n     */\n    async get(address, accountType, tree = this._tree) {\n        const account = await tree.get(address);\n        if (!account) {\n            if (typeof accountType === 'undefined') {\n                return Account.INITIAL;\n            }\n            throw new Error('Account type was given but account not present');\n        } else if (typeof accountType !== 'undefined' && account.type !== accountType) {\n            throw new Error('Account type does match actual account');\n        }\n        return account;\n    }\n\n    /**\n     * Gets the {@link Account}-object for an address.\n     *\n     * @param {Address} address\n     * @param {Account.Type} [accountType]\n     * @param {SynchronousAccountsTree} tree\n     * @private\n     * @return {Account}\n     */\n    _getSync(address, accountType, tree) {\n        const account = tree.getSync(address, false);\n        if (!account) {\n            if (typeof accountType === 'undefined') {\n                return Account.INITIAL;\n            }\n            throw new Error('Account type was given but account not present');\n        } else if (typeof accountType !== 'undefined' && account.type !== accountType) {\n            throw new Error('Account type does match actual account');\n        }\n        return account;\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {Promise.<Accounts>}\n     */\n    async transaction(enableWatchdog = true) {\n        return new Accounts(await this._tree.transaction(enableWatchdog));\n    }\n\n    /**\n     * @param {Accounts} [tx]\n     * @returns {Promise.<Accounts>}\n     */\n    async snapshot(tx) {\n        return new Accounts(await this._tree.snapshot(tx ? tx._tree : undefined));\n    }\n\n    /**\n     * @returns {Promise.<PartialAccountsTree>}\n     */\n    partialAccountsTree() {\n        return this._tree.partialTree();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    commit() {\n        return this._tree.commit();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    abort() {\n        return this._tree.abort();\n    }\n\n    /**\n     * Step 1)\n     * @param {SynchronousAccountsTree} tree\n     * @param {Array.<Transaction>} transactions\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionCache\n     * @param {boolean} [revert]\n     * @private\n     */\n    _processSenderAccounts(tree, transactions, blockHeight, transactionCache, revert = false) {\n        for (const tx of transactions) {\n            const senderAccount = this._getSync(tx.sender, !revert ? tx.senderType : undefined, tree);\n            tree.putBatch(tx.sender, senderAccount.withOutgoingTransaction(tx, blockHeight, transactionCache, revert));\n        }\n    }\n\n    /**\n     * Step 2)\n     * @param {SynchronousAccountsTree} tree\n     * @param {Array.<Transaction>} transactions\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @private\n     */\n    _processRecipientAccounts(tree, transactions, blockHeight, revert = false) {\n        for (const tx of transactions) {\n            const recipientAccount = this._getSync(tx.recipient, undefined, tree);\n            tree.putBatch(tx.recipient, recipientAccount.withIncomingTransaction(tx, blockHeight, revert));\n        }\n    }\n\n    /**\n     * Step 3)\n     * @param {SynchronousAccountsTree} tree\n     * @param {Array.<Transaction>} transactions\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @private\n     */\n    _processContracts(tree, transactions, blockHeight, revert = false) {\n        // TODO: Filter & sort contract command.\n        if (revert) {\n            transactions = transactions.slice().reverse();\n        }\n        for (const tx of transactions) {\n            const recipientAccount = this._getSync(tx.recipient, !revert ? undefined : tx.recipientType, tree);\n            tree.putBatch(tx.recipient, recipientAccount.withContractCommand(tx, blockHeight, revert));\n        }\n    }\n\n    /**\n     * @param {SynchronousAccountsTree} tree\n     * @param {BlockBody} body\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionCache\n     * @private\n     */\n    _commitBlockBody(tree, body, blockHeight, transactionCache) {\n        this._processSenderAccounts(tree, body.transactions, blockHeight, transactionCache);\n        this._processRecipientAccounts(tree, body.transactions, blockHeight);\n        this._processContracts(tree, body.transactions, blockHeight);\n\n        const prunedAccounts = body.prunedAccounts.slice();\n        for (const tx of body.transactions) {\n            const senderAccount = this._getSync(tx.sender, undefined, tree);\n            if (senderAccount.isToBePruned()) {\n                const accIdx = prunedAccounts.findIndex((acc) => acc.address.equals(tx.sender));\n                if (accIdx === -1 || !senderAccount.equals(prunedAccounts[accIdx].account)) {\n                    throw new Error('Account was not pruned correctly');\n                } else {\n                    // Pruned accounts are reset to their initial state\n                    tree.putBatch(tx.sender, Account.INITIAL);\n                    prunedAccounts.splice(accIdx, 1);\n                }\n            }\n        }\n        if (prunedAccounts.length > 0) {\n            throw new Error('Account was invalidly pruned');\n        }\n\n        this._rewardMiner(tree, body, blockHeight, false);\n    }\n\n    /**\n     * @param {SynchronousAccountsTree} tree\n     * @param {BlockBody} body\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionCache\n     * @private\n     */\n    _revertBlockBody(tree, body, blockHeight, transactionCache) {\n        this._rewardMiner(tree, body, blockHeight, true);\n\n        for (const acc of body.prunedAccounts) {\n            tree.putBatch(acc.address, acc.account);\n        }\n\n        // Execute transactions in reverse order.\n        this._processContracts(tree, body.transactions, blockHeight, true);\n        this._processRecipientAccounts(tree, body.transactions, blockHeight, true);\n        this._processSenderAccounts(tree, body.transactions, blockHeight, transactionCache, true);\n    }\n\n    /**\n     * @param {SynchronousAccountsTree} tree\n     * @param {BlockBody} body\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @private\n     */\n    _rewardMiner(tree, body, blockHeight, revert = false) {\n        // Sum up transaction fees.\n        const txFees = body.transactions.reduce((sum, tx) => sum + tx.fee, 0);\n\n        // \"Coinbase transaction\"\n        const coinbaseTransaction = new ExtendedTransaction(\n            Address.NULL, Account.Type.BASIC,\n            body.minerAddr, Account.Type.BASIC,\n            txFees + Policy.blockRewardAt(blockHeight),\n            0, // Fee\n            0, // ValidityStartHeight\n            Transaction.Flag.NONE,\n            new Uint8Array(0));\n\n        const recipientAccount = this._getSync(body.minerAddr, undefined, tree);\n        tree.putBatch(body.minerAddr, recipientAccount.withIncomingTransaction(coinbaseTransaction, blockHeight, revert));\n    }\n\n    /**\n     * @returns {Promise.<Hash>}\n     */\n    hash() {\n        return this._tree.root();\n    }\n\n    /** @type {Transaction} */\n    get tx() {\n        return this._tree.tx;\n    }\n}\nClass.register(Accounts);\n","class BlockHeader {\n    /**\n     * @param {BlockHeader} o\n     * @returns {BlockHeader}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const prevHash = Hash.copy(o._prevHash);\n        const interlinkHash = Hash.copy(o._interlinkHash);\n        const bodyHash = Hash.copy(o._bodyHash);\n        const accountsHash = Hash.copy(o._accountsHash);\n        return new BlockHeader(\n            prevHash, interlinkHash, bodyHash, accountsHash,\n            o._nBits, o._height, o._timestamp, o._nonce, o._version\n        );\n    }\n\n    /**\n     * @param {Hash} prevHash\n     * @param {Hash} interlinkHash\n     * @param {Hash} bodyHash\n     * @param {Hash} accountsHash\n     * @param {number} nBits\n     * @param {number} height\n     * @param {number} timestamp\n     * @param {number} nonce\n     * @param {number} version\n     */\n    constructor(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version = BlockHeader.CURRENT_VERSION) {\n        if (!NumberUtils.isUint16(version)) throw 'Malformed version';\n        if (!Hash.isHash(prevHash)) throw 'Malformed prevHash';\n        if (!Hash.isHash(interlinkHash)) throw 'Malformed interlinkHash';\n        if (!Hash.isHash(bodyHash)) throw 'Malformed bodyHash';\n        if (!Hash.isHash(accountsHash)) throw 'Malformed accountsHash';\n        if (!NumberUtils.isUint32(nBits) || !BlockUtils.isValidCompact(nBits)) throw 'Malformed nBits';\n        if (!NumberUtils.isUint32(height)) throw 'Invalid height';\n        if (!NumberUtils.isUint32(timestamp)) throw 'Malformed timestamp';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        /** @type {number} */\n        this._version = version;\n        /** @type {Hash} */\n        this._prevHash = prevHash;\n        /** @type {Hash} */\n        this._interlinkHash = interlinkHash;\n        /** @type {Hash} */\n        this._bodyHash = bodyHash;\n        /** @type {Hash} */\n        this._accountsHash = accountsHash;\n        /** @type {number} */\n        this._nBits = nBits;\n        /** @type {number} */\n        this._height = height;\n        /** @type {number} */\n        this._timestamp = timestamp;\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockHeader}\n     */\n    static unserialize(buf) {\n        const version = buf.readUint16();\n        if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error(`Unsupported block version ${version}`);\n        const prevHash = Hash.unserialize(buf);\n        const interlinkHash = Hash.unserialize(buf);\n        const bodyHash = Hash.unserialize(buf);\n        const accountsHash = Hash.unserialize(buf);\n        const nBits = buf.readUint32();\n        const height = buf.readUint32();\n        const timestamp = buf.readUint32();\n        const nonce = buf.readUint32();\n        return new BlockHeader(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._version);\n        this._prevHash.serialize(buf);\n        this._interlinkHash.serialize(buf);\n        this._bodyHash.serialize(buf);\n        this._accountsHash.serialize(buf);\n        buf.writeUint32(this._nBits);\n        buf.writeUint32(this._height);\n        buf.writeUint32(this._timestamp);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*version*/ 2\n            + this._prevHash.serializedSize\n            + this._interlinkHash.serializedSize\n            + this._bodyHash.serializedSize\n            + this._accountsHash.serializedSize\n            + /*nBits*/ 4\n            + /*height*/ 4\n            + /*timestamp*/ 4\n            + /*nonce*/ 4;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<boolean>}\n     */\n    async verifyProofOfWork(buf) {\n        const pow = await this.pow(buf);\n        return BlockUtils.isProofOfWork(pow, this.target);\n    }\n\n    /**\n     * @param {BlockHeader} prevHeader\n     * @returns {boolean}\n     */\n    isImmediateSuccessorOf(prevHeader) {\n        // Check that the height is one higher than the previous height.\n        if (this.height !== prevHeader.height + 1) {\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this.timestamp < prevHeader.timestamp) {\n            return false;\n        }\n\n        // Check that the hash of the predecessor block equals prevHash.\n        const prevHash = prevHeader.hash();\n        if (!this.prevHash.equals(prevHash)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Hash}\n     */\n    hash(buf) {\n        this._hash = this._hash || Hash.light(this.serialize(buf));\n        return this._hash;\n    }\n    \n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<Hash>}\n     */\n    async pow(buf) {\n        this._pow = this._pow || await Hash.hard(this.serialize(buf));\n        return this._pow;\n    }\n\n    /**\n     * @param {BlockHeader|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockHeader\n            && this._prevHash.equals(o.prevHash)\n            && this._interlinkHash.equals(o.interlinkHash)\n            && this._bodyHash.equals(o.bodyHash)\n            && this._accountsHash.equals(o.accountsHash)\n            && this._nBits === o.nBits\n            && this._height === o.height\n            && this._timestamp === o.timestamp\n            && this._nonce === o.nonce;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return 'BlockHeader{'\n            + `prevHash=${this._prevHash}, `\n            + `interlinkHash=${this._interlinkHash}, `\n            + `bodyHash=${this._bodyHash}, `\n            + `accountsHash=${this._accountsHash}, `\n            + `nBits=${this._nBits.toString(16)}, `\n            + `height=${this._height}, `\n            + `timestamp=${this._timestamp}, `\n            + `nonce=${this._nonce}`\n            + '}';\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {Hash} */\n    get prevHash() {\n        return this._prevHash;\n    }\n\n    /** @type {Hash} */\n    get interlinkHash() {\n        return this._interlinkHash;\n    }\n\n    /** @type {Hash} */\n    get bodyHash() {\n        return this._bodyHash;\n    }\n\n    /** @type {Hash} */\n    get accountsHash() {\n        return this._accountsHash;\n    }\n\n    /** @type {number} */\n    get nBits() {\n        return this._nBits;\n    }\n\n    /** @type {number} */\n    get target() {\n        return BlockUtils.compactToTarget(this._nBits);\n    }\n\n    /** @type {number} */\n    get difficulty() {\n        return BlockUtils.compactToDifficulty(this._nBits);\n    }\n\n    /** @type {number} */\n    get height() {\n        return this._height;\n    }\n\n    /** @type {number} */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    // XXX The miner changes the nonce of an existing BlockHeader during the\n    // mining process.\n    /** @type {number} */\n    set nonce(n) {\n        this._nonce = n;\n        this._hash = null;\n        this._pow = null;\n    }\n}\n// FIXME: Clean up for mainnet.\nBlockHeader.Version = {\n    V1: 1\n};\nBlockHeader.CURRENT_VERSION = BlockHeader.Version.V1;\nBlockHeader.SUPPORTED_VERSIONS = [\n    BlockHeader.Version.V1\n];\nBlockHeader.SERIALIZED_SIZE = 146;\nClass.register(BlockHeader);\n","class BlockInterlink {\n    /**\n     * @param {BlockInterlink} o\n     * @returns {BlockInterlink}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const hashes = o._hashes.map(it => Hash.copy(it));\n        const repeatBits = new Uint8Array(o._repeatBits);\n        const compressed = o._compressed.map(it => Hash.copy(it));\n        return new BlockInterlink(hashes, undefined, repeatBits, compressed);\n    }\n\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} prevHash\n     * @returns {{repeatBits: Uint8Array, compressed: Array.<Hash>}}\n     * @protected\n     */\n    static _compress(hashes, prevHash) {\n        const count = hashes.length;\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = new Uint8Array(repeatBitsSize);\n\n        let lastHash = prevHash;\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const hash = hashes[i];\n            if (!hash.equals(lastHash)) {\n                compressed.push(hash);\n                lastHash = hash;\n            } else {\n                repeatBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return {repeatBits, compressed};\n    }\n\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} [prevHash]\n     * @param {Uint8Array} [repeatBits]\n     * @param {Array.<Hash>} [compressed]\n     */\n    constructor(hashes, prevHash, repeatBits, compressed) {\n        if (!Array.isArray(hashes) || !NumberUtils.isUint8(hashes.length)\n            || hashes.some(it => !(it instanceof Hash))) throw new Error('Malformed hashes');\n        if ((repeatBits || compressed) && !(repeatBits && compressed)) throw new Error('Malformed repeatBits/compressed');\n        if (!prevHash && !repeatBits) throw new Error('Either prevHash or repeatBits/compressed required');\n\n        if (!repeatBits) {\n            ({repeatBits, compressed} = BlockInterlink._compress(hashes, prevHash));\n        }\n\n        /** @type {Array.<Hash>} */\n        this._hashes = hashes;\n        /** @type {Uint8Array} */\n        this._repeatBits = repeatBits;\n        /** @type {Array.<Hash>} */\n        this._compressed = compressed;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash} prevHash\n     * @returns {BlockInterlink}\n     */\n    static unserialize(buf, prevHash) {\n        const count = buf.readUint8();\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = buf.read(repeatBitsSize);\n\n        let hash = prevHash;\n        const hashes = [];\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const repeated = (repeatBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            if (!repeated) {\n                hash = Hash.unserialize(buf);\n                compressed.push(hash);\n            }\n            hashes.push(hash);\n        }\n\n        return new BlockInterlink(hashes, prevHash, repeatBits, compressed);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._hashes.length);\n        buf.write(this._repeatBits);\n        for (const hash of this._compressed) {\n            hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return /*count*/ 1\n            + this._repeatBits.length\n            + this._compressed.reduce((sum, hash) => sum + hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {BlockInterlink|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockInterlink\n            && this._hashes.length === o._hashes.length\n            && this._hashes.every((hash, i) => hash.equals(o.hashes[i]));\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot([this._repeatBits, GenesisConfig.GENESIS_HASH, ...this._compressed]);\n        }\n        return this._hash;\n    }\n\n    /**\n     * @type {Array.<Hash>}\n     */\n    get hashes() {\n        return this._hashes;\n    }\n\n    /**\n     * @type {number}\n     */\n    get length() {\n        return this._hashes.length;\n    }\n}\nClass.register(BlockInterlink);\n","class BlockBody {\n    /**\n     * @param {Uint8Array} extraData\n     * @returns {number}\n     */\n    static getMetadataSize(extraData) {\n        return Address.SERIALIZED_SIZE\n            + /*extraDataLength*/ 1\n            + extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n    }\n\n    /**\n     * @param {Address} minerAddr\n     * @param {Array.<Transaction>} transactions\n     * @param {Uint8Array} [extraData]\n     * @param {Array.<PrunedAccount>} prunedAccounts\n     */\n    constructor(minerAddr, transactions, extraData = new Uint8Array(0), prunedAccounts = []) {\n        if (!(minerAddr instanceof Address)) throw 'Malformed minerAddr';\n        if (!Array.isArray(transactions) || transactions.some(it => !(it instanceof Transaction))) throw 'Malformed transactions';\n        if (!(extraData instanceof Uint8Array) || !NumberUtils.isUint8(extraData.byteLength)) throw 'Malformed extraData';\n\n        /** @type {Address} */\n        this._minerAddr = minerAddr;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n        /** @type {Array.<Transaction>} */\n        this._transactions = transactions;\n        /** @type {Array.<PrunedAccount>} */\n        this._prunedAccounts = prunedAccounts;\n        /** @type {Hash} */\n        this._hash = null;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BlockBody}\n     */\n    static unserialize(buf) {\n        const minerAddr = Address.unserialize(buf);\n        const extraDataLength = buf.readUint8();\n        const extraData = buf.read(extraDataLength);\n        const numTransactions = buf.readUint16();\n        const transactions = new Array(numTransactions);\n        for (let i = 0; i < numTransactions; i++) {\n            transactions[i] = Transaction.unserialize(buf);\n        }\n        const numPrunedAccounts = buf.readUint16();\n        const prunedAccounts = [];\n        for (let i = 0; i < numPrunedAccounts; i++) {\n            prunedAccounts.push(PrunedAccount.unserialize(buf));\n        }\n        return new BlockBody(minerAddr, transactions, extraData, prunedAccounts);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._minerAddr.serialize(buf);\n        buf.writeUint8(this._extraData.byteLength);\n        buf.write(this._extraData);\n        buf.writeUint16(this._transactions.length);\n        for (const tx of this._transactions) {\n            tx.serialize(buf);\n        }\n        buf.writeUint16(this._prunedAccounts.length);\n        for (const acc of this._prunedAccounts) {\n            acc.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        let size = this._minerAddr.serializedSize\n            + /*extraDataLength*/ 1\n            + this._extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n        for (const tx of this._transactions) {\n            size += tx.serializedSize;\n        }\n        size += this._prunedAccounts.reduce((sum, acc) => sum + acc.serializedSize, 0);\n        return size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verify() {\n        /** @type {Transaction} */\n        let previousTx = null;\n        for (const tx of this._transactions) {\n            // Ensure transactions are ordered and unique.\n            if (previousTx && previousTx.compareBlockOrder(tx) >= 0) {\n                Log.w(BlockBody, 'Invalid block - transactions not ordered.');\n                return false;\n            }\n            previousTx = tx;\n\n            // Check that all transactions are valid.\n            if (!tx.verify()) {\n                Log.w(BlockBody, 'Invalid block - invalid transaction');\n                return false;\n            }\n        }\n\n        let previousAcc = null;\n        for (const acc of this._prunedAccounts) {\n            // Ensure pruned accounts are ordered and unique.\n            if (previousAcc && previousAcc.compare(acc) >= 0) {\n                Log.w(BlockBody, 'Invalid block - pruned accounts not ordered.');\n                return false;\n            }\n            previousAcc = acc;\n            \n            // Check that pruned accounts are actually supposed to be pruned\n            if (!acc.account.isToBePruned()) {\n                Log.w(BlockBody, 'Invalid block - invalid pruned account');\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getMerkleLeafs() {\n        return [this._minerAddr, this._extraData, ...this._transactions, ...this.prunedAccounts];\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot(this.getMerkleLeafs());\n        }\n        return this._hash;\n    }\n\n    /**\n     * @param {BlockBody} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockBody\n            && this._minerAddr.equals(o.minerAddr)\n            && BufferUtils.equals(this._extraData, o.extraData)\n            && this._transactions.length === o.transactions.length\n            && this._transactions.every((tx, i) => tx.equals(o.transactions[i]));\n    }\n\n    /**\n     * @return {Array.<Address>}\n     */\n    getAddresses() {\n        const addresses = [this._minerAddr];\n        for (const tx of this._transactions) {\n            addresses.push(tx.sender, tx.recipient);\n        }\n        return addresses;\n    }\n\n    /** @type {Uint8Array} */\n    get extraData() {\n        return this._extraData;\n    }\n\n    /** @type {Address} */\n    get minerAddr() {\n        return this._minerAddr;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /** @type {number} */\n    get transactionCount() {\n        return this._transactions.length;\n    }\n\n    /** @type {Array.<PrunedAccount>} */\n    get prunedAccounts() {\n        return this._prunedAccounts;\n    }\n}\n\nClass.register(BlockBody);\n","class BlockUtils {\n    /**\n     * @param {number} compact\n     * @returns {number}\n     */\n    static compactToTarget(compact) {\n        return (compact & 0xffffff) * Math.pow(2, (8 * ((compact >> 24) - 3)));\n    }\n\n    /**\n     * @param {number} target\n     * @returns {number}\n     */\n    static targetToCompact(target) {\n        if (!Number.isFinite(target) || Number.isNaN(target)) throw 'Invalid Target';\n\n        // Divide to get first byte\n        let size = Math.max(Math.ceil(Math.log2(target) / 8), 1);\n        const firstByte = target / Math.pow(2, (size - 1) * 8);\n\n        // If the first (most significant) byte is greater than 127 (0x7f),\n        // prepend a zero byte.\n        if (firstByte >= 0x80) {\n            size++;\n        }\n\n        // The first byte of the 'compact' format is the number of bytes,\n        // including the prepended zero if it's present.\n        // The following three bytes are the first three bytes of the above\n        // representation. If less than three bytes are present, then one or\n        // more of the last bytes of the compact representation will be zero.\n        return (size << 24) + ((target / Math.pow(2, (size - 3) * 8)) & 0xffffff);\n    }\n\n    /**\n     * @param {number} target\n     * @returns {number}\n     */\n    static getTargetHeight(target) {\n        return Math.ceil(Math.log2(target));\n    }\n\n    /**\n     * @param {number} target\n     * @returns {number}\n     */\n    static getTargetDepth(target) {\n        return BlockUtils.getTargetHeight(Policy.BLOCK_TARGET_MAX) - BlockUtils.getTargetHeight(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {number}\n     */\n    static compactToDifficulty(compact) {\n        return Policy.BLOCK_TARGET_MAX / BlockUtils.compactToTarget(compact);\n    }\n\n    /**\n     * @param {number} difficulty\n     * @returns {number}\n     */\n    static difficultyToCompact(difficulty) {\n        return BlockUtils.targetToCompact(BlockUtils.difficultyToTarget(difficulty));\n    }\n\n    /**\n     * @param {number} difficulty\n     * @returns {number}\n     */\n    static difficultyToTarget(difficulty) {\n        return Policy.BLOCK_TARGET_MAX / difficulty;\n    }\n\n    /**\n     * @param {number} target\n     * @returns {number}\n     */\n    static targetToDifficulty(target) {\n        return Policy.BLOCK_TARGET_MAX / target;\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static hashToTarget(hash) {\n        return parseInt(hash.toHex(), 16);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static realDifficulty(hash) {\n        return BlockUtils.targetToDifficulty(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static getHashDepth(hash) {\n        return BlockUtils.getTargetDepth(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {number} target\n     * @returns {boolean}\n     */\n    static isProofOfWork(hash, target) {\n        return parseInt(hash.toHex(), 16) <= target;\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {boolean}\n     */\n\n    static isValidCompact(compact) {\n        return BlockUtils.isValidTarget(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {number} target\n     * @returns {boolean}\n     */\n    static isValidTarget(target) {\n        return target >= 1 && target <= Policy.BLOCK_TARGET_MAX;\n    }\n\n    /**\n     * @param {BlockHeader} headBlock\n     * @param {BlockHeader} tailBlock\n     * @param {number} deltaTotalDifficulty\n     * @returns {number}\n     */\n    static getNextTarget(headBlock, tailBlock, deltaTotalDifficulty) {\n        Assert.that(\n            (headBlock.height - tailBlock.height === Policy.DIFFICULTY_BLOCK_WINDOW)\n                || (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW && tailBlock.height === 1),\n            `Tail and head block must be ${Policy.DIFFICULTY_BLOCK_WINDOW} blocks apart`);\n\n        let actualTime = headBlock.timestamp - tailBlock.timestamp;\n\n        // Simulate that the Policy.BLOCK_TIME was achieved for the blocks before the genesis block, i.e. we simulate\n        // a sliding window that starts before the genesis block. Assume difficulty = 1 for these blocks.\n        if (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW) {\n            actualTime += (Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1) * Policy.BLOCK_TIME;\n            deltaTotalDifficulty += Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1;\n        }\n\n        // Compute the target adjustment factor.\n        const expectedTime = Policy.DIFFICULTY_BLOCK_WINDOW * Policy.BLOCK_TIME;\n        let adjustment = actualTime / expectedTime;\n\n        // Clamp the adjustment factor to [1 / MAX_ADJUSTMENT_FACTOR, MAX_ADJUSTMENT_FACTOR].\n        adjustment = Math.max(adjustment, 1 / Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n        adjustment = Math.min(adjustment, Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n\n        // Compute the next target.\n        const averageDifficulty = deltaTotalDifficulty / Policy.DIFFICULTY_BLOCK_WINDOW;\n        const averageTarget = BlockUtils.difficultyToTarget(averageDifficulty);\n        let nextTarget = averageTarget * adjustment;\n\n        // Make sure the target is below or equal the maximum allowed target (difficulty 1).\n        // Also enforce a minimum target of 1.\n        nextTarget = Math.min(nextTarget, Policy.BLOCK_TARGET_MAX);\n        nextTarget = Math.max(nextTarget, 1);\n\n        // XXX Reduce target precision to nBits precision.\n        const nBits = BlockUtils.targetToCompact(nextTarget);\n        return BlockUtils.compactToTarget(nBits);\n    }\n}\nClass.register(BlockUtils);\n","class Subscription {\n    /**\n     * @param {Array.<Address>} addresses\n     */\n    static fromAddresses(addresses) {\n        return new Subscription(Subscription.Type.ADDRESSES, addresses);\n    }\n\n    /**\n     * @param {number} addresses\n     */\n    static fromMinFeePerByte(minFeePerByte) {\n        return new Subscription(Subscription.Type.MIN_FEE, minFeePerByte);\n    }\n\n    /**\n     * @param {Subscription.Type} type\n     * @param {Array.<Address>|number} [filter]\n     */\n    constructor(type, filter=null) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Invalid type');\n        if (type === Subscription.Type.ADDRESSES\n            && (!Array.isArray(filter) || !NumberUtils.isUint16(filter.length)\n            || filter.some(it => !(it instanceof Address)))) throw new Error('Invalid addresses');\n        if (type === Subscription.Type.MIN_FEE && !NumberUtils.isUint64(filter)) throw new Error('Invalid minFeePerByte');\n        this._type = type;\n\n        this._addresses = new HashSet();\n        this._minFeePerByte = 0;\n\n        switch (type) {\n            case Subscription.Type.ADDRESSES:\n                this._addresses.addAll(filter);\n                break;\n            case Subscription.Type.MIN_FEE:\n                this._minFeePerByte = filter;\n                break;\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Subscription}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Subscription.Type} */ buf.readUint8();\n        let filter = null;\n        switch (type) {\n            case Subscription.Type.ADDRESSES: {\n                filter = [];\n                const size = buf.readUint16();\n                for (let i = 0; i < size; ++i) {\n                    filter.push(Address.unserialize(buf));\n                }\n                break;\n            }\n            case Subscription.Type.MIN_FEE:\n                filter = buf.readUint64();\n                break;\n        }\n        return new Subscription(type, filter);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        switch (this._type) {\n            case Subscription.Type.ADDRESSES:\n                buf.writeUint16(this._addresses.length);\n                for (const address of this._addresses) {\n                    address.serialize(buf);\n                }\n                break;\n            case Subscription.Type.MIN_FEE:\n                buf.writeUint64(this._minFeePerByte);\n                break;\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let additionalSize = 0;\n        switch (this._type) {\n            case Subscription.Type.ADDRESSES:\n                additionalSize = /*length*/ 2;\n                for (const address of this._addresses) {\n                    additionalSize += address.serializedSize;\n                }\n                break;\n            case Subscription.Type.MIN_FEE:\n                additionalSize = /*minFeePerByte*/ 8;\n                break;\n        }\n        return /*type*/ 1\n            + additionalSize;\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {boolean}\n     */\n    matchesBlock(block) {\n        switch (this._type) {\n            case Subscription.Type.NONE:\n                return false;\n            case Subscription.Type.ANY:\n            case Subscription.Type.ADDRESSES:\n            case Subscription.Type.MIN_FEE:\n                return true;\n            default:\n                throw new Error('Unknown type');\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    matchesTransaction(transaction) {\n        switch (this._type) {\n            case Subscription.Type.NONE:\n                return false;\n            case Subscription.Type.ANY:\n                return true;\n            case Subscription.Type.ADDRESSES:\n                return this._addresses.contains(transaction.recipient) || this._addresses.contains(transaction.sender);\n            case Subscription.Type.MIN_FEE:\n                return transaction.fee / transaction.serializedSize >= this._minFeePerByte;\n            default:\n                throw new Error('Unknown type');\n        }\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `Subscription{type=${this._type}, addresses=[${this._addresses.values()}], minFeePerByte=${this._minFeePerByte}}`;\n    }\n\n    /** @type {Subscription.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /** @type {Array.<Address>} */\n    get addresses() {\n        return this._addresses.values();\n    }\n\n    /** @type {number} */\n    get minFeePerByte() {\n        return this._minFeePerByte;\n    }\n}\n/** @enum {number} */\nSubscription.Type = {\n    NONE: 0,\n    ANY: 1,\n    ADDRESSES: 2,\n    MIN_FEE: 3\n};\nSubscription.NONE = new Subscription(Subscription.Type.NONE);\nSubscription.BLOCKS_ONLY = new Subscription(Subscription.Type.ADDRESSES, []);\nSubscription.ANY = new Subscription(Subscription.Type.ANY);\nClass.register(Subscription);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n","class TransactionsProof {\n    /**\n     * @param {Array.<Transaction>} transactions\n     * @param {MerkleProof} proof\n     */\n    constructor(transactions, proof) {\n        if (!Array.isArray(transactions) || !NumberUtils.isUint16(transactions.length)\n            || transactions.some(it => !(it instanceof Transaction))) throw new Error('Malformed transactions');\n        if (!(proof instanceof MerkleProof)) throw new Error('Malformed merkle proof');\n\n        /** @type {Array.<Transaction>} */\n        this._transactions = transactions;\n        /** @type {MerkleProof} */\n        this._proof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {TransactionsProof}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint16();\n        const transactions = [];\n        for (let i = 0; i < count; ++i) {\n            transactions.push(Transaction.unserialize(buf));\n        }\n        const proof = MerkleProof.unserialize(buf);\n        return new TransactionsProof(transactions, proof);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._transactions.length);\n        for (const transaction of this._transactions) {\n            transaction.serialize(buf);\n        }\n        this._proof.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*count*/ 2\n            + this._transactions.reduce((sum, transaction) => sum + transaction.serializedSize, 0)\n            + this._proof.serializedSize;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `TransactionsProof{length=${this.length}}`;\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    root() {\n        return this._proof.computeRoot(this._transactions);\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._transactions.length;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /** @type {MerkleProof} */\n    get proof() {\n        return this._proof;\n    }\n}\nClass.register(TransactionsProof);\n","class TransactionCache {\n    /**\n     * @param {Iterable.<Transaction>} [transactions]\n     * @param {Array.<Block>} [blockOrder]\n     */\n    constructor(transactions = [], blockOrder = []) {\n        /** @type {HashSet.<Transaction>} */\n        this._transactions = new HashSet(tx => tx.hash().toBase64());\n        this._transactions.addAll(transactions);\n        /** @type {Array.<Block>} */\n        this._blockOrder = blockOrder;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    containsTransaction(transaction) {\n        return this._transactions.contains(transaction);\n    }\n\n    /**\n     * @param {Block} block\n     */\n    pushBlock(block) {\n        this._blockOrder.push(block);\n        this._transactions.addAll(block.transactions);\n\n        if (this._blockOrder.length > Policy.TRANSACTION_VALIDITY_WINDOW) {\n            this.shiftBlock();\n        }\n    }\n\n    shiftBlock() {\n        const block = this._blockOrder.shift();\n        if (block) {\n            this._transactions.removeAll(block.transactions);\n        }\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {number}\n     */\n    revertBlock(block) {\n        if (this._transactions.isEmpty()) {\n            return this.missingBlocks;\n        }\n\n        const blockFromOrder = this._blockOrder.pop();\n        Assert.that(blockFromOrder.equals(block), 'Invalid block to revert');\n        if (block) {\n            this._transactions.removeAll(block.transactions);\n        }\n\n        return this.missingBlocks;\n    }\n\n    /**\n     * @param {Array.<Block>} blocks\n     */\n    prependBlocks(blocks) {\n        if (blocks.length + this._blockOrder.length > Policy.TRANSACTION_VALIDITY_WINDOW) {\n            throw new Error('Exceeding transaction cache size');\n        }\n        this._blockOrder.unshift(...blocks);\n        blocks.forEach(b => this._transactions.addAll(b.transactions));\n    }\n\n    /** @type {number} */\n    get missingBlocks() {\n        return Policy.TRANSACTION_VALIDITY_WINDOW - this._blockOrder.length;\n    }\n\n    /** @type {HashSet.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n     * @returns {TransactionCache}\n     */\n    clone() {\n        return new TransactionCache(/** @type {Iterable.<Transaction>} */ this._transactions, this._blockOrder.slice());\n    }\n}\nClass.register(TransactionCache);\n","class TransactionStoreEntry {\n    /**\n     * @param {Hash} transactionHash\n     * @param {Address} sender\n     * @param {Address} recipient\n     * @param {number} blockHeight\n     * @param {Hash} blockHash\n     * @param {number} index\n     */\n    constructor(transactionHash, sender, recipient, blockHeight, blockHash, index) {\n        this._transactionHash = transactionHash;\n        this._sender = sender;\n        this._recipient = recipient;\n        this._blockHeight = blockHeight;\n        this._blockHash = blockHash;\n        this._index = index;\n        this.senderBuffer = this._sender.serialize();\n        this.recipientBuffer = this._recipient.serialize();\n        this.transactionHashBuffer = this._transactionHash.serialize();\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Array.<TransactionStoreEntry>}\n     */\n    static fromBlock(block) {\n        const blockHash = block.hash();\n        /** @type {Array.<TransactionStoreEntry>} */\n        const entries = [];\n        for (let i = 0; i < block.transactions.length; ++i) {\n            const transaction = block.transactions[i];\n            entries.push(new TransactionStoreEntry(transaction.hash(), transaction.sender, transaction.recipient, block.height, blockHash, i));\n        }\n        return entries;\n    }\n\n    /**\n     * @param {string} id\n     * @param {{transactionHashBuffer: Uint8Array, senderBuffer: Uint8Array, recipientBuffer: Uint8Array, blockHeight: number, blockHash: string, index: number}} o\n     * @returns {TransactionStoreEntry}\n     */\n    static fromJSON(id, o) {\n        return new TransactionStoreEntry(\n            Hash.unserialize(new SerialBuffer(o.transactionHashBuffer)),\n            Address.unserialize(new SerialBuffer(o.senderBuffer)),\n            Address.unserialize(new SerialBuffer(o.recipientBuffer)),\n            o.blockHeight,\n            Hash.fromBase64(o.blockHash),\n            o.index\n        );\n    }\n\n    /**\n     * @returns {{transactionHashBuffer: Uint8Array, senderBuffer: Uint8Array, recipientBuffer: Uint8Array, blockHeight: number, blockHash: string, index: number}}\n     */\n    toJSON() {\n        return {\n            transactionHashBuffer: this.transactionHashBuffer,\n            senderBuffer: this.senderBuffer,\n            recipientBuffer: this.recipientBuffer,\n            blockHeight: this.blockHeight,\n            blockHash: this.blockHash.toBase64(),\n            index: this.index\n        };\n    }\n\n    /** @type {Hash} */\n    get transactionHash() {\n        return this._transactionHash;\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {number} */\n    get blockHeight() {\n        return this._blockHeight;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n\n    /** @type {number} */\n    get index() {\n        return this._index;\n    }\n}\nClass.register(TransactionStoreEntry);\n","class TransactionStore {\n    /**\n     * @param {JungleDB} jdb\n     */\n    static initPersistent(jdb) {\n        // TODO: NUMBER_ENCODING in LMDB stores 32bit integers. This will only be safe for the next ~11 years assuming only full blocks.\n        jdb.deleteObjectStore('Transactions', {upgradeCondition: oldVersion => oldVersion < 4, indexNames: ['sender', 'recipient']}); // New transaction store layout starting in ConsensusDB 4\n        const store = jdb.createObjectStore('Transactions', { codec: new TransactionStoreCodec(), keyEncoding: JDB.JungleDB.NUMBER_ENCODING });\n        store.createIndex('sender', ['senderBuffer'], { keyEncoding: JDB.JungleDB.BINARY_ENCODING });\n        store.createIndex('recipient', ['recipientBuffer'], { keyEncoding: JDB.JungleDB.BINARY_ENCODING });\n        store.createIndex('transactionHash', ['transactionHashBuffer'], { keyEncoding: JDB.JungleDB.BINARY_ENCODING, unique: true });\n    }\n\n    /**\n     * @param {JungleDB} jdb\n     * @returns {TransactionStore}\n     */\n    static getPersistent(jdb) {\n        return new TransactionStore(jdb.getObjectStore('Transactions'));\n    }\n\n    /**\n     * @returns {TransactionStore}\n     */\n    static createVolatile() {\n        const store = JDB.JungleDB.createVolatileObjectStore();\n        store.createIndex('sender', ['senderBuffer']);\n        store.createIndex('recipient', ['recipientBuffer']);\n        store.createIndex('transactionHash', ['transactionHashBuffer'], { unique: true });\n        return new TransactionStore(store);\n    }\n\n    /**\n     * @param {IObjectStore} store\n     */\n    constructor(store) {\n        this._store = store;\n    }\n\n    /**\n     * @param {JDB.Transaction} [tx]\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _currentId(tx) {\n        tx = tx || this._store;\n        return (await tx.maxKey()) || 0;\n    }\n\n    /**\n     * @param {Hash} transactionHash\n     * @param {JDB.Transaction} [tx]\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _idForHash(transactionHash, tx) {\n        tx = tx || this._store;\n        const index = tx.index('transactionHash');\n        const result = await index.keys(JDB.KeyRange.only(transactionHash.serialize()));\n        // Should only contain one result due to unique constraint\n        for (const id of result) {\n            return id;\n        }\n        return null;\n    }\n\n    /**\n     * @param {Hash} transactionHash\n     * @returns {Promise.<TransactionStoreEntry>}\n     */\n    async get(transactionHash) {\n        const index = this._store.index('transactionHash');\n        const result = await index.values(JDB.KeyRange.only(transactionHash.serialize()));\n        return result && result.length > 0 ? result[0] : null;\n    }\n\n    /**\n     * @param {Address} sender\n     * @param {number} [limit]\n     * @returns {Promise.<Array.<TransactionStoreEntry>>}\n     */\n    async getBySender(sender, limit = null) {\n        const index = this._store.index('sender');\n        const entries = [];\n        await index.valueStream((value, key) => {\n            if (limit !== null && entries.length >= limit) return false;\n            entries.push(value);\n            return true;\n        }, /*ascending*/ false, JDB.KeyRange.only(sender.serialize()));\n        return entries;\n    }\n\n    /**\n     * @param {Address} recipient\n     * @param {number} [limit]\n     * @returns {Promise.<Array.<TransactionStoreEntry>>}\n     */\n    async getByRecipient(recipient, limit = null) {\n        const index = this._store.index('recipient');\n        const entries = [];\n        await index.valueStream((value, key) => {\n            if (limit !== null && entries.length >= limit) return false;\n            entries.push(value);\n            return true;\n        }, /*ascending*/ false, JDB.KeyRange.only(recipient.serialize()));\n        return entries;\n    }\n\n    /**\n     * @override\n     * @param {Block} block\n     * @returns {Promise}\n     */\n    async put(block) {\n        const indexedTransactions = TransactionStoreEntry.fromBlock(block);\n        const tx = this._store.transaction();\n        let currentId = await this._currentId(tx);\n        for (const indexedTransaction of indexedTransactions) {\n            currentId++;\n            tx.putSync(currentId, indexedTransaction);\n        }\n        return tx.commit();\n    }\n\n    /**\n     * @override\n     * @param {Block} block\n     * @returns {Promise}\n     */\n    async remove(block) {\n        const tx = this._store.transaction();\n        for (const transaction of block.transactions) {\n            tx.removeSync(await this._idForHash(transaction.hash(), tx));  // eslint-disable-line no-await-in-loop\n        }\n        return tx.commit();\n    }\n\n    /**\n     * @param {TransactionStore} [tx]\n     * @returns {TransactionStore}\n     */\n    snapshot(tx) {\n        const snapshot = this._store.snapshot();\n        if (tx) {\n            snapshot.inherit(tx._store);\n        }\n        return new TransactionStore(snapshot);\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {TransactionStore}\n     */\n    transaction(enableWatchdog = true) {\n        const tx = this._store.transaction(enableWatchdog);\n        return new TransactionStore(tx);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    truncate() {\n        return this._store.truncate();\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    commit() {\n        return this._store.commit();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    abort() {\n        return this._store.abort();\n    }\n\n    /** @type {Transaction} */\n    get tx() {\n        if (this._store instanceof JDB.Transaction) {\n            return this._store;\n        }\n        return undefined;\n    }\n}\nClass.register(TransactionStore);\n\n/**\n * @implements {ICodec}\n */\nclass TransactionStoreCodec {\n    /**\n     * @param {*} obj The object to encode before storing it.\n     * @returns {*} Encoded object.\n     */\n    encode(obj) {\n        return obj.toJSON();\n    }\n\n    /**\n     * @param {*} obj The object to decode.\n     * @param {string} key The object's primary key.\n     * @returns {*} Decoded object.\n     */\n    decode(obj, key) {\n        return TransactionStoreEntry.fromJSON(key, obj);\n    }\n\n    /**\n     * @type {{encode: function(val:*):*, decode: function(val:*):*, buffer: boolean, type: string}|void}\n     */\n    get valueEncoding() {\n        return JDB.JungleDB.JSON_ENCODING;\n    }\n}\n","class TransactionReceipt {\n    /**\n     * @param {Hash} transactionHash\n     * @param {Hash} blockHash\n     * @param {number} blockHeight\n     */\n    constructor(transactionHash, blockHash, blockHeight) {\n        this._transactionHash = transactionHash;\n        this._blockHash = blockHash;\n        this._blockHeight = blockHeight;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {TransactionReceipt}\n     */\n    static unserialize(buf) {\n        const transactionHash = Hash.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const blockHeight = buf.readUint32();\n        return new TransactionReceipt(transactionHash, blockHash, blockHeight);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._transactionHash.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeUint32(this._blockHeight);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._transactionHash.serializedSize\n            + this._blockHash.serializedSize\n            + /*blockHeight*/ 4;\n    }\n\n    /** @type {Hash} */\n    get transactionHash() {\n        return this._transactionHash;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n\n    /** @type {number} */\n    get blockHeight() {\n        return this._blockHeight;\n    }\n}\nClass.register(TransactionReceipt);\n","class Block {\n    /**\n     * @param {Block} o\n     * @returns {Block}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new Block(\n            BlockHeader.copy(o._header),\n            BlockInterlink.copy(o._interlink),\n            BlockBody.copy(o._body)\n        );\n    }\n\n    /**\n     * @param {BlockHeader} header\n     * @param {BlockInterlink} interlink\n     * @param {BlockBody} [body]\n     */\n    constructor(header, interlink, body) {\n        if (!(header instanceof BlockHeader)) throw 'Malformed header';\n        if (!(interlink instanceof BlockInterlink)) throw 'Malformed interlink';\n        if (body && !(body instanceof BlockBody)) throw 'Malformed body';\n\n        /** @type {BlockHeader} */\n        this._header = header;\n        /** @type {BlockInterlink} */\n        this._interlink = interlink;\n        /** @type {BlockBody} */\n        this._body = body;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Block}\n     */\n    static unserialize(buf) {\n        const header = BlockHeader.unserialize(buf);\n        const interlink = BlockInterlink.unserialize(buf, header.prevHash);\n\n        let body = undefined;\n        const bodyPresent = buf.readUint8();\n        if (bodyPresent) {\n            body = BlockBody.unserialize(buf);\n        }\n\n        return new Block(header, interlink, body);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._header.serialize(buf);\n        this._interlink.serialize(buf);\n\n        if (this._body) {\n            buf.writeUint8(1);\n            this._body.serialize(buf);\n        } else {\n            buf.writeUint8(0);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._header.serializedSize\n            + this._interlink.serializedSize\n            + /*bodyPresent*/ 1\n            + (this._body ? this._body.serializedSize : 0);\n    }\n\n    /**\n     * @param {Time} time\n     * @returns {Promise.<boolean>}\n     */\n    async verify(time) {\n        if (this._valid === undefined) {\n            if (this.isLight() || this.body.transactions.length < 150 || !IWorker.areWorkersAsync) {\n                // worker overhead doesn't pay off for small transaction numbers\n                this._valid = await this._verify(time.now());\n            } else {\n                const transactionValid = this.body.transactions.map(t => t._valid);\n                const worker = await CryptoWorker.getInstanceAsync();\n                const {valid, pow, interlinkHash, bodyHash} = await worker.blockVerify(this.serialize(),\n                    transactionValid, time.now(), GenesisConfig.GENESIS_HASH.serialize(), GenesisConfig.NETWORK_ID);\n                this._valid = valid;\n                this.header._pow = Hash.unserialize(new SerialBuffer(pow));\n                this.interlink._hash = Hash.unserialize(new SerialBuffer(interlinkHash));\n                this.body._hash = Hash.unserialize(new SerialBuffer(bodyHash));\n            }\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} timeNow\n     * @returns {Promise.<boolean>}\n     */\n    async _verify(timeNow) {\n        // Check that the timestamp is not too far into the future.\n        if (this._header.timestamp * 1000 > timeNow + Block.TIMESTAMP_DRIFT_MAX * 1000) {\n            Log.w(Block, 'Invalid block - timestamp too far in the future');\n            return false;\n        }\n\n        // Check that the header hash matches the difficulty.\n        if (!(await this._header.verifyProofOfWork())) {\n            Log.w(Block, 'Invalid block - PoW verification failed');\n            return false;\n        }\n\n        // Check that the maximum block size is not exceeded.\n        if (this.serializedSize > Policy.BLOCK_SIZE_MAX) {\n            Log.w(Block, 'Invalid block - max block size exceeded');\n            return false;\n        }\n\n        // Verify that the interlink is valid.\n        if (!this._verifyInterlink()) {\n            return false;\n        }\n\n        // XXX Verify the body only if it is present.\n        if (this.isFull() && !this._verifyBody()) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyInterlink() {\n        // Skip check for genesis block due to the cyclic dependency (since the interlink hash contains the genesis block hash).\n        if (this.height === 1 && this._header.interlinkHash.equals(new Hash(null))) {\n            return true;\n        }\n\n        // Check that the interlinkHash given in the header matches the actual interlinkHash.\n        const interlinkHash = this._interlink.hash();\n        if (!this._header.interlinkHash.equals(interlinkHash)) {\n            Log.w(Block, 'Invalid block - interlink hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyBody() {\n        // Check that the body is valid.\n        if (!this._body.verify()) {\n            return false;\n        }\n\n        // Check that bodyHash given in the header matches the actual body hash.\n        const bodyHash = this._body.hash();\n        if (!this._header.bodyHash.equals(bodyHash)) {\n            Log.w(Block, 'Invalid block - body hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isImmediateSuccessorOf(predecessor) {\n        // Check the header.\n        if (!this._header.isImmediateSuccessorOf(predecessor.header)) {\n            return false;\n        }\n\n        // Check that the interlink is correct.\n        const interlink = await predecessor.getNextInterlink(this.target, this.version);\n        if (!this._interlink.equals(interlink)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isInterlinkSuccessorOf(predecessor) {\n        // Check that the height is higher than the predecessor's.\n        if (this._header.height <= predecessor.header.height) {\n            Log.v(Block, 'No interlink successor - height');\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this._header.timestamp < predecessor.header.timestamp) {\n            Log.v(Block, 'No interlink successor - timestamp');\n            return false;\n        }\n\n        // Check that the predecessor is contained in this block's interlink and verify its position.\n        const prevHash = predecessor.hash();\n        if (!GenesisConfig.GENESIS_HASH.equals(prevHash)) {\n            const prevPow = await predecessor.pow();\n            const targetHeight = BlockUtils.getTargetHeight(this.target);\n            let blockFound = false;\n\n            let depth = 0;\n            for (; depth < this._interlink.length; depth++) {\n                if (prevHash.equals(this._interlink.hashes[depth])) {\n                    blockFound = true;\n                    if (!BlockUtils.isProofOfWork(prevPow, Math.pow(2, targetHeight - depth))) {\n                        Log.v(Block, 'No interlink successor - invalid position in interlink');\n                        return false;\n                    }\n                }\n            }\n\n            if (!blockFound) {\n                Log.v(Block, 'No interlink successor - not in interlink');\n                return false;\n            }\n        }\n\n        // If the predecessor happens to be the immediate predecessor, check additionally:\n        // - that the height of the successor is one higher\n        // - that the interlink is correct.\n        if (this._header.prevHash.equals(prevHash)) {\n            if (this._header.height !== predecessor.header.height + 1) {\n                Log.v(Block, 'No interlink successor - immediate height');\n                return false;\n            }\n\n            const interlink = await predecessor.getNextInterlink(this.target, this.version);\n            const interlinkHash = interlink.hash();\n            if (!this._header.interlinkHash.equals(interlinkHash)) {\n                Log.v(Block, 'No interlink successor - immediate interlink');\n                return false;\n            }\n        }\n        // Otherwise, if the prevHash doesn't match but the blocks should be adjacent according to their height fields,\n        // this cannot be a valid successor of predecessor.\n        else if (this._header.height === predecessor.height.height + 1) {\n            Log.v(Block, 'No interlink successor - immediate height (2)');\n            return false;\n        }\n        // Otherwise, check that the interlink construction is valid given the information we have.\n        else {\n            // TODO Take different targets into account.\n\n            // The number of new blocks in the interlink is bounded by the height difference.\n            /** @type {HashSet.<Hash>} */\n            const hashes = new HashSet();\n            hashes.addAll(this._interlink.hashes);\n            hashes.removeAll(predecessor.interlink.hashes);\n            if (hashes.length > this._header.height - predecessor.header.height) {\n                Log.v(Block, 'No interlink successor - too many new blocks');\n                return false;\n            }\n\n            // Check that the interlink is not too short.\n            const thisDepth = BlockUtils.getTargetDepth(this.target);\n            const prevDepth = BlockUtils.getTargetDepth(predecessor.target);\n            const depthDiff = thisDepth - prevDepth;\n            if (this._interlink.length < predecessor.interlink.length - depthDiff) {\n                Log.v(Block, 'No interlink successor - interlink too short');\n                return false;\n            }\n\n            // If the same block is found in both interlinks, all blocks at lower depths must be the same in both interlinks.\n            let commonBlock = false;\n            const thisInterlink = this._interlink.hashes;\n            const prevInterlink = predecessor.interlink.hashes;\n            for (let i = 1; i < prevInterlink.length && i - depthDiff < thisInterlink.length; i++) {\n                if (prevInterlink[i].equals(thisInterlink[i - depthDiff])) {\n                    commonBlock = true;\n                }\n                else if (commonBlock) {\n                    Log.v(Block, 'No interlink successor - invalid common suffix');\n                    return false;\n                }\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isSuccessorOf(predecessor) {\n        // TODO Improve this! Lots of duplicate checks.\n        return (await this.isImmediateSuccessorOf(predecessor)) || (await this.isInterlinkSuccessorOf(predecessor));\n    }\n\n    /**\n     * @param {number} nextTarget\n     * @param {number} [nextVersion]\n     * @returns {Promise.<BlockInterlink>}\n     */\n    async getNextInterlink(nextTarget, nextVersion = BlockHeader.CURRENT_VERSION) {\n        /** @type {Array.<Hash>} */\n        const hashes = [];\n        const hash = this.hash();\n\n        // Compute how many times this blockHash should be included in the next interlink.\n        const thisPowDepth = BlockUtils.getHashDepth(await this.pow());\n        const nextTargetDepth = BlockUtils.getTargetDepth(nextTarget);\n        const numOccurrences = Math.max(thisPowDepth - nextTargetDepth + 1, 0);\n\n        // Push this blockHash numOccurrences times onto the next interlink.\n        for (let i = 0; i < numOccurrences; i++) {\n            hashes.push(hash);\n        }\n\n        // Compute how many blocks to omit from the beginning of this interlink.\n        const thisTargetDepth = BlockUtils.getTargetDepth(this.target);\n        const targetOffset = nextTargetDepth - thisTargetDepth;\n        const interlinkOffset = numOccurrences + targetOffset;\n\n        // Push the remaining hashes from this interlink.\n        for (let i = interlinkOffset; i < this.interlink.length; i++) {\n            hashes.push(this.interlink.hashes[i]);\n        }\n        \n        return new BlockInterlink(hashes, hash);\n    }\n\n    /**\n     * @param {Block|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Block\n            && this._header.equals(o._header)\n            && this._interlink.equals(o._interlink)\n            && (this._body ? this._body.equals(o._body) : !o._body);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLight() {\n        return !this._body;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFull() {\n        return !!this._body;\n    }\n\n    /**\n     * @returns {Block}\n     */\n    toLight() {\n        return this.isLight() ? this : new Block(this._header, this._interlink);\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @returns {Block}\n     */\n    toFull(body) {\n        return this.isFull() ? this : new Block(this._header, this._interlink, body);\n    }\n\n    /**\n     * @type {BlockHeader}\n     */\n    get header() {\n        return this._header;\n    }\n\n    /**\n     * @type {BlockInterlink}\n     */\n    get interlink() {\n        return this._interlink;\n    }\n\n    /**\n     * @type {BlockBody}\n     */\n    get body() {\n        if (this.isLight()) {\n            throw 'Cannot access body of light block';\n        }\n        return this._body;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get version() {\n        return this._header.version;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get prevHash() {\n        return this._header.prevHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get bodyHash() {\n        return this._header.bodyHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get accountsHash() {\n        return this._header.accountsHash;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nBits() {\n        return this._header.nBits;\n    }\n\n    /**\n     * @type {number}\n     */\n    get target() {\n        return this._header.target;\n    }\n\n    /**\n     * @type {number}\n     */\n    get difficulty() {\n        return this._header.difficulty;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this._header.height;\n    }\n    \n    /**\n     * @type {number}\n     */\n    get timestamp() {\n        return this._header.timestamp;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nonce() {\n        return this._header.nonce;\n    }\n\n    /**\n     * @type {Address}\n     */\n    get minerAddr() {\n        return this._body.minerAddr;\n    }\n\n    /**\n     * @type {Array.<Transaction>}\n     */\n    get transactions() {\n        return this._body.transactions;\n    }\n\n    /**\n     * @type {number}\n     */\n    get transactionCount() {\n        return this._body.transactionCount;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Hash}\n     */\n    hash(buf) {\n        return this._header.hash(buf);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Promise.<Hash>}\n     */\n    pow(buf) {\n        return this._header.pow(buf);\n    }\n\n}\nBlock.TIMESTAMP_DRIFT_MAX = 600 /* seconds */; // 10 minutes\nClass.register(Block);\n","/**\n * @interface\n */\nclass IBlockchain extends Observable {\n    /**\n     * @abstract\n     * @type {Block}\n     */\n    get head() {}\n\n    /**\n     * @abstract\n     * @type {Hash}\n     */\n    get headHash() {}\n\n    /**\n     * @abstract\n     * @type {number}\n     */\n    get height() {}\n}\nClass.register(IBlockchain);\n","/**\n * @abstract\n */\nclass BaseChain extends IBlockchain {\n    /**\n     * @param {ChainDataStore} store\n     */\n    constructor(store) {\n        super();\n        this._store = store;\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?Block>}\n     */\n    async getBlock(hash, includeForks = false, includeBody = false) {\n        const chainData = await this._store.getChainData(hash, includeBody);\n        return chainData && (chainData.onMainChain || includeForks) ? chainData.head : null;\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @returns {Promise.<?Uint8Array>}\n     */\n    getRawBlock(hash, includeForks = false) {\n        return this._store.getRawBlock(hash, includeForks);\n    }\n\n    /**\n     * @param {number} height\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?Block>}\n     */\n    getBlockAt(height, includeBody = false) {\n        return this._store.getBlockAt(height, includeBody) || null;\n    }\n\n    /**\n     * @param {number} height\n     * @param {boolean} [lower]\n     * @returns {Promise.<?Block>}\n     */\n    getNearestBlockAt(height, lower = true) {\n        return this._store.getNearestBlockAt(height, lower) || null;\n    }\n\n    /**\n     * @returns {Promise.<Array.<Hash>>}\n     */\n    async getBlockLocators() {\n        // Push top 10 hashes first, then back off exponentially.\n        /** @type {Array.<Hash>} */\n        const locators = [this.headHash];\n\n        let block = this.head;\n        for (let i = Math.min(10, this.height) - 1; i > 0; i--) {\n            if (!block) {\n                break;\n            }\n            locators.push(block.prevHash);\n            block = await this.getBlock(block.prevHash); // eslint-disable-line no-await-in-loop\n        }\n\n        let step = 2;\n        for (let i = this.height - 10 - step; i > 0; i -= step) {\n            block = await this.getBlockAt(i); // eslint-disable-line no-await-in-loop\n            if (block) {\n                locators.push(await block.hash()); // eslint-disable-line no-await-in-loop\n            }\n            step *= 2;\n        }\n\n        // Push the genesis block hash.\n        if (locators.length === 0 || !locators[locators.length - 1].equals(GenesisConfig.GENESIS_HASH)) {\n            locators.push(GenesisConfig.GENESIS_HASH);\n        }\n\n        return locators;\n    }\n\n    /**\n     * Computes the target value for the block after the given block or the head of this chain if no block is given.\n     * @param {Block} [block]\n     * @returns {Promise.<number>}\n     */\n    async getNextTarget(block) {\n        /** @type {ChainData} */\n        let headData;\n        if (block) {\n            const hash = block.hash();\n            headData = await this._store.getChainData(hash);\n            Assert.that(!!headData);\n        } else {\n            block = this.head;\n            headData = this._mainChain;\n        }\n\n        // Retrieve the timestamp of the block that appears DIFFICULTY_BLOCK_WINDOW blocks before the given block in the chain.\n        // The block might not be on the main chain.\n        const tailHeight = Math.max(block.height - Policy.DIFFICULTY_BLOCK_WINDOW, 1);\n        /** @type {ChainData} */\n        let tailData;\n        if (headData.onMainChain) {\n            tailData = await this._store.getChainDataAt(tailHeight);\n        } else {\n            let prevData = headData;\n            for (let i = 0; i < Policy.DIFFICULTY_BLOCK_WINDOW && !prevData.onMainChain; i++) {\n                prevData = await this._store.getChainData(prevData.head.prevHash);\n                if (!prevData) {\n                    // Not enough blocks are available to compute the next target, fail.\n                    return -1;\n                }\n            }\n\n            if (prevData.onMainChain && prevData.head.height > tailHeight) {\n                tailData = await this._store.getChainDataAt(tailHeight);\n            } else {\n                tailData = prevData;\n            }\n        }\n\n        if (!tailData || tailData.totalDifficulty < 1) {\n            // Not enough blocks are available to compute the next target, fail.\n            return -1;\n        }\n\n        const deltaTotalDifficulty = headData.totalDifficulty - tailData.totalDifficulty;\n        return BlockUtils.getNextTarget(headData.head.header, tailData.head.header, deltaTotalDifficulty);\n    }\n\n\n\n    /* NIPoPoW Prover functions */\n\n    /**\n     * MUST be synchronized with .pushBlock() and variants!\n     * @returns {Promise.<ChainProof>}\n     * @protected\n     */\n    _getChainProof() {\n        return this._prove(Policy.M, Policy.K, Policy.DELTA);\n    }\n\n    /**\n     * The \"Prove\" algorithm from the NIPoPow paper.\n     * @param {number} m\n     * @param {number} k\n     * @param {number} delta\n     * @returns {Promise.<ChainProof>}\n     * @private\n     */\n    async _prove(m, k, delta) {\n        Assert.that(m >= 1, 'm must be >= 1');\n        Assert.that(delta > 0, 'delta must be > 0');\n        let prefix = new BlockChain([]);\n\n        // B <- C[0]\n        let startHeight = 1;\n\n        /** @type {ChainData} */\n        const headData = await this._store.getChainDataAt(Math.max(this.height - k, 1)); // C[-k]\n        const maxDepth = headData.superBlockCounts.getCandidateDepth(m);\n\n        // for mu = |C[-k].interlink| down to 0 do\n        for (let depth = maxDepth; depth >= 0; depth--) {\n            // alpha = C[:-k]{B:}|^mu\n            /** @type {Array.<ChainData>} */\n            const alpha = await this._getSuperChain(depth, headData, startHeight); // eslint-disable-line no-await-in-loop\n\n            // pi = pi (union) alpha\n            prefix = BlockChain.merge(prefix, new BlockChain(alpha.map(data => data.head.toLight())));\n\n            // if good_(delta,m)(C, alpha, mu) then\n            if (BaseChain._isGoodSuperChain(alpha, depth, m, delta)) {\n                Assert.that(alpha.length >= m, `Good superchain expected to be at least ${m} long`);\n                Log.v(BaseChain, () => `Found good superchain at depth ${depth} with length ${alpha.length} (#${startHeight} - #${headData.head.height})`);\n                // B <- alpha[-m]\n                startHeight = alpha[alpha.length - m].head.height;\n            }\n        }\n\n        // X <- C[-k:]\n        const suffix = await this._getHeaderChain(this.height - headData.head.height);\n\n        // return piX\n        return new ChainProof(prefix, suffix);\n    }\n\n    /**\n     * @param {number} depth\n     * @param {ChainData} headData\n     * @param {number} [tailHeight]\n     * @returns {Promise.<Array.<ChainData>>}\n     * @private\n     */\n    async _getSuperChain(depth, headData, tailHeight = 1) {\n        Assert.that(tailHeight >= 1, 'tailHeight must be >= 1');\n        /** @type {Array.<ChainData>} */\n        const chain = [];\n\n        // Include head if it is at the requested depth or below.\n        const headDepth = BlockUtils.getHashDepth(await headData.head.pow());\n        if (headDepth >= depth) {\n            chain.push(headData);\n        }\n\n        // Follow the interlink pointers back at the requested depth.\n        /** @type {ChainData} */\n        let chainData = headData;\n        let j = Math.max(depth - BlockUtils.getTargetDepth(chainData.head.target), -1);\n        while (j < chainData.head.interlink.hashes.length && chainData.head.height > tailHeight) {\n            const reference = j < 0 ? chainData.head.prevHash : chainData.head.interlink.hashes[j];\n            chainData = await this._store.getChainData(reference); // eslint-disable-line no-await-in-loop\n            if (!chainData) {\n                // This can happen in the light/nano client if chain superquality is harmed.\n                // Return a best-effort chain in this case.\n                Log.w(BaseChain, `Failed to find block ${reference} while constructing SuperChain at depth ${depth} - returning truncated chain`);\n                break;\n            }\n            chain.push(chainData);\n\n            j = Math.max(depth - BlockUtils.getTargetDepth(chainData.head.target), -1);\n        }\n\n        if ((chain.length === 0 || chain[chain.length - 1].head.height > 1) && tailHeight === 1) {\n            chain.push(await ChainData.initial(GenesisConfig.GENESIS_BLOCK));\n        }\n\n        return chain.reverse();\n    }\n\n    /**\n     * @param {Array.<ChainData>} superchain\n     * @param {number} depth\n     * @param {number} m\n     * @param {number} delta\n     * @returns {boolean}\n     */\n    static _isGoodSuperChain(superchain, depth, m, delta) {\n        return BaseChain._hasSuperQuality(superchain, depth, m, delta)\n            && BaseChain._hasMultiLevelQuality(superchain, depth, m, delta);\n    }\n\n    /**\n     * @param {Array.<ChainData>} superchain\n     * @param {number} depth\n     * @param {number} m\n     * @param {number} delta\n     * @returns {boolean}\n     * @private\n     */\n    static _hasSuperQuality(superchain, depth, m, delta) {\n        Assert.that(m >= 1, 'm must be >= 1');\n        if (superchain.length < m) {\n            return false;\n        }\n\n        for (let i = m; i <= superchain.length; i++) {\n            const underlyingLength = superchain[superchain.length - 1].head.height - superchain[superchain.length - i].head.height + 1;\n            if (!BaseChain._isLocallyGood(i, underlyingLength, depth, delta)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * @param {Array.<ChainData>} superchain\n     * @param {number} depth\n     * @param {number} k1\n     * @param {number} delta\n     * @returns {boolean}\n     * @private\n     */\n    static _hasMultiLevelQuality(superchain, depth, k1, delta) {\n        if (depth <= 0) {\n            return true;\n        }\n\n        for (let i = 0; i < superchain.length - k1; i++) {\n            const tailData = superchain[i];\n            const headData = superchain[i + k1];\n\n            for (let mu = depth; mu >= 1; mu--) {\n                const upperChainLength = headData.superBlockCounts.get(mu) - tailData.superBlockCounts.get(mu);\n\n                switch (BaseChain.MULTILEVEL_STRATEGY) {\n                    case BaseChain.MultilevelStrategy.STRICT: {\n                        const lowerChainLength = headData.superBlockCounts.get(mu - 1) - tailData.superBlockCounts.get(mu - 1);\n\n                        /*\n                        // Original paper badness check:\n                        if (lowerChainLength > Math.pow(1 + delta, 1 / depth) * 2 * upperChainLength) {\n                            Log.d(BaseChain, `Chain badness detected at depth ${depth}, failing at ${mu}/${mu - 1}`\n                                + ` with ${upperChainLength}/${Math.pow(1 + delta, 1 / depth) * 2 * upperChainLength}/${lowerChainLength} blocks`);\n                            return false;\n                        }\n                        */\n\n                        // Alternative badness check:\n                        if (2 * upperChainLength < Math.pow(1 - delta, 1 / depth) * lowerChainLength) {\n                            Log.d(BaseChain, `Chain badness detected at depth ${depth}, failing at ${mu}/${mu - 1}`\n                                + ` with ${upperChainLength}/${Math.pow(1 - delta, 1 / depth) * lowerChainLength}/${lowerChainLength} blocks`);\n                            return false;\n                        }\n                        break;\n                    }\n\n                    default:\n                    case BaseChain.MultilevelStrategy.MODERATE: {\n                        // Relaxed badness check:\n                        for (let j = mu - 1; j >= 0; j--) {\n                            const lowerChainLength = headData.superBlockCounts.get(j) - tailData.superBlockCounts.get(j);\n                            if (!BaseChain._isLocallyGood(upperChainLength, lowerChainLength, mu - j, delta)) {\n                                Log.d(BaseChain, `Chain badness detected at depth ${depth}[${i}:${i + k1}], failing at ${mu}/${j}`);\n                                return false;\n                            }\n                        }\n                        break;\n                    }\n\n                    case BaseChain.MultilevelStrategy.RELAXED: {\n                        // Local goodness only:\n                        const lowerChainLength = headData.superBlockCounts.get(mu - 1) - tailData.superBlockCounts.get(mu - 1);\n                        if (!BaseChain._isLocallyGood(lowerChainLength, headData.head.height - tailData.head.height, depth, delta)) {\n                            Log.d(BaseChain, `Chain badness detected at depth ${depth}[${i}:${i + k1}], failing at ${mu}`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {number} superLength\n     * @param {number} underlyingLength\n     * @param {number} depth\n     * @param {number} delta\n     * @returns {boolean}\n     * @private\n     */\n    static _isLocallyGood(superLength, underlyingLength, depth, delta) {\n        // |C'| > (1 - delta) * 2^(-mu) * |C|\n        return superLength > (1 - delta) * Math.pow(2, -depth) * underlyingLength;\n    }\n\n    /**\n     * @param {number} length\n     * @param {Block} [head]\n     * @returns {Promise.<HeaderChain>}\n     * @private\n     */\n    async _getHeaderChain(length, head = this.head) {\n        const headers = [];\n        while (head && headers.length < length) {\n            headers.push(head.header);\n            head = await this.getBlock(head.prevHash); // eslint-disable-line no-await-in-loop\n        }\n        return new HeaderChain(headers.reverse());\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @param {BlockHeader} header\n     * @param {boolean} [failOnBadness]\n     * @returns {Promise.<ChainProof>}\n     * @protected\n     */\n    async _extendChainProof(proof, header, failOnBadness = true) {\n        // Append new header to proof suffix.\n        const suffix = proof.suffix.headers.slice();\n        suffix.push(header);\n\n        // If the suffix is not long enough (short chain), we're done.\n        const prefix = proof.prefix.blocks.slice();\n        if (suffix.length <= Policy.K) {\n            return new ChainProof(new BlockChain(prefix), new HeaderChain(suffix));\n        }\n\n        // Cut the tail off the suffix.\n        const suffixTail = suffix.shift();\n\n        // Construct light block out of the old suffix tail.\n        const interlink = await proof.prefix.head.getNextInterlink(suffixTail.target, suffixTail.version);\n        const prefixHead = new Block(suffixTail, interlink);\n\n        // Append old suffix tail block to prefix.\n        prefix.push(prefixHead);\n\n        // Extract layered superchains from prefix. Make a copy because we are going to change the chains array.\n        const chains = (await proof.prefix.getSuperChains()).slice();\n\n        // Append new prefix head to chains.\n        const depth = BlockUtils.getHashDepth(await prefixHead.pow());\n        for (let i = depth; i >= 0; i--) {\n            // Append block. Don't modify the chain, create a copy.\n            if (!chains[i]) {\n                chains[i] = new BlockChain([prefixHead]);\n            } else {\n                chains[i] = new BlockChain([...chains[i].blocks, prefixHead]);\n            }\n        }\n\n        // If the new header isn't a superblock, we're done.\n        if (depth - BlockUtils.getTargetDepth(prefixHead.target) <= 0) {\n            return new ChainProof(new BlockChain(prefix, chains), new HeaderChain(suffix));\n        }\n\n        // Prune unnecessary blocks if the chain is good.\n        // Try to extend proof if the chain is bad.\n        const deletedBlockHeights = new Set();\n        for (let i = depth; i >= 0; i--) {\n            const superchain = chains[i];\n            if (superchain.length < Policy.M) {\n                continue;\n            }\n\n            // XXX Hack: Convert BlockChain to array of pseudo-ChainData for the super quality check.\n            const _superchain = superchain.blocks.map(block => ({ head: block }));\n            if (!BaseChain._hasSuperQuality(_superchain, i, Policy.M, Policy.DELTA)) {\n                Log.w(BaseChain, `Chain quality badness detected at depth ${i}`);\n                // TODO extend superchains at lower levels\n                if (failOnBadness) {\n                    return null;\n                }\n                continue;\n            }\n\n            // Remove all blocks in lower chains up to (including) superchain[-m].\n            const referenceBlock = superchain.blocks[superchain.length - Policy.M];\n            for (let j = i - 1; j >= 0; j--) {\n                let numBlocksToDelete = 0;\n                let candidateBlock = chains[j].blocks[numBlocksToDelete];\n                while (candidateBlock.height <= referenceBlock.height) {\n                    // eslint-disable-next-line no-await-in-loop\n                    const candidateDepth = BlockUtils.getHashDepth(await candidateBlock.pow());\n                    if (candidateDepth === j && candidateBlock.height > 1) {\n                        deletedBlockHeights.add(candidateBlock.height);\n                    }\n\n                    numBlocksToDelete++;\n                    candidateBlock = chains[j].blocks[numBlocksToDelete];\n                }\n\n                if (numBlocksToDelete > 0) {\n                    // Don't modify the chain, create a copy.\n                    chains[j] = new BlockChain(chains[j].blocks.slice(numBlocksToDelete));\n                }\n            }\n        }\n\n        // Remove all deleted blocks from prefix.\n        const newPrefix = new BlockChain(prefix.filter(block => !deletedBlockHeights.has(block.height)), chains);\n\n        // Return the extended proof.\n        return new ChainProof(newPrefix, new HeaderChain(suffix));\n    }\n\n    /**\n     * MUST be synchronized with .pushBlock() and variants!\n     * @param {Block} blockToProve\n     * @param {Block} knownBlock\n     * @returns {Promise.<?BlockChain>}\n     * @protected\n     */\n    async _getBlockProof(blockToProve, knownBlock) {\n        /**\n         * @param {Block} block\n         * @param {number} depth\n         * @returns {Hash}\n         */\n        const getInterlinkReference = (block, depth) => {\n            const index = Math.min(depth - BlockUtils.getTargetDepth(block.target), block.interlink.length - 1);\n            return index < 0 ? block.prevHash : block.interlink.hashes[index];\n        };\n\n        const blocks = [];\n        const hashToProve = blockToProve.hash();\n\n        const proveTarget = BlockUtils.hashToTarget(await blockToProve.pow());\n        const proveDepth = BlockUtils.getTargetDepth(proveTarget);\n\n        let depth = BlockUtils.getTargetDepth(knownBlock.target) + knownBlock.interlink.length - 1;\n        let block = knownBlock;\n\n        let reference = getInterlinkReference(block, depth);\n        while (!hashToProve.equals(reference)) {\n            const nextBlock = await this.getBlock(reference); // eslint-disable-line no-await-in-loop\n            if (!nextBlock) {\n                // This can happen in the light/nano client if the blockToProve is known but blocks between tailBlock\n                // and blockToProve are missing.\n                Log.w(BaseChain, `Failed to find block ${reference} while constructing inclusion proof`);\n                return null;\n            }\n\n            if (nextBlock.height < blockToProve.height) {\n                // We have gone past the blockToProve, but are already at proveDepth, fail.\n                if (depth <= proveDepth) {\n                    return null;\n                }\n\n                // Decrease depth and thereby step size.\n                depth--;\n                reference = getInterlinkReference(block, depth);\n            } else if (nextBlock.height > blockToProve.height) {\n                // We are still in front of blockToProve, add block to result and advance.\n                blocks.push(nextBlock.toLight());\n\n                block = nextBlock;\n                reference = getInterlinkReference(block, depth);\n            } else {\n                // We found a reference to a different block than blockToProve at its height.\n                Log.w(BaseChain, `Failed to prove block ${hashToProve} - different block ${reference} at its height ${block.height}`);\n                return null;\n            }\n        }\n\n        // Include the blockToProve in the result.\n        blocks.push(blockToProve.toLight());\n\n        return new BlockChain(blocks.reverse());\n    }\n\n    /**\n     * @param {Array.<BlockHeader>} headers\n     * @return {Promise.<void>}\n     */\n    static async manyPow(headers) {\n        const worker = await CryptoWorker.getInstanceAsync();\n        const size = worker.poolSize || 1;\n        const partitions = [];\n        let j = 0;\n        for (let i = 0; i < size; ++i) {\n            partitions.push([]);\n            for (; j < ((i + 1) / size) * headers.length; ++j) {\n                partitions[i].push(headers[j].serialize());\n            }\n        }\n        const promises = [];\n        for (const part of partitions) {\n            promises.push(worker.computeArgon2dBatch(part));\n        }\n        const pows = (await Promise.all(promises)).reduce((a, b) => [...a, ...b], []);\n        for(let i = 0; i < headers.length; ++i) {\n            headers[i]._pow = new Hash(pows[i]);\n        }\n    }\n\n\n    /* NiPoPoW Verifier functions */\n\n    /**\n     * @param {ChainProof} proof1\n     * @param {ChainProof} proof2\n     * @param {number} m\n     * @returns {boolean}\n     */\n    static async isBetterProof(proof1, proof2, m) {\n        const lca = BlockChain.lowestCommonAncestor(proof1.prefix, proof2.prefix);\n        const score1 = await NanoChain._getProofScore(proof1.prefix, lca, m);\n        const score2 = await NanoChain._getProofScore(proof2.prefix, lca, m);\n        return score1 === score2\n            ? proof1.suffix.totalDifficulty() >= proof2.suffix.totalDifficulty()\n            : score1 > score2;\n    }\n\n    /**\n     *\n     * @param {BlockChain} chain\n     * @param {Block} lca\n     * @param {number} m\n     * @returns {Promise.<number>}\n     * @protected\n     */\n    static async _getProofScore(chain, lca, m) {\n        const counts = [];\n        for (const block of chain.blocks) {\n            if (block.height < lca.height) {\n                continue;\n            }\n\n            const depth = BlockUtils.getHashDepth(await block.pow()); // eslint-disable-line no-await-in-loop\n            counts[depth] = counts[depth] ? counts[depth] + 1 : 1;\n        }\n\n        let sum = 0;\n        let depth;\n        for (depth = counts.length - 1; sum < m && depth >= 0; depth--) {\n            sum += counts[depth] ? counts[depth] : 0;\n        }\n\n        let maxScore = Math.pow(2, depth + 1) * sum;\n        let length = sum;\n        for (let i = depth; i >= 0; i--) {\n            length += counts[i] ? counts[i] : 0;\n            const score = Math.pow(2, i) * length;\n            maxScore = Math.max(maxScore, score);\n        }\n\n        return maxScore;\n    }\n}\nBaseChain.MultilevelStrategy = {\n    STRICT: 1,\n    MODERATE: 2,\n    RELAXED: 3\n};\nBaseChain.MULTILEVEL_STRATEGY = BaseChain.MultilevelStrategy.MODERATE;\nClass.register(BaseChain);\n","class BlockChain {\n    /**\n     * @param {BlockChain} chain1\n     * @param {BlockChain} chain2\n     * @returns {BlockChain}\n     */\n    static merge(chain1, chain2) {\n        const merged = [];\n        let i1 = 0, i2 = 0;\n        while (i1 < chain1.length && i2 < chain2.length) {\n            const block1 = chain1.blocks[i1];\n            const block2 = chain2.blocks[i2];\n\n            if (block1.height === block2.height) {\n                Assert.that(block1.equals(block2), 'Encountered different blocks at same height during chain merge');\n                merged.push(block1);\n                i1++;\n                i2++;\n            } else if (block1.height < block2.height) {\n                merged.push(block1);\n                i1++;\n            } else {\n                merged.push(block2);\n                i2++;\n            }\n        }\n\n        for (; i1 < chain1.length; i1++) {\n            merged.push(chain1.blocks[i1]);\n        }\n        for (; i2 < chain2.length; i2++) {\n            merged.push(chain2.blocks[i2]);\n        }\n\n        return new BlockChain(merged);\n    }\n\n    /**\n     * @param {BlockChain} chain1\n     * @param {BlockChain} chain2\n     * @returns {?Block}\n     */\n    static lowestCommonAncestor(chain1, chain2) {\n        let i1 = chain1.length - 1;\n        let i2 = chain2.length - 1;\n        while (i1 >= 0 && i2 >= 0) {\n            const block1 = chain1.blocks[i1];\n            const block2 = chain2.blocks[i2];\n\n            if (block1.equals(block2)) {\n                return block1;\n            } else if (block1.height > block2.height) {\n                i1--;\n            } else {\n                i2--;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * @param {Array.<Block>} blocks\n     * @param {Array.<BlockChain>} [superChains]\n     */\n    constructor(blocks, superChains) {\n        if (!Array.isArray(blocks) || !NumberUtils.isUint16(blocks.length)\n            || blocks.some(it => !(it instanceof Block) || !it.isLight())) throw new Error('Malformed blocks');\n\n        /** @type {Array.<Block>} */\n        this._blocks = blocks;\n        /** @type {Array.<BlockChain>} */\n        this._chains = superChains;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockChain}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint16();\n        const blocks = [];\n        for (let i = 0; i < count; i++) {\n            blocks.push(Block.unserialize(buf));\n        }\n        return new BlockChain(blocks);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._blocks.length);\n        for (const block of this._blocks) {\n            block.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*count*/ 2\n            + this._blocks.reduce((sum, block) => sum + block.serializedSize, 0);\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    async verify() {\n        // For performance reasons, we DO NOT VERIFY the validity of the blocks in the chain here.\n        // Block validity is checked by the Nano/LightChain upon receipt of a ChainProof.\n\n        // Check that all blocks in the chain are valid successors of one another.\n        for (let i = this._blocks.length - 1; i >= 1; i--) {\n            if (!(await this._blocks[i].isSuccessorOf(this._blocks[i - 1]))) { // eslint-disable-line no-await-in-loop\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {Array.<Block>}\n     */\n    denseSuffix() {\n        // Compute the dense suffix.\n        const denseSuffix = [this.head];\n        let denseSuffixHead = this.head;\n        for (let i = this.length - 2; i >= 0; i--) {\n            const block = this.blocks[i];\n            const hash = block.hash();\n            if (!hash.equals(denseSuffixHead.prevHash)) {\n                break;\n            }\n\n            denseSuffix.push(block);\n            denseSuffixHead = block;\n        }\n        denseSuffix.reverse();\n        return denseSuffix;\n    }\n\n    /**\n     * @returns {Promise.<Array.<BlockChain>>}\n     */\n    async getSuperChains() {\n        if (!this._chains) {\n            this._chains = [];\n            for (let i = 0; i < this.length; i++) {\n                const block = this.blocks[i];\n                const depth = BlockUtils.getHashDepth(await block.pow());\n\n                if (this._chains[depth]) {\n                    this._chains[depth].blocks.push(block);\n                } else if (!this._chains[depth]) {\n                    this._chains[depth] = new BlockChain([block]);\n                }\n\n                for (let j = depth - 1; j >= 0; j--) {\n                    if (this._chains[j]) {\n                        this._chains[j].blocks.push(block);\n                    }\n                }\n            }\n\n            for (let i = 0; i < this._chains.length; i++) {\n                if (!this._chains[i]) {\n                    this._chains[i] = new BlockChain([]);\n                }\n            }\n        }\n        return this._chains;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isAnchored() {\n        return GenesisConfig.GENESIS_HASH.equals(this.tail.hash());\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `BlockChain{length=${this.length}}`;\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._blocks.length;\n    }\n\n    /** @type {Array.<Block>} */\n    get blocks() {\n        return this._blocks;\n    }\n\n    /** @type {Block} */\n    get head() {\n        return this._blocks[this.length - 1];\n    }\n\n    /** @type {Block} */\n    get tail() {\n        return this._blocks[0];\n    }\n\n    /**\n     * @returns {number}\n     */\n    totalDifficulty() {\n        return this._blocks.reduce((sum, block) => sum + BlockUtils.targetToDifficulty(block.target), 0);\n    }\n}\nClass.register(BlockChain);\n","class HeaderChain {\n    /**\n     * @param {Array.<BlockHeader>} headers\n     */\n    constructor(headers) {\n        if (!headers || !Array.isArray(headers) || !NumberUtils.isUint16(headers.length)\n            || headers.some(it => !(it instanceof BlockHeader))) throw new Error('Malformed headers');\n\n        /** @type {Array.<BlockHeader>} */\n        this._headers = headers;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {HeaderChain}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint16();\n        const headers = [];\n        for (let i = 0; i < count; i++) {\n            headers.push(BlockHeader.unserialize(buf));\n        }\n        return new HeaderChain(headers);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._headers.length);\n        for (const header of this._headers) {\n            header.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*count*/ 2\n            + this._headers.reduce((sum, header) => sum + header.serializedSize, 0);\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    async verify() {\n        // For performance reasons, we DO NOT VERIFY the validity of the blocks in the chain here.\n        // Block validity is checked by the Nano/LightChain upon receipt of a ChainProof.\n\n        // Check that all headers in the chain are valid successors of one another.\n        for (let i = this._headers.length - 1; i >= 1; i--) {\n            if (!this._headers[i].isImmediateSuccessorOf(this._headers[i - 1])) {\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `HeaderChain{length=${this.length}}`;\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._headers.length;\n    }\n\n    /** @type {Array.<BlockHeader>} */\n    get headers() {\n        return this._headers;\n    }\n\n    /** @type {BlockHeader} */\n    get head() {\n        return this._headers[this.length - 1];\n    }\n\n    /** @type {BlockHeader} */\n    get tail() {\n        return this._headers[0];\n    }\n\n    /**\n     * @returns {number}\n     */\n    totalDifficulty() {\n        return this._headers.reduce((sum, header) => sum + BlockUtils.targetToDifficulty(header.target), 0);\n    }\n}\nClass.register(HeaderChain);\n","class ChainProof {\n    /**\n     * @param {BlockChain} prefix\n     * @param {HeaderChain} suffix\n     */\n    constructor(prefix, suffix) {\n        if (!(prefix instanceof BlockChain) || !prefix.length) throw new Error('Malformed prefix');\n        if (!(suffix instanceof HeaderChain)) throw new Error('Malformed suffix');\n\n        /** @type {BlockChain} */\n        this._prefix = prefix;\n        /** @type {HeaderChain} */\n        this._suffix = suffix;\n    }\n\n    static unserialize(buf) {\n        const prefix = BlockChain.unserialize(buf);\n        const suffix = HeaderChain.unserialize(buf);\n        return new ChainProof(prefix, suffix);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._prefix.serialize(buf);\n        this._suffix.serialize(buf);\n        return buf;\n    }\n\n    get serializedSize() {\n        return this._prefix.serializedSize\n            + this._suffix.serializedSize;\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    async verify() {\n        // Check that the prefix chain is anchored.\n        if (!this._prefix.isAnchored()) {\n            return false;\n        }\n\n        // Check that both prefix and suffix are valid chains.\n        if (!(await this._prefix.verify()) || !(await this._suffix.verify())) {\n            return false;\n        }\n\n        // Check that the suffix connects to the prefix.\n        if (this._suffix.length > 0 && !this._suffix.tail.isImmediateSuccessorOf(this._prefix.head.header)) {\n            return false;\n        }\n\n        // Verify the block targets where possible.\n        if (!this._verifyDifficulty()) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyDifficulty() {\n        // Extract the dense suffix of the prefix.\n        /** Array.<BlockHeader> */\n        const denseSuffix = this.prefix.denseSuffix().map(block => block.header);\n        /** Array.<BlockHeader> */\n        const denseChain = denseSuffix.concat(this.suffix.headers);\n\n        // Compute totalDifficulty for each block of the dense chain.\n        let totalDifficulty = 0;\n        const totalDifficulties = [];\n        for (let i = 0; i < denseChain.length; i++) {\n            totalDifficulty += denseChain[i].difficulty;\n            totalDifficulties[i] = totalDifficulty;\n        }\n\n        let headIndex = denseChain.length - 2;\n        let tailIndex = headIndex - Policy.DIFFICULTY_BLOCK_WINDOW;\n        while (tailIndex >= 0 && headIndex >= 0) {\n            const headBlock = denseChain[headIndex];\n            const tailBlock = denseChain[tailIndex];\n            const deltaTotalDifficulty = totalDifficulties[headIndex] - totalDifficulties[tailIndex];\n            const target = BlockUtils.getNextTarget(headBlock, tailBlock, deltaTotalDifficulty);\n            const nBits = BlockUtils.targetToCompact(target);\n\n            /** @type {BlockHeader} */\n            const checkBlock = denseChain[headIndex + 1];\n            if (checkBlock.nBits !== nBits) {\n                Log.w(ChainProof, `Block target mismatch: expected=${nBits}, got=${checkBlock.nBits}`);\n                return false;\n            }\n\n            --headIndex;\n            if (tailIndex !== 0 || tailBlock.height !== 1) {\n                --tailIndex;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `ChainProof{prefix=${this._prefix.length}, suffix=${this._suffix.length}, height=${this.head.height}}`;\n    }\n\n    /** @type {BlockChain} */\n    get prefix() {\n        return this._prefix;\n    }\n\n    /** @type {HeaderChain} */\n    get suffix() {\n        return this._suffix;\n    }\n\n    /** @type {BlockHeader} */\n    get head() {\n        return this._suffix.length > 0 ? this._suffix.head : this._prefix.head.header;\n    }\n}\nClass.register(ChainProof);\n","class ChainData {\n    /**\n     * @param {Block} block\n     * @param {SuperBlockCounts} [superBlockCounts]\n     * @returns {Promise.<ChainData>}\n     */\n    static async initial(block, superBlockCounts) {\n        const pow = await block.pow();\n        const totalWork = BlockUtils.realDifficulty(pow);\n\n        const depth = BlockUtils.getHashDepth(pow);\n        if (superBlockCounts) {\n            superBlockCounts = superBlockCounts.copyAndAdd(depth);\n        } else {\n            superBlockCounts = new SuperBlockCounts();\n            superBlockCounts.add(depth);\n        }\n\n        return new ChainData(block, block.difficulty, totalWork, superBlockCounts, true);\n    }\n\n    /**\n     * @param {Block} head\n     * @param {number} totalDifficulty\n     * @param {number} totalWork\n     * @param {SuperBlockCounts} superBlockCounts\n     * @param {boolean} [onMainChain]\n     * @param {Hash} [mainChainSuccessor]\n     */\n    constructor(head, totalDifficulty, totalWork, superBlockCounts, onMainChain = false, mainChainSuccessor = null) {\n        this._head = head;\n        this._totalDifficulty = totalDifficulty;\n        this._totalWork = totalWork;\n        this._superBlockCounts = superBlockCounts;\n        this._onMainChain = onMainChain;\n        this._mainChainSuccessor = mainChainSuccessor;\n        this._height = head.height;\n    }\n\n    /**\n     * @returns {{_head: SerialBuffer, _totalDifficulty: number, _totalWork: number, _superBlockCounts: Array.<number>, _onMainChain: boolean, _mainChainSuccessor: ?SerialBuffer, _height: number, _pow: SerialBuffer}}\n     */\n    toObj() {\n        Assert.that(this._head.header._pow instanceof Hash, 'Expected cached PoW hash');\n        return {\n            _head: this._head.toLight().serialize(),\n            _totalDifficulty: this._totalDifficulty,\n            _totalWork: this._totalWork,\n            _superBlockCounts: this._superBlockCounts.array,\n            _onMainChain: this._onMainChain,\n            _mainChainSuccessor: this._mainChainSuccessor ? this._mainChainSuccessor.serialize() : null,\n            _height: this._head.height,\n            _pow: this._head.header._pow.serialize()\n        };\n    }\n\n    /**\n     * @param {{_head: Uint8Array, _totalDifficulty: number, _totalWork: number, _superBlockCounts: Array.<number>, _onMainChain: boolean, _mainChainSuccessor: ?Uint8Array, _height: number, _pow: Uint8Array}} obj\n     * @param {string} [hashBase64]\n     * @returns {ChainData}\n     */\n    static fromObj(obj, hashBase64) {\n        if (!obj) return obj;\n        const head = Block.unserialize(new SerialBuffer(obj._head));\n        head.header._pow = Hash.unserialize(new SerialBuffer(obj._pow));\n        head.header._hash = hashBase64 ? Hash.fromBase64(hashBase64) : null;\n        const superBlockCounts = new SuperBlockCounts(obj._superBlockCounts);\n        const successor = obj._mainChainSuccessor ? Hash.unserialize(new SerialBuffer(obj._mainChainSuccessor)) : null;\n        return new ChainData(\n            head,\n            obj._totalDifficulty,\n            obj._totalWork,\n            superBlockCounts,\n            obj._onMainChain,\n            successor\n        );\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<ChainData>}\n     */\n    async nextChainData(block) {\n        Assert.that(this._totalDifficulty > 0);\n\n        const pow = await block.pow();\n        const totalDifficulty = this.totalDifficulty + block.difficulty;\n        const totalWork = this.totalWork + BlockUtils.realDifficulty(pow);\n        const superBlockCounts = this.superBlockCounts.copyAndAdd(BlockUtils.getHashDepth(pow));\n        return new ChainData(block, totalDifficulty, totalWork, superBlockCounts);\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<ChainData>}\n     */\n    async previousChainData(block) {\n        Assert.that(this._totalDifficulty > 0);\n\n        const pow = await this.head.pow();\n        const totalDifficulty = this.totalDifficulty - this.head.difficulty;\n        const totalWork = this.totalWork - BlockUtils.realDifficulty(pow);\n        const superBlockCounts = this.superBlockCounts.copyAndSubtract(BlockUtils.getHashDepth(pow));\n        return new ChainData(block, totalDifficulty, totalWork, superBlockCounts);\n    }\n\n    /** @type {Block} */\n    get head() {\n        return this._head;\n    }\n\n    /** @type {number} */\n    get totalDifficulty() {\n        return this._totalDifficulty;\n    }\n\n    /** @type {number} */\n    get totalWork() {\n        return this._totalWork;\n    }\n\n    /** @type {SuperBlockCounts} */\n    get superBlockCounts() {\n        return this._superBlockCounts;\n    }\n\n    /** @type {boolean} */\n    get onMainChain() {\n        return this._onMainChain;\n    }\n\n    /** @type {boolean} */\n    set onMainChain(onMainChain) {\n        this._onMainChain = onMainChain;\n    }\n\n    /** @type {Hash} */\n    get mainChainSuccessor() {\n        return this._mainChainSuccessor;\n    }\n\n    /** @type {Hash} */\n    set mainChainSuccessor(mainChainSuccessor) {\n        this._mainChainSuccessor = mainChainSuccessor;\n    }\n}\nClass.register(ChainData);\n\nclass SuperBlockCounts {\n    /**\n     * @constructor\n     * @param {Array.<number>} array\n     */\n    constructor(array = []) {\n        this._arr = array;\n    }\n\n    /**\n     * @param {number} depth\n     */\n    add(depth) {\n        Assert.that(NumberUtils.isUint8(depth));\n        for (let i = 0; i <= depth; i++) {\n            this._arr[i] = this.get(i) + 1;\n        }\n    }\n\n    /**\n     * @param {number} depth\n     */\n    subtract(depth) {\n        Assert.that(NumberUtils.isUint8(depth));\n        for (let i = 0; i <= depth; i++) {\n            this._arr[i]--;\n            Assert.that(this._arr[i] >= 0);\n        }\n    }\n\n    /**\n     * @param {number} depth\n     * @returns {SuperBlockCounts}\n     */\n    copyAndAdd(depth) {\n        const copy = new SuperBlockCounts(this._arr.slice());\n        copy.add(depth);\n        return copy;\n    }\n\n    /**\n     * @param {number} depth\n     * @returns {SuperBlockCounts}\n     */\n    copyAndSubtract(depth) {\n        const copy = new SuperBlockCounts(this._arr.slice());\n        copy.subtract(depth);\n        return copy;\n    }\n\n    /**\n     * @param {number} depth\n     * @returns {number}\n     */\n    get(depth) {\n        Assert.that(NumberUtils.isUint8(depth));\n        return this._arr[depth] || 0;\n    }\n\n    /**\n     * @param {number} m\n     * @returns {number}\n     */\n    getCandidateDepth(m) {\n        for (let i = this._arr.length - 1; i >= 0; i--) {\n            if (this._arr[i] >= m) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._arr.length;\n    }\n\n    /** @type {Array.<number>} */\n    get array() {\n        return this._arr;\n    }\n}\nClass.register(SuperBlockCounts);\n","class ChainDataStore {\n    /**\n     * @param {JungleDB} jdb\n     */\n    static initPersistent(jdb) {\n        const chainStore = jdb.createObjectStore('ChainData', {\n            codec: new ChainDataStoreCodec(),\n            enableLruCache: ChainDataStore.CHAINDATA_CACHING_ENABLED,\n            lruCacheSize: ChainDataStore.CHAINDATA_CACHE_SIZE\n        });\n        ChainDataStore._createIndexes(chainStore);\n\n        jdb.createObjectStore('Block', {\n            codec: new BlockStoreCodec(),\n            enableLruCache: ChainDataStore.BLOCKS_CACHING_ENABLED,\n            lruCacheSize: ChainDataStore.BLOCKS_CACHE_SIZE,\n            rawLruCacheSize: ChainDataStore.BLOCKS_RAW_CACHE_SIZE\n        });\n    }\n\n    /**\n     * @param {JungleDB} jdb\n     * @returns {ChainDataStore}\n     */\n    static getPersistent(jdb) {\n        const chainStore = jdb.getObjectStore('ChainData');\n        const blockStore = jdb.getObjectStore('Block');\n        return new ChainDataStore(chainStore, blockStore);\n    }\n\n    /**\n     * @returns {ChainDataStore}\n     */\n    static createVolatile() {\n        const chainStore = JDB.JungleDB.createVolatileObjectStore({ codec: new ChainDataStoreCodec() });\n        const blockStore = JDB.JungleDB.createVolatileObjectStore({ codec: new BlockStoreCodec() });\n        ChainDataStore._createIndexes(chainStore);\n        return new ChainDataStore(chainStore, blockStore);\n    }\n\n    /**\n     * @param {IObjectStore} chainStore\n     * @private\n     */\n    static _createIndexes(chainStore) {\n        chainStore.createIndex('height', ['_height'], { lmdbKeyEncoding: JDB.JungleDB.NUMBER_ENCODING, leveldbKeyEncoding: JDB.JungleDB.NUMBER_ENCODING });\n    }\n\n    /**\n     * @param {IObjectStore} chainStore\n     * @param {IObjectStore} blockStore\n     */\n    constructor(chainStore, blockStore) {\n        /** @type {IObjectStore} */\n        this._chainStore = chainStore;\n        /** @type {IObjectStore} */\n        this._blockStore = blockStore;\n    }\n\n    /**\n     * @param {Hash} key\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?ChainData>}\n     */\n    async getChainData(key, includeBody = false) {\n        /** @type {ChainData} */\n        const chainData = await this._chainStore.get(key.toBase64());\n        if (!chainData || !includeBody) {\n            return chainData;\n        }\n\n        const block = await this._blockStore.get(key.toBase64());\n        if (block && block.isFull()) {\n            chainData.head._body = block.body;\n        }\n\n        return chainData;\n    }\n\n    /**\n     * @param {Hash} key\n     * @param {ChainData} chainData\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<void>}\n     */\n    putChainData(key, chainData, includeBody = true) {\n        if (this._chainStore instanceof JDB.Transaction) {\n            this._chainStore.putSync(key.toBase64(), chainData);\n            if (includeBody && chainData.head.isFull()) {\n                this._blockStore.putSync(key.toBase64(), chainData.head);\n            }\n            return Promise.resolve(true);\n        }\n\n        if (includeBody && chainData.head.isFull()) {\n            const chainTx = this._chainStore.synchronousTransaction();\n            chainTx.putSync(key.toBase64(), chainData);\n            const blockTx = this._blockStore.synchronousTransaction();\n            blockTx.putSync(key.toBase64(), chainData.head);\n            return JDB.JungleDB.commitCombined(chainTx, blockTx);\n        }\n\n        return this._chainStore.put(key.toBase64(), chainData);\n    }\n\n    /**\n     * @param {Hash} key\n     * @param {ChainData} chainData\n     * @param {boolean} [includeBody]\n     * @returns {void}\n     */\n    putChainDataSync(key, chainData, includeBody = true) {\n        Assert.that(this._chainStore instanceof JDB.Transaction);\n        this._chainStore.putSync(key.toBase64(), chainData);\n        if (includeBody && chainData.head.isFull()) {\n            this._blockStore.putSync(key.toBase64(), chainData.head);\n        }\n    }\n\n    /**\n     * @param {Hash} key\n     * @param {boolean} [includeBody]\n     * @returns {?Block}\n     */\n    async getBlock(key, includeBody = false) {\n        if (includeBody) {\n            const block = await this._blockStore.get(key.toBase64());\n            if (block) {\n                return block;\n            }\n        }\n\n        const chainData = await this._chainStore.get(key.toBase64());\n        return chainData ? chainData.head : null;\n    }\n\n    /**\n     * @param {Hash} key\n     * @param {boolean} [includeForks]\n     * @returns {Promise.<?Uint8Array>}\n     */\n    async getRawBlock(key, includeForks = false) {\n        /** @type {ChainData} */\n        const chainData = await this._chainStore.get(key.toBase64());\n        if (!chainData || (!chainData.onMainChain && !includeForks)) {\n            return null;\n        }\n\n        const block = await this._blockStore.get(key.toBase64(), { raw: true });\n        if (block) {\n            return new Uint8Array(block);\n        }\n\n        return null;\n    }\n\n    /**\n     * @param {number} height\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?ChainData>}\n     */\n    async getChainDataAt(height, includeBody = false) {\n        /** @type {Array.<ChainData>} */\n        const candidates = await this._chainStore.values(JDB.Query.eq('height', height));\n        if (!candidates || !candidates.length) {\n            return undefined;\n        }\n\n        for (const chainData of candidates) {\n            if (chainData.onMainChain) {\n                if (includeBody) {\n                    // eslint-disable-next-line no-await-in-loop\n                    const block = await this._blockStore.get(chainData.head.hash().toBase64());\n                    if (block) {\n                        chainData._head = block;\n                    }\n                }\n                return chainData;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @param {number} height\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?Block>}\n     */\n    async getBlockAt(height, includeBody = false) {\n        const chainData = await this.getChainDataAt(height, includeBody);\n        return chainData ? chainData.head : null;\n    }\n\n    /**\n     * @param {number} height\n     * @param {boolean} [lower]\n     * @returns {Promise.<?Block>}\n     */\n    async getNearestBlockAt(height, lower = true) {\n        const index = this._chainStore.index('height');\n        /** @type {Array.<ChainData>} */\n        const candidates = lower ?\n            await index.maxValues(JDB.KeyRange.upperBound(height)) :\n            await index.minValues(JDB.KeyRange.lowerBound(height));\n        if (!candidates || !candidates.length) {\n            return undefined;\n        }\n\n        for (const chainData of candidates) {\n            if (chainData.onMainChain) {\n                return chainData.head;\n            }\n        }\n\n        return null;\n    }\n\n    // /**\n    //  * @param {number} startHeight\n    //  * @param {number} [count]\n    //  * @param {boolean} [forward]\n    //  * @returns {Promise.<Array.<Block>>}\n    //  */\n    // async getBlocks(startHeight, count = 500, forward = true) {\n    //     if (count <= 0) {\n    //         return [];\n    //     }\n    //     if (!forward) {\n    //         startHeight = startHeight - count;\n    //     }\n    //     /** @type {Array.<ChainData>} */\n    //     let candidates = await this._chainStore.values(JDB.Query.within('height', startHeight, startHeight + count - 1));\n    //     candidates = candidates\n    //         .filter(chainData => chainData.onMainChain)\n    //         .map(chainData => chainData.head);\n    //     const sortNumber = forward ? ((a, b) => a.height - b.height) : ((a, b) => b.height - a.height);\n    //     candidates.sort(sortNumber);\n    //     return candidates;\n    // }\n\n    /**\n     * @param {Hash} startBlockHash\n     * @param {number} [count]\n     * @param {boolean} [forward]\n     * @returns {Promise.<Array.<Block>>}\n     */\n    getBlocks(startBlockHash, count = 500, forward = true) {\n        if (count <= 0) {\n            return Promise.resolve([]);\n        }\n\n        if (forward) {\n            return this.getBlocksForward(startBlockHash, count);\n        } else {\n            return this.getBlocksBackward(startBlockHash, count);\n        }\n    }\n\n    /**\n     * @param {Hash} startBlockHash\n     * @param {number} count\n     * @returns {Promise.<Array.<Block>>}\n     */\n    async getBlocksForward(startBlockHash, count = 500) {\n        /** @type {ChainData} */\n        let chainData = await this._chainStore.get(startBlockHash.toBase64());\n        if (!chainData) {\n            return [];\n        }\n\n        const blocks = [];\n        while (blocks.length < count && chainData.mainChainSuccessor) {\n            chainData = await this._chainStore.get(chainData.mainChainSuccessor.toBase64());\n            if (!chainData) {\n                return blocks;\n            }\n            blocks.push(chainData.head);\n        }\n        return blocks;\n    }\n\n    /**\n     * @param {Hash} startBlockHash\n     * @param {number} count\n     * @param {boolean} includeBody\n     * @returns {Promise.<Array.<Block>>}\n     */\n    async getBlocksBackward(startBlockHash, count = 500, includeBody = false) {\n        const getBlock = includeBody\n            ? key => this._blockStore.get(key)\n            : key => this._chainStore.get(key).then(data => data.head);\n\n        /** @type {ChainData} */\n        const chainData = await this._chainStore.get(startBlockHash.toBase64());\n        if (!chainData) {\n            return [];\n        }\n\n        /** @type {Block} */\n        let block = chainData.head;\n        const blocks = [];\n        while (blocks.length < count && block.height > 1) {\n            block = await getBlock(block.prevHash.toBase64());\n            if (!block) {\n                return blocks;\n            }\n            blocks.push(block);\n        }\n        return blocks;\n    }\n\n    /**\n    /**\n     * @returns {Promise.<Hash|undefined>}\n     */\n    async getHead() {\n        const key = await this._chainStore.get('main');\n        return key ? Hash.fromBase64(key) : undefined;\n    }\n\n    /**\n     * @param {Hash} key\n     * @returns {Promise.<void>}\n     */\n    setHead(key) {\n        return this._chainStore.put('main', key.toBase64());\n    }\n\n    /**\n     * @param {Hash} key\n     * @returns {void}\n     */\n    setHeadSync(key) {\n        Assert.that(this._chainStore instanceof JDB.SynchronousTransaction);\n        this._chainStore.putSync('main', key.toBase64());\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {ChainDataStore}\n     */\n    transaction(enableWatchdog = true) {\n        const chainTx = this._chainStore.transaction(enableWatchdog);\n        const blockTx = this._blockStore.transaction(enableWatchdog);\n        return new ChainDataStore(chainTx, blockTx);\n    }\n\n    /**\n     * @param {boolean} [enableWatchdog]\n     * @returns {ChainDataStore}\n     */\n    synchronousTransaction(enableWatchdog = true) {\n        const chainTx = this._chainStore.synchronousTransaction(enableWatchdog);\n        const blockTx = this._blockStore.synchronousTransaction(enableWatchdog);\n        return new ChainDataStore(chainTx, blockTx);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    commit() {\n        if (this._chainStore instanceof JDB.Transaction) {\n            return JDB.JungleDB.commitCombined(this._chainStore, this._blockStore);\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    abort() {\n        return Promise.all([this._chainStore.abort(), this._blockStore.abort()]);\n    }\n\n    /**\n     * @returns {ChainDataStore}\n     */\n    snapshot() {\n        const chainSnapshot = this._chainStore.snapshot();\n        const blockSnapshot = this._blockStore.snapshot();\n        return new ChainDataStore(chainSnapshot, blockSnapshot);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    truncate() {\n        if (this._chainStore instanceof JDB.Transaction) {\n            this._chainStore.truncateSync();\n            this._blockStore.truncateSync();\n            return Promise.resolve(true);\n        }\n\n        const chainTx = this._chainStore.transaction();\n        chainTx.truncateSync();\n        const blockTx = this._blockStore.transaction();\n        blockTx.truncateSync();\n        return JDB.JungleDB.commitCombined(chainTx, blockTx);\n    }\n\n    /** @type {Array.<JDB.Transaction>} */\n    get txs() {\n        if (this._chainStore instanceof JDB.Transaction) {\n            return [this._chainStore, this._blockStore];\n        }\n        return [];\n    }\n}\nChainDataStore.CHAINDATA_CACHING_ENABLED = true;\nChainDataStore.CHAINDATA_CACHE_SIZE = 5000;\nChainDataStore.BLOCKS_CACHING_ENABLED = true;\nChainDataStore.BLOCKS_CACHE_SIZE = 0;\nChainDataStore.BLOCKS_RAW_CACHE_SIZE = 500;\nClass.register(ChainDataStore);\n\n/**\n * @implements {ICodec}\n */\nclass ChainDataStoreCodec {\n    /**\n     * @param {*} obj The object to encode before storing it.\n     * @returns {*} Encoded object.\n     */\n    encode(obj) {\n        return typeof obj === 'string' ? obj : obj.toObj();\n    }\n\n    /**\n     * @param {*} obj The object to decode.\n     * @param {string} key The object's primary key.\n     * @returns {*} Decoded object.\n     */\n    decode(obj, key) {\n        return typeof obj === 'string' ? obj : ChainData.fromObj(obj, key);\n    }\n\n    /**\n     * @type {{encode: function(val:*):*, decode: function(val:*):*, buffer: boolean, type: string}|void}\n     */\n    get valueEncoding() {\n        return JDB.JungleDB.JSON_ENCODING;\n    }\n}\n\n/**\n * @implements {ICodec}\n */\nclass BlockStoreCodec {\n    /**\n     * @param {*} obj The object to encode before storing it.\n     * @returns {*} Encoded object.\n     */\n    encode(obj) {\n        return obj.serialize();\n    }\n\n    /**\n     * @param {*} obj The object to decode.\n     * @param {string} key The object's primary key.\n     * @returns {*} Decoded object.\n     */\n    decode(obj, key) {\n        const block = Block.unserialize(new SerialBuffer(obj));\n        block.header._hash = Hash.fromBase64(key);\n        return block;\n    }\n\n    /**\n     * @type {{encode: function(val:*):*, decode: function(val:*):*, buffer: boolean, type: string}|void}\n     */\n    get valueEncoding() {\n        return JDB.JungleDB.BINARY_ENCODING;\n    }\n}\n","class MempoolTransactionSet {\n    /**\n     * @param {Array.<Transaction>} [sortedTransactions]\n     */\n    constructor(sortedTransactions) {\n        /** @type {SortedList.<Transaction>} */\n        this._transactions = new SortedList(sortedTransactions);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {MempoolTransactionSet}\n     */\n    add(transaction) {\n        this._transactions.add(transaction);\n        return this;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {MempoolTransactionSet}\n     */\n    remove(transaction) {\n        this._transactions.remove(transaction);\n        return this;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {MempoolTransactionSet}\n     */\n    copyAndAdd(transaction) {\n        const transactions = this._transactions.copy();\n        transactions.add(transaction);\n        return new MempoolTransactionSet(transactions.values());\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions.values();\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._transactions.length > 0 ? this._transactions.values()[0].sender : null;\n    }\n\n    /** @type {?Account.Type} */\n    get senderType() {\n        return this._transactions.length > 0 ? this._transactions.values()[0].senderType : undefined;\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._transactions.length;\n    }\n\n    /**\n     * @param {number} feePerByte\n     * @return {number}\n     */\n    numBelowFeePerByte(feePerByte) {\n        return this._transactions.values().filter(t => t.fee / t.serializedSize < feePerByte).length;\n    }\n\n    toString() {\n        return `MempoolTransactionSet{length=${this.length}}`;\n    }\n}\n\nClass.register(MempoolTransactionSet);\n","class Mempool extends Observable {\n    /**\n     * @param {IBlockchain} blockchain\n     * @param {Accounts} accounts\n     */\n    constructor(blockchain, accounts) {\n        super();\n        /** @type {IBlockchain} */\n        this._blockchain = blockchain;\n        /** @type {Accounts} */\n        this._accounts = accounts;\n\n        // Our pool of transactions.\n        /** @type {SortedList.<Transaction>} */\n        this._transactionsByFeePerByte = new SortedList(); // uses Transaction.compare, by fee descending\n        /** @type {HashMap.<Hash, Transaction>} */\n        this._transactionsByHash = new HashMap();\n        /** @type {HashMap.<Address, MempoolTransactionSet>} */\n        this._transactionSetBySender = new HashMap();\n        /** @type {HashMap.<Address, HashSet.<Hash>>} */\n        this._transactionSetByRecipient = new HashMap();\n        /** @type {Synchronizer} */\n        this._synchronizer = new Synchronizer();\n\n        // Listen for changes in the blockchain head to evict transactions that have become invalid.\n        blockchain.on('head-changed', () => this._evictTransactions());\n        blockchain.on('block-reverted', (block) => this._restoreTransactions(block));\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @fires Mempool#transaction-added\n     * @returns {Promise.<Mempool.ReturnCode>}\n     */\n    pushTransaction(transaction) {\n        return this._synchronizer.push(() => this._pushTransaction(transaction));\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {Promise.<Mempool.ReturnCode>}\n     * @private\n     */\n    async _pushTransaction(transaction) {\n        // Check if we already know this transaction.\n        const hash = transaction.hash();\n        if (this._transactionsByHash.contains(hash)) {\n            return Mempool.ReturnCode.KNOWN;\n        }\n\n        const set = this._transactionSetBySender.get(transaction.sender) || new MempoolTransactionSet();\n        // Check limit for free transactions.\n        if (transaction.fee / transaction.serializedSize < Mempool.TRANSACTION_RELAY_FEE_MIN\n            && set.numBelowFeePerByte(Mempool.TRANSACTION_RELAY_FEE_MIN) >= Mempool.FREE_TRANSACTIONS_PER_SENDER_MAX) {\n            return Mempool.ReturnCode.FEE_TOO_LOW;\n        }\n\n        // Intrinsic transaction verification\n        if (!transaction.verify()) {\n            return Mempool.ReturnCode.INVALID;\n        }\n\n        // Retrieve recipient account and test incoming transaction.\n        /** @type {Account} */\n        let recipientAccount;\n        try {\n            recipientAccount = await this._accounts.get(transaction.recipient);\n            recipientAccount.withIncomingTransaction(transaction, this._blockchain.height + 1);\n        } catch (e) {\n            Log.d(Mempool, () => `Rejected transaction from ${transaction.sender} - ${e.message}`);\n            return Mempool.ReturnCode.INVALID;\n        }\n\n        // Retrieve sender account.\n        /** @type {Account} */\n        let senderAccount;\n        try {\n            senderAccount = await this._accounts.get(transaction.sender, transaction.senderType);\n        } catch (e) {\n            Log.d(Mempool, () => `Rejected transaction from ${transaction.sender} - ${e.message}`);\n            return Mempool.ReturnCode.INVALID;\n        }\n\n        // Add new transaction to the sender's pending transaction set. Then re-check all transactions in the set\n        // in fee/byte order against the sender account state. Adding high fee transactions may thus invalidate\n        // low fee transactions in the set.\n        const transactions = [];\n        let tmpAccount = senderAccount;\n        for (const tx of set.copyAndAdd(transaction).transactions) {\n            let error = 'transactions per sender exceeded';\n            try {\n                if (transactions.length < Mempool.TRANSACTIONS_PER_SENDER_MAX) {\n                    tmpAccount = tmpAccount.withOutgoingTransaction(tx, this._blockchain.height + 1, this._blockchain.transactionCache);\n                    transactions.push(tx);\n\n                    // Transaction ok, move to next one.\n                    continue;\n                }\n            } catch (e) {\n                error = e.message;\n            }\n\n            // An error occurred processing this transaction.\n            // If the rejected transaction is the one we're pushing, fail.\n            // Otherwise, evict the rejected transaction from the mempool.\n            if (tx.equals(transaction)) {\n                Log.d(Mempool, () => `Rejected transaction from ${transaction.sender} - ${error}`);\n                return Mempool.ReturnCode.INVALID;\n            } else {\n                // Remove transaction\n                this._removeTransaction(tx);\n            }\n        }\n\n        if (this._transactionsByFeePerByte.length >= Mempool.SIZE_MAX) {\n            this._popLowFeeTransaction();\n        }\n\n        // Transaction is valid, add it to the mempool.\n        this._transactionsByFeePerByte.add(transaction);\n        this._transactionsByHash.put(hash, transaction);\n        this._transactionSetBySender.put(transaction.sender, new MempoolTransactionSet(transactions));\n        /** @type {HashSet.<Hash>} */\n        const byRecipient = this._transactionSetByRecipient.get(transaction.recipient) || new HashSet();\n        byRecipient.add(transaction.hash());\n        this._transactionSetByRecipient.put(transaction.recipient, byRecipient);\n\n        // Tell listeners about the new valid transaction we received.\n        this.fire('transaction-added', transaction);\n\n        return Mempool.ReturnCode.ACCEPTED;\n    }\n\n    /**\n     * @private\n     */\n    _popLowFeeTransaction() {\n        // Remove transaction\n        const transaction = this._transactionsByFeePerByte.pop();\n\n        /** @type {MempoolTransactionSet} */\n        const set = this._transactionSetBySender.get(transaction.sender);\n        set.remove(transaction);\n\n        /** @type {HashSet.<Hash>} */\n        const byRecipient = this._transactionSetByRecipient.get(transaction.recipient);\n        if (byRecipient) {\n            if (byRecipient.length === 1) {\n                this._transactionSetByRecipient.remove(transaction.recipient);\n            } else {\n                byRecipient.remove(transaction.hash());\n            }\n        } else {\n            Log.e(Mempool, `Invalid state: no transactionsByRecipient for ${transaction}`);\n        }\n\n        this._transactionsByHash.remove(transaction.hash());\n    }\n\n    /**\n     * Does *not* remove transaction from transactionsBySender!\n     * @param {Transaction} transaction\n     * @private\n     */\n    _removeTransaction(transaction) {\n        this._transactionsByHash.remove(transaction.hash());\n\n        // TODO: Optimise remove from this._transactionsByMinFee.\n        this._transactionsByFeePerByte.remove(transaction);\n\n        /** @type {HashSet.<Hash>} */\n        const byRecipient = this._transactionSetByRecipient.get(transaction.recipient);\n        if (byRecipient) {\n            if (byRecipient.length === 1) {\n                this._transactionSetByRecipient.remove(transaction.recipient);\n            } else {\n                byRecipient.remove(transaction.hash());\n            }\n        } else {\n            Log.e(Mempool, `Invalid state: no transactionsByRecipient for ${transaction}`);\n        }\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Transaction}\n     */\n    getTransaction(hash) {\n        return this._transactionsByHash.get(hash);\n    }\n\n    /**\n     * @param {number} [maxSize]\n     * @param {number} [minFeePerByte]\n     * @returns {Array.<Transaction>}\n     */\n    *transactionGenerator(maxSize = Infinity, minFeePerByte = 0) {\n        let size = 0;\n        for (const /** @type {Transaction} */ tx of this._transactionsByFeePerByte) {\n            const txSize = tx.serializedSize;\n            if (size + txSize >= maxSize) continue;\n            if (tx.feePerByte < minFeePerByte) break;\n\n            yield tx;\n            size += txSize;\n        }\n    }\n\n    /**\n     * @param {number} [maxSize]\n     * @param {number} [minFeePerByte]\n     * @returns {Array.<Transaction>}\n     */\n    getTransactions(maxSize = Infinity, minFeePerByte = 0) {\n        return Array.from(this.transactionGenerator(maxSize, minFeePerByte));\n    }\n\n    /**\n     * @param {number} maxSize\n     * @returns {Promise.<Array.<Transaction>>}\n     */\n    async getTransactionsForBlock(maxSize) {\n        const transactions = this.getTransactions(maxSize);\n        const prunedAccounts = await this._accounts.gatherToBePrunedAccounts(transactions, this._blockchain.height + 1, this._blockchain.transactionCache);\n        const prunedAccountsSize = prunedAccounts.reduce((sum, acc) => sum + acc.serializedSize, 0);\n\n        let size = prunedAccountsSize + transactions.reduce((sum, tx) => sum + tx.serializedSize, 0);\n        while (size > maxSize) {\n            size -= transactions.pop().serializedSize;\n        }\n\n        transactions.sort((a, b) => a.compareBlockOrder(b));\n        return transactions;\n    }\n\n    /**\n     * @param {Address} address\n     * @return {Array.<Transaction>}\n     */\n    getPendingTransactions(address) {\n        return this.getTransactionsBySender(address);\n    }\n\n    /**\n     * @param {Address} address\n     * @return {Array.<Transaction>}\n     */\n    getTransactionsBySender(address) {\n        /** @type {MempoolTransactionSet} */\n        const set = this._transactionSetBySender.get(address);\n        return set ? set.transactions : [];\n    }\n\n    /**\n     * @param {Address} address\n     * @return {Array.<Transaction>}\n     */\n    getTransactionsByRecipient(address) {\n        /** @type {HashSet.<Hash>} */\n        const set = this._transactionSetByRecipient.get(address);\n        if (!set) {\n            return [];\n        }\n\n        /** @type {Array.<Transaction>} */\n        const transactions = [];\n        for (const hash of set.valueIterator()) {\n            const tx = this._transactionsByHash.get(hash);\n            Assert.that(!!tx);\n            transactions.push(tx);\n        }\n        return transactions;\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     * @param {number} [maxTransactions]\n     * @return {Array.<Transaction>}\n     */\n    getTransactionsByAddresses(addresses, maxTransactions = Infinity) {\n        const transactions = [];\n        for (const address of addresses) {\n            // Fetch transactions by sender first\n            /** @type {Array.<Transaction>} */\n            const bySender = this.getTransactionsBySender(address);\n            for (const tx of bySender) {\n                if (transactions.length >= maxTransactions) return transactions;\n                transactions.push(tx);\n            }\n\n            // Fetch transactions by recipient second\n            /** @type {Array.<Transaction>} */\n            const byRecipient = this.getTransactionsByRecipient(address);\n            for (const tx of byRecipient) {\n                if (transactions.length >= maxTransactions) return transactions;\n                transactions.push(tx);\n            }\n        }\n        return transactions;\n    }\n\n    /**\n     * @param {number} minFeePerByte\n     */\n    evictBelowMinFeePerByte(minFeePerByte) {\n        /** @type {Transaction} */\n        let transaction = this._transactionsByFeePerByte.peekLast();\n        while (transaction && transaction.feePerByte < minFeePerByte) {\n            this._transactionsByFeePerByte.pop();\n\n            this._transactionsByHash.remove(transaction.hash());\n\n            /** @type {MempoolTransactionSet} */\n            const bySender = this._transactionSetBySender.get(transaction.sender);\n            if (bySender.length === 1) {\n                this._transactionSetBySender.remove(transaction.sender);\n            } else {\n                bySender.remove(transaction);\n            }\n            /** @type {HashSet.<Hash>} */\n            const byRecipient = this._transactionSetByRecipient.get(transaction.recipient);\n            if (byRecipient.length === 1) {\n                this._transactionSetByRecipient.remove(transaction.recipient);\n            } else {\n                byRecipient.remove(transaction.hash());\n            }\n\n            transaction = this._transactionsByFeePerByte.peekLast();\n        }\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise}\n     * @private\n     */\n    _restoreTransactions(block) {\n        return this._synchronizer.push(async () => {\n            for (const tx of block.transactions) {\n                await this._pushTransaction(tx);\n            }\n        });\n    }\n\n    /**\n     * @fires Mempool#transactions-ready\n     * @returns {Promise}\n     * @private\n     */\n    _evictTransactions() {\n        return this._synchronizer.push(() => this.__evictTransactions());\n    }\n\n    /**\n     * @fires Mempool#transactions-ready\n     * @returns {Promise}\n     * @private\n     */\n    async __evictTransactions() {\n        // Evict all transactions from the pool that have become invalid due\n        // to changes in the account state (i.e. typically because the were included\n        // in a newly mined block). No need to re-check signatures.\n        for (const sender of this._transactionSetBySender.keys()) {\n            /** @type {MempoolTransactionSet} */\n            const set = this._transactionSetBySender.get(sender);\n\n            try {\n                const senderAccount = await this._accounts.get(set.sender, set.senderType);\n\n                // If a transaction in the set is not valid anymore,\n                // we try to construct a new set based on the heuristic of including\n                // high fee/byte transactions first.\n                const transactions = [];\n                let account = senderAccount;\n                for (const tx of set.transactions) {\n                    try {\n                        const tmpAccount = account.withOutgoingTransaction(tx, this._blockchain.height + 1, this._blockchain.transactionCache);\n\n                        const recipientAccount = await this._accounts.get(tx.recipient);\n                        recipientAccount.withIncomingTransaction(tx, this._blockchain.height + 1);\n\n                        transactions.push(tx);\n                        account = tmpAccount;\n                    } catch (e) {\n                        // Remove transaction\n                        this._removeTransaction(tx);\n                    }\n                }\n                if (transactions.length === 0) {\n                    this._transactionSetBySender.remove(sender);\n                } else {\n                    this._transactionSetBySender.put(sender, new MempoolTransactionSet(transactions));\n                }\n            } catch (e) {\n                // In case of an error, remove all transactions of this set.\n                for (const tx of set.transactions) {\n                    this._removeTransaction(tx);\n                }\n                this._transactionSetBySender.remove(sender);\n            }\n        }\n\n        // Tell listeners that the pool has updated after a blockchain head change.\n        /**\n         * @event Mempool#transactions-ready\n         */\n        this.fire('transactions-ready');\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._transactionsByHash.length;\n    }\n}\n\n/**\n * Fee threshold in sat/byte below which transactions are considered \"free\".\n * @type {number}\n */\nMempool.TRANSACTION_RELAY_FEE_MIN = 1;\n/**\n * Maximum number of transactions per sender.\n * @type {number}\n */\nMempool.TRANSACTIONS_PER_SENDER_MAX = 500;\n/**\n * Maximum number of \"free\" transactions per sender.\n * @type {number}\n */\nMempool.FREE_TRANSACTIONS_PER_SENDER_MAX = 10;\n/**\n * Maximum number of transactions in the mempool.\n * @type {number}\n */\nMempool.SIZE_MAX = 100000;\n\n/** @enum {number} */\nMempool.ReturnCode = {\n    FEE_TOO_LOW: -2,\n    INVALID: -1,\n\n    ACCEPTED: 1,\n    KNOWN: 2\n};\n\nClass.register(Mempool);\n","class InvRequestManager {\n    constructor() {\n        /** @type {HashMap.<InvVector, {current: BaseConsensusAgent, waiting: Set.<BaseConsensusAgent>}>} */\n        this._vectorsToRequest = new HashMap();\n        /** @type {Timers} */\n        this._timers = new Timers();\n    }\n\n    /**\n     * @param {BaseConsensusAgent} agent\n     * @param {InvVector} vector\n     */\n    askToRequestVector(agent, vector) {\n        if (agent.syncing || this._vectorsToRequest.length > InvRequestManager.MAX_INV_MANAGED) {\n            agent.requestVector(vector);\n            return;\n        }\n        if (this._vectorsToRequest.contains(vector)) {\n            const o = this._vectorsToRequest.get(vector);\n            if (o.current.peer.channel.closed) {\n                o.current = null;\n            }\n            if (o.current === null) {\n                o.current = agent;\n                this._request(vector);\n            } else {\n                o.waiting.add(agent);\n            }\n        } else {\n            this._vectorsToRequest.put(vector, {current: agent, waiting: new Set()});\n            this._request(vector);\n        }\n    }\n\n    /**\n     * @param {InvVector} vector\n     * @private\n     */\n    _request(vector) {\n        Assert.that(this._vectorsToRequest.contains(vector));\n        const agent = this._vectorsToRequest.get(vector).current;\n        Assert.that(agent);\n        agent.requestVector(vector);\n        this._timers.resetTimeout(vector.hash, () => this.noteVectorNotReceived(agent, vector), InvRequestManager.MAX_TIME_PER_VECTOR);\n    }\n\n    /**\n     * @param {BaseConsensusAgent} agent\n     * @param {InvVector} vector\n     */\n    noteVectorNotReceived(agent, vector) {\n        this._timers.clearTimeout(vector.hash);\n        if (this._vectorsToRequest.contains(vector)) {\n            const o = this._vectorsToRequest.get(vector);\n            if (o.current !== agent) return;\n            o.current = null;\n            if (o.waiting.size !== 0) {\n                o.current = o.waiting.values().next().value;\n                o.waiting.delete(o.current);\n                this._request(vector);\n            }\n            if (o.current === null) {\n                this._vectorsToRequest.remove(vector);\n            }\n        }\n    }\n\n    noteVectorReceived(vector) {\n        this._timers.clearTimeout(vector.hash);\n        this._vectorsToRequest.remove(vector);\n    }\n}\n\nInvRequestManager.MAX_TIME_PER_VECTOR = 10000;\nInvRequestManager.MAX_INV_MANAGED = 10000;\n\nClass.register(InvRequestManager);\n","/**\n * @abstract\n */\nclass BaseConsensusAgent extends Observable {\n    /**\n     * @param {Time} time\n     * @param {Peer} peer\n     * @param {InvRequestManager} invRequestManager\n     * @param {Subscription} [targetSubscription]\n     */\n    constructor(time, peer, invRequestManager, targetSubscription) {\n        super();\n        /** @type {Time} */\n        this._time = time;\n        /** @type {Peer} */\n        this._peer = peer;\n\n        // Flag indicating that have synced our blockchain with the peer's.\n        /** @type {boolean} */\n        this._synced = false;\n\n        // Set of all objects (InvVectors) that we think the remote peer knows.\n        /** @type {HashSet.<InvVector>} */\n        this._knownObjects = new HashSet();\n        this._knownObjects.add(new InvVector(InvVector.Type.BLOCK, peer.headHash));\n\n        // InvVectors we want to request via getData are collected here and\n        // periodically requested.\n        /** @type {UniqueQueue.<InvVector>} */\n        this._blocksToRequest = new UniqueQueue();\n        /** @type {ThrottledQueue.<InvVector>} */\n        this._txsToRequest = new ThrottledQueue(\n            BaseConsensusAgent.TRANSACTIONS_AT_ONCE + BaseConsensusAgent.FREE_TRANSACTIONS_AT_ONCE,\n            BaseConsensusAgent.TRANSACTIONS_PER_SECOND + BaseConsensusAgent.FREE_TRANSACTIONS_PER_SECOND,\n            1000, BaseConsensusAgent.REQUEST_TRANSACTIONS_WAITING_MAX);\n\n        // Objects that are currently being requested from the peer.\n        /** @type {HashSet.<InvVector>} */\n        this._objectsInFlight = new HashSet();\n\n        // All objects that were requested from the peer but not received yet.\n        /** @type {HashSet.<InvVector>} */\n        this._objectsThatFlew = new HashSet();\n\n        // Objects that are currently being processed by the blockchain/mempool.\n        /** @type {HashSet.<InvVector>} */\n        this._objectsProcessing = new HashSet();\n\n        // A Subscription object specifying which objects should be announced to the peer.\n        // Initially, we don't announce anything to the peer until it tells us otherwise.\n        /** @type {Subscription} */\n        this._remoteSubscription = Subscription.NONE;\n        // Subscribe to all announcements from the peer.\n        /** @type {Subscription} */\n        this._localSubscription = Subscription.NONE;\n        this._lastSubscriptionChange = null;\n        /** @type {Subscription} */\n        this._targetSubscription = targetSubscription || Subscription.ANY;\n\n        // Helper object to keep track of timeouts & intervals.\n        /** @type {Timers} */\n        this._timers = new Timers();\n\n        // Queue of transaction inv vectors waiting to be sent out\n        /** @type {ThrottledQueue.<InvVector>} */\n        this._waitingInvVectors = new ThrottledQueue(\n            BaseConsensusAgent.TRANSACTIONS_AT_ONCE,\n            BaseConsensusAgent.TRANSACTIONS_PER_SECOND,\n            1000, BaseConsensusAgent.REQUEST_TRANSACTIONS_WAITING_MAX);\n        this._timers.setInterval('invVectors', () => this._sendWaitingInvVectors(), BaseConsensusAgent.TRANSACTION_RELAY_INTERVAL);\n\n        // Queue of \"free\" transaction inv vectors waiting to be sent out\n        /** @type {ThrottledQueue.<{serializedSize:number, vector:InvVector}>} */\n        this._waitingFreeInvVectors = new ThrottledQueue(\n            BaseConsensusAgent.FREE_TRANSACTIONS_AT_ONCE,\n            BaseConsensusAgent.FREE_TRANSACTIONS_PER_SECOND,\n            1000, BaseConsensusAgent.REQUEST_TRANSACTIONS_WAITING_MAX);\n        this._timers.setInterval('freeInvVectors', () => this._sendFreeWaitingInvVectors(), BaseConsensusAgent.FREE_TRANSACTION_RELAY_INTERVAL);\n\n        // Helper object to keep track of block proofs we're requesting.\n        this._blockProofRequest = null;\n\n        // Helper object to keep track of transaction proofs we're requesting.\n        this._transactionsProofRequest = null;\n\n        // Helper object to keep track of transaction receipts we're requesting.\n        this._transactionReceiptsRequest = null;\n\n        /** @type {MultiSynchronizer} */\n        this._synchronizer = new MultiSynchronizer();\n\n        /** @type {InvRequestManager} */\n        this._invRequestManager = invRequestManager;\n\n        // Listen to consensus messages from the peer.\n        peer.channel.on('inv', msg => this._onInv(msg));\n        peer.channel.on('block', msg => this._onBlock(msg));\n        peer.channel.on('header', msg => this._onHeader(msg));\n        peer.channel.on('tx', msg => this._onTx(msg));\n        peer.channel.on('not-found', msg => this._onNotFound(msg));\n\n        peer.channel.on('subscribe', msg => this._onSubscribe(msg));\n        peer.channel.on('get-data', msg => this._onGetData(msg));\n        peer.channel.on('get-header', msg => this._onGetHeader(msg));\n\n        peer.channel.on('block-proof', msg => this._onBlockProof(msg));\n        peer.channel.on('transactions-proof', msg => this._onTransactionsProof(msg));\n        peer.channel.on('transaction-receipts', msg => this._onTransactionReceipts(msg));\n\n        peer.channel.on('get-head', msg => this._onGetHead(msg));\n        peer.channel.on('head', msg => this._onHead(msg));\n\n        // Clean up when the peer disconnects.\n        peer.channel.on('close', () => this._onClose());\n\n        this._requestHead();\n    }\n\n    _requestHead() {\n        this._peer.channel.getHead();\n    }\n\n    onHeadUpdated() {\n        this._timers.resetTimeout('get-next-head', () => this._requestHead(), BaseConsensusAgent.HEAD_REQUEST_INTERVAL);\n    }\n\n    /**\n     * @param {GetHeadMessage} msg\n     * @private\n     */\n    _onGetHead(msg) {\n        this._peer.channel.head(this._blockchain.head.header);\n    }\n\n    /**\n     * @param {HeadMessage} msg\n     */\n    _onHead(msg) {\n        this._peer.head = msg.header;\n        this.onHeadUpdated();\n    }\n\n    /**\n     * @param {Subscription} subscription\n     */\n    subscribe(subscription) {\n        this._targetSubscription = subscription;\n        this._subscribe(subscription);\n    }\n\n    _subscribeTarget() {\n        this._subscribe(this._targetSubscription);\n    }\n\n    /**\n     * @param {Subscription} subscription\n     */\n    _subscribe(subscription) {\n        this._localSubscription = subscription;\n        this._lastSubscriptionChange = Date.now();\n        this._peer.channel.subscribe(this._localSubscription);\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {boolean}\n     */\n    relayBlock(block) {\n        // Don't relay block if have not synced with the peer yet.\n        if (!this._synced) {\n            return false;\n        }\n\n        // Only relay block if it matches the peer's subscription.\n        if (!this._remoteSubscription.matchesBlock(block)) {\n            return false;\n        }\n\n        // Create InvVector.\n        const vector = InvVector.fromBlock(block);\n\n        // Don't relay block to this peer if it already knows it.\n        if (this._knownObjects.contains(vector)) {\n            return false;\n        }\n\n        // Relay block to peer.\n        this._peer.channel.inv([vector, ...this._waitingInvVectors.dequeueMulti(BaseInventoryMessage.VECTORS_MAX_COUNT - 1)]);\n\n        // Assume that the peer knows this block now.\n        this._knownObjects.add(vector);\n\n        return true;\n    }\n\n    _sendWaitingInvVectors() {\n        const invVectors = this._waitingInvVectors.dequeueMulti(BaseInventoryMessage.VECTORS_MAX_COUNT);\n        if (invVectors.length > 0) {\n            this._peer.channel.inv(invVectors);\n            Log.v(BaseConsensusAgent, () => `[INV] Sent ${invVectors.length} vectors to ${this._peer.peerAddress}`);\n        }\n    }\n\n    _sendFreeWaitingInvVectors() {\n        const invVectors = [];\n        let size = 0;\n        while (invVectors.length <= BaseInventoryMessage.VECTORS_MAX_COUNT && this._waitingFreeInvVectors.length > 0\n            && size < BaseConsensusAgent.FREE_TRANSACTION_SIZE_PER_INTERVAL) {\n            const {serializedSize, vector} = this._waitingFreeInvVectors.dequeue();\n            invVectors.push(vector);\n            size += serializedSize;\n        }\n        if (invVectors.length > 0) {\n            this._peer.channel.inv(invVectors);\n            Log.v(BaseConsensusAgent, () => `[INV] Sent ${invVectors.length} vectors to ${this._peer.peerAddress}`);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    relayTransaction(transaction) {\n        // Only relay transaction if it matches the peer's subscription.\n        if (!this._remoteSubscription.matchesTransaction(transaction)) {\n            return false;\n        }\n\n        // Create InvVector.\n        const vector = InvVector.fromTransaction(transaction);\n\n        // Don't relay transaction to this peer if it already knows it.\n        if (this._knownObjects.contains(vector)) {\n            return false;\n        }\n\n        // Relay transaction to peer later.\n        const serializedSize = transaction.serializedSize;\n        if (transaction.fee / serializedSize < BaseConsensusAgent.TRANSACTION_RELAY_FEE_MIN) {\n            this._waitingFreeInvVectors.enqueue({serializedSize, vector});\n        } else {\n            this._waitingInvVectors.enqueue(vector);\n        }\n\n        // Assume that the peer knows this transaction now.\n        this._knownObjects.add(vector);\n\n        return true;\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @returns {boolean}\n     */\n    knowsBlock(blockHash) {\n        const vector = new InvVector(InvVector.Type.BLOCK, blockHash);\n        return this._knownObjects.contains(vector);\n    }\n\n    /**\n     * @param {SubscribeMessage} msg\n     * @protected\n     */\n    _onSubscribe(msg) {\n        Log.d(BaseConsensusAgent, `[SUBSCRIBE] ${this._peer.peerAddress} ${msg.subscription}`);\n        this._remoteSubscription = msg.subscription;\n    }\n\n    /**\n     * @param {InvMessage} msg\n     * @returns {Promise.<void>}\n     * @protected\n     */\n    async _onInv(msg) {\n        // Keep track of the objects the peer knows.\n        for (const vector of msg.vectors) {\n            this._knownObjects.add(vector);\n            this._waitingInvVectors.remove(vector);\n            this._waitingFreeInvVectors.remove(vector);\n        }\n\n        // Check which of the advertised objects we know\n        // Request unknown objects, ignore known ones.\n        const unknownBlocks = [];\n        const unknownTxs = [];\n        for (const vector of msg.vectors) {\n            // Ignore objects that we are currently requesting / processing.\n            if (this._objectsInFlight.contains(vector) || this._objectsProcessing.contains(vector)) {\n                continue;\n            }\n\n            // Filter out objects that we are not interested in.\n            if (!this._shouldRequestData(vector)) {\n                continue;\n            }\n\n            switch (vector.type) {\n                case InvVector.Type.BLOCK: {\n                    const block = await this._getBlock(vector.hash, /*includeForks*/ true); // eslint-disable-line no-await-in-loop\n                    if (!block) {\n                        unknownBlocks.push(vector);\n                        this._onNewBlockAnnounced(vector.hash);\n                    } else {\n                        this._onKnownBlockAnnounced(vector.hash, block);\n                    }\n                    break;\n                }\n                case InvVector.Type.TRANSACTION: {\n                    const transaction = await this._getTransaction(vector.hash); // eslint-disable-line no-await-in-loop\n                    if (!transaction) {\n                        unknownTxs.push(vector);\n                        this._onNewTransactionAnnounced(vector.hash);\n                    } else {\n                        this._onKnownTransactionAnnounced(vector.hash, transaction);\n                    }\n                    break;\n                }\n                default:\n                    throw `Invalid inventory type: ${vector.type}`;\n            }\n        }\n\n        Log.v(BaseConsensusAgent, () => `[INV] ${msg.vectors.length} vectors (${unknownBlocks.length} new blocks, ${unknownTxs.length} new txs) received from ${this._peer.peerAddress}`);\n\n        if (unknownBlocks.length > 0 || unknownTxs.length > 0) {\n            for (const vector of unknownBlocks) {\n                this._invRequestManager.askToRequestVector(this, vector);\n            }\n            for (const vector of unknownTxs) {\n                this._invRequestManager.askToRequestVector(this, vector);\n            }\n        } else {\n            this._onNoUnknownObjects();\n        }\n    }\n\n    /**\n     * @param {InvVector} vector\n     */\n    requestVector(...vector) {\n        // Store unknown vectors in objectsToRequest.\n        this._blocksToRequest.enqueueAllNew(vector.filter(v => v.type === InvVector.Type.BLOCK));\n        this._txsToRequest.enqueueAllNew(vector.filter(v => v.type === InvVector.Type.TRANSACTION));\n\n        // Clear the request throttle timeout.\n        this._timers.clearTimeout('inv');\n\n        // If there are enough objects queued up, send out a getData request.\n        if (this._blocksToRequest.length + this._txsToRequest.available >= BaseConsensusAgent.REQUEST_THRESHOLD) {\n            this._requestData();\n        }\n        // Otherwise, wait a short time for more inv messages to arrive, then request.\n        else {\n            this._timers.setTimeout('inv', () => this._requestData(), BaseConsensusAgent.REQUEST_THROTTLE);\n        }\n    }\n\n    /**\n     * @param {InvVector} vector\n     * @returns {boolean}\n     * @protected\n     */\n    _shouldRequestData(vector) {\n        return true;\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?Block>}\n     * @protected\n     * @abstract\n     */\n    _getBlock(hash, includeForks = false, includeBody = false) {\n        // MUST be implemented by subclasses.\n        throw new Error('not implemented');\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @returns {Promise.<?Uint8Array>}\n     * @protected\n     * @abstract\n     */\n    _getRawBlock(hash, includeForks = false) {\n        // MUST be implemented by subclasses.\n        throw new Error('not implemented');\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Promise.<?Transaction>}\n     * @protected\n     * @abstract\n     */\n    _getTransaction(hash) {\n        // MUST be implemented by subclasses.\n        throw new Error('not implemented');\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {void}\n     * @protected\n     */\n    _onNewBlockAnnounced(hash) {\n    }\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @returns {void}\n     * @protected\n     */\n    _onKnownBlockAnnounced(hash, block) {\n    }\n    /**\n     * @param {Hash} hash\n     * @returns {void}\n     * @protected\n     */\n    _onNewTransactionAnnounced(hash) {\n    }\n    /**\n     * @param {Hash} hash\n     * @param {Transaction} transaction\n     * @returns {void}\n     * @protected\n     */\n    _onKnownTransactionAnnounced(hash, transaction) {\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     */\n    _requestData() {\n        // Only one request at a time.\n        if (!this._objectsInFlight.isEmpty()) return;\n\n        // Don't do anything if there are no objects queued to request.\n        if (this._blocksToRequest.isEmpty() && !this._txsToRequest.isAvailable()) return;\n\n        // Request queued objects from the peer. Only request up to VECTORS_MAX_COUNT objects at a time.\n        const vectorsMaxCount = BaseInventoryMessage.VECTORS_MAX_COUNT;\n        /** @type {Array.<InvVector>} */\n        let vectors = this._blocksToRequest.dequeueMulti(vectorsMaxCount);\n        if (vectors.length < vectorsMaxCount) {\n            vectors = vectors.concat(this._txsToRequest.dequeueMulti(vectorsMaxCount - vectors.length));\n        }\n\n        // Mark the requested objects as in-flight.\n        this._objectsInFlight.addAll(vectors);\n\n        // Request data from peer.\n        this._doRequestData(vectors);\n\n        // Set timer to detect end of request / missing objects\n        this._timers.setTimeout('getData', () => this._noMoreData(), BaseConsensusAgent.REQUEST_TIMEOUT);\n    }\n\n    /**\n     * @param {Array.<InvVector>} vectors\n     * @returns {void}\n     * @protected\n     */\n    _doRequestData(vectors) {\n        this._peer.channel.getData(vectors);\n    }\n\n    /**\n     * @param {BlockMessage} msg\n     * @return {Promise.<void>}\n     * @protected\n     */\n    async _onBlock(msg) {\n        const hash = msg.block.hash();\n\n        // Check if we have requested this block.\n        const vector = new InvVector(InvVector.Type.BLOCK, hash);\n        if (!this._objectsInFlight.contains(vector) && !this._objectsThatFlew.contains(vector)) {\n            Log.w(BaseConsensusAgent, `Unsolicited block ${hash} received from ${this._peer.peerAddress}, discarding`);\n            return;\n        }\n\n        // Reuse already known (verified) transactions\n        const transactions = msg.block.isFull() ? msg.block.body.transactions : [];\n        const transactionPromises = transactions.map(t => this._getTransaction(t.hash()));\n        for (let i = 0; i < transactions.length; i++) {\n            const transaction = await transactionPromises[i]; // eslint-disable-line no-await-in-loop\n            if (transaction) {\n                transactions[i] = transaction;\n            }\n        }\n\n        if ((!this._peer.head && this._peer.headHash.equals(hash)) || (this._peer.head && this._peer.head.height < msg.block.height)) {\n            this._peer.head = msg.block.header;\n            this.onHeadUpdated();\n        }\n\n        // Mark object as received.\n        this._onObjectReceived(vector);\n\n        // Process block.\n        this._objectsProcessing.add(vector);\n        await this._processBlock(hash, msg.block);\n\n        // Mark object as processed.\n        this._onObjectProcessed(vector);\n\n        this._invRequestManager.noteVectorReceived(InvVector.fromBlock(msg.block));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @returns {Promise.<void>}\n     * @protected\n     */\n    async _processBlock(hash, block) {\n    }\n\n    /**\n     * @param {HeaderMessage} msg\n     * @return {Promise.<void>}\n     * @protected\n     */\n    async _onHeader(msg) {\n        const hash = msg.header.hash();\n\n        // Check if we have requested this header.\n        const vector = new InvVector(InvVector.Type.BLOCK, hash);\n        if (!this._objectsInFlight.contains(vector) && !this._objectsThatFlew.contains(vector)) {\n            Log.w(BaseConsensusAgent, `Unsolicited header ${hash} received from ${this._peer.peerAddress}, discarding`);\n            return;\n        }\n\n        if ((!this._peer.head && this._peer.headHash.equals(hash)) || (this._peer.head && this._peer.head.height < msg.header.height)) {\n            this._peer.head = msg.header;\n            this.onHeadUpdated();\n        }\n\n        // Mark object as received.\n        this._onObjectReceived(vector);\n\n        // Process header.\n        this._objectsProcessing.add(vector);\n        await this._processHeader(hash, msg.header);\n\n        // Mark object as processed.\n        this._onObjectProcessed(vector);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {BlockHeader} header\n     * @returns {Promise.<void>}\n     * @protected\n     */\n    async _processHeader(hash, header) {\n    }\n\n    /**\n     * @param {TxMessage} msg\n     * @return {Promise}\n     * @protected\n     */\n    async _onTx(msg) {\n        const hash = msg.transaction.hash();\n        //Log.d(BaseConsensusAgent, () => `[TX] Received transaction ${hash} from ${this._peer.peerAddress}`);\n\n        // Check if we have requested this transaction.\n        const vector = new InvVector(InvVector.Type.TRANSACTION, hash);\n        if (!this._objectsInFlight.contains(vector) && !this._objectsThatFlew.contains(vector)) {\n            Log.w(BaseConsensusAgent, `Unsolicited transaction ${hash} received from ${this._peer.peerAddress}, discarding`);\n            return;\n        }\n\n        this._invRequestManager.noteVectorReceived(InvVector.fromTransaction(msg.transaction));\n\n        // Mark object as received.\n        this._onObjectReceived(vector);\n\n        // Process transaction.\n        this._objectsProcessing.add(vector);\n\n        // Check whether we subscribed for this transaction.\n        if (this._localSubscription.matchesTransaction(msg.transaction)) {\n            await this._processTransaction(hash, msg.transaction);\n        } else if (this._lastSubscriptionChange + BaseConsensusAgent.SUBSCRIPTION_CHANGE_GRACE_PERIOD > Date.now()) {\n            this._peer.channel.close(CloseType.RECEIVED_TRANSACTION_NOT_MATCHING_OUR_SUBSCRIPTION, 'received transaction not matching our subscription');\n        }\n\n        // Mark object as processed.\n        this._onObjectProcessed(vector);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Transaction} transaction\n     * @returns {Promise.<void>}\n     * @protected\n     */\n    async _processTransaction(hash, transaction) {\n    }\n\n    /**\n     * @param {NotFoundMessage} msg\n     * @returns {void}\n     * @protected\n     */\n    _onNotFound(msg) {\n        Log.d(BaseConsensusAgent, `[NOTFOUND] ${msg.vectors.length} unknown objects received from ${this._peer.peerAddress}`);\n\n        // Remove unknown objects from in-flight list.\n        for (const vector of msg.vectors) {\n            if (!this._objectsInFlight.contains(vector)) {\n                continue;\n            }\n            this._invRequestManager.noteVectorNotReceived(this, vector);\n\n            // Mark object as received.\n            this._onObjectReceived(vector);\n        }\n    }\n\n    /**\n     * @param {InvVector} vector\n     * @returns {void}\n     * @protected\n     */\n    _onObjectReceived(vector) {\n        if (this._objectsInFlight.isEmpty()) return;\n\n        // Remove the vector from objectsInFlight.\n        this._objectsInFlight.remove(vector);\n\n        // Reset the request timeout if we expect more objects to come.\n        if (!this._objectsInFlight.isEmpty()) {\n            this._timers.resetTimeout('getData', () => this._noMoreData(), BaseConsensusAgent.REQUEST_TIMEOUT);\n        } else {\n            this._noMoreData();\n        }\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     */\n    _noMoreData() {\n        // Cancel the request timeout timer.\n        this._timers.clearTimeout('getData');\n\n        for(const vector of this._objectsInFlight.values()) {\n            this._invRequestManager.noteVectorNotReceived(this, vector);\n        }\n\n        // Reset objects in flight.\n        this._objectsThatFlew.addAll(this._objectsInFlight.values());\n        this._objectsInFlight.clear();\n\n        // If there are more objects to request, request them.\n        if (!this._blocksToRequest.isEmpty() || this._txsToRequest.isAvailable()) {\n            this._requestData();\n        } else {\n            this._onAllObjectsReceived();\n        }\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     */\n    _onNoUnknownObjects() {\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     */\n    _onAllObjectsReceived() {\n    }\n\n    /**\n     * @param {InvVector} vector\n     * @returns {void}\n     * @protected\n     */\n    _onObjectProcessed(vector) {\n        // Remove the vector from objectsProcessing.\n        this._objectsProcessing.remove(vector);\n\n        if (this._objectsProcessing.isEmpty()) {\n            this._onAllObjectsProcessed();\n        }\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     */\n    _onAllObjectsProcessed() {\n    }\n\n    /**\n     * @param {GetDataMessage} msg\n     * @returns {Promise}\n     * @protected\n     */\n    async _onGetData(msg) {\n        // Keep track of the objects the peer knows.\n        for (const vector of msg.vectors) {\n            this._knownObjects.add(vector);\n        }\n\n        // Check which of the requested objects we know.\n        // Send back all known objects.\n        // Send notFound for unknown objects.\n        const unknownObjects = [];\n        for (const vector of msg.vectors) {\n            switch (vector.type) {\n                case InvVector.Type.BLOCK: {\n                    const block = await this._getRawBlock(vector.hash, /*includeForks*/ false); // eslint-disable-line no-await-in-loop\n                    if (block) {\n                        // We have found a requested block, send it back to the sender.\n                        this._peer.channel.rawBlock(block);\n                    } else {\n                        // Requested block is unknown.\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                case InvVector.Type.TRANSACTION: {\n                    const tx = await this._getTransaction(vector.hash); // eslint-disable-line no-await-in-loop\n                    if (tx) {\n                        // We have found a requested transaction, send it back to the sender.\n                        this._peer.channel.tx(tx);\n                    } else {\n                        // Requested transaction is unknown.\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                default:\n                    throw `Invalid inventory type: ${vector.type}`;\n            }\n        }\n\n        // Report any unknown objects back to the sender.\n        if (unknownObjects.length) {\n            this._peer.channel.notFound(unknownObjects);\n        }\n    }\n\n    /**\n     * @param {GetHeaderMessage} msg\n     * @returns {Promise}\n     * @protected\n     */\n    async _onGetHeader(msg) {\n        // Keep track of the objects the peer knows.\n        for (const vector of msg.vectors) {\n            this._knownObjects.add(vector);\n        }\n\n        // Check which of the requested objects we know.\n        // Send back all known objects.\n        // Send notFound for unknown objects.\n        const unknownObjects = [];\n        for (const vector of msg.vectors) {\n            switch (vector.type) {\n                case InvVector.Type.BLOCK: {\n                    const block = await this._getBlock(vector.hash); // eslint-disable-line no-await-in-loop\n                    if (block) {\n                        // We have found a requested block, send it back to the sender.\n                        this._peer.channel.header(block.header);\n                    } else {\n                        // Requested block is unknown.\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                case InvVector.Type.TRANSACTION:\n                default:\n                    throw `Invalid inventory type: ${vector.type}`;\n            }\n        }\n\n        // Report any unknown objects back to the sender.\n        if (unknownObjects.length) {\n            this._peer.channel.notFound(unknownObjects);\n        }\n    }\n\n    /**\n     * @param {Hash} blockHashToProve\n     * @param {Block} knownBlock\n     * @returns {Promise.<Block>}\n     */\n    getBlockProof(blockHashToProve, knownBlock) {\n        return this._synchronizer.push('getBlockProof',\n            this._getBlockProof.bind(this, blockHashToProve, knownBlock));\n    }\n\n    /**\n     * @param {Hash} blockHashToProve\n     * @param {Block} knownBlock\n     * @returns {Promise.<Block>}\n     * @private\n     */\n    _getBlockProof(blockHashToProve, knownBlock) {\n        Assert.that(this._blockProofRequest === null);\n\n        Log.d(BaseConsensusAgent, () => `Requesting BlockProof for ${blockHashToProve} from ${this._peer.peerAddress}`);\n\n        return new Promise((resolve, reject) => {\n            this._blockProofRequest = {\n                blockHashToProve,\n                knownBlock,\n                resolve,\n                reject\n            };\n\n            // Request BlockProof from peer.\n            this._peer.channel.getBlockProof(blockHashToProve, knownBlock.hash());\n\n            this._peer.channel.expectMessage(Message.Type.BLOCK_PROOF, () => {\n                reject(new Error('timeout'));\n            }, BaseConsensusAgent.BLOCK_PROOF_REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * @param {BlockProofMessage} msg\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _onBlockProof(msg) {\n        Log.d(BaseConsensusAgent, () => `[BLOCK-PROOF] Received from ${this._peer.peerAddress}: proof=${msg.proof} (${msg.serializedSize} bytes)`);\n\n        // Check if we have requested a header proof, reject unsolicited ones.\n        if (!this._blockProofRequest) {\n            Log.w(BaseConsensusAgent, `Unsolicited header proof received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n\n        const { blockHashToProve, /** @type {Block} */ knownBlock, resolve, reject } = this._blockProofRequest;\n        this._blockProofRequest = null;\n\n        if (!msg.hasProof() || msg.proof.length === 0) {\n            reject(new Error('Block proof request was rejected'));\n            return;\n        }\n\n        // Check that the tail of the proof corresponds to the requested block.\n        const proof = msg.proof;\n        if (!blockHashToProve.equals(proof.tail.hash())) {\n            Log.w(BaseConsensusAgent, `Received BlockProof with invalid tail block from ${this._peer.peerAddress}`);\n            reject(new Error('Invalid tail block'));\n            return;\n        }\n\n        // Check that the proof links up to our reference block.\n        if (!(await knownBlock.isInterlinkSuccessorOf(proof.head))) {\n            Log.w(BaseConsensusAgent, `Received BlockProof with invalid head block from ${this._peer.peerAddress}`);\n            reject(new Error('Invalid head block'));\n            return;\n        }\n\n        // Verify the proof.\n        if (!(await proof.verify())) {\n            Log.w(BaseConsensusAgent, `Invalid BlockProof received from ${this._peer.peerAddress}`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.INVALID_BLOCK_PROOF, 'Invalid BlockProof');\n            reject(new Error('Invalid BlockProof'));\n            return;\n        }\n\n        // Verify individual blocks.\n        const verificationResults = await Promise.all(proof.blocks.map(block => block.verify(this._time)));\n        if (!verificationResults.every(result => result)) {\n            Log.w(BaseConsensusAgent, `Invalid BlockProof received from ${this._peer.peerAddress}`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.INVALID_BLOCK_PROOF, 'Invalid BlockProof');\n            reject(new Error('Invalid BlockProof'));\n            return;\n        }\n\n        // Return the proven block.\n        resolve(proof.tail);\n    }\n\n    /**\n     * @param {Block} block\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<Array.<Transaction>>}\n     */\n    getTransactionsProof(block, addresses) {\n        return this._synchronizer.push('getTransactionsProof',\n            this._getTransactionsProof.bind(this, block, addresses));\n    }\n\n    /**\n     * @param {Block} block\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<Array.<Transaction>>}\n     * @private\n     */\n    _getTransactionsProof(block, addresses) {\n        Assert.that(this._transactionsProofRequest === null);\n\n        Log.d(BaseConsensusAgent, () => `Requesting TransactionsProof for ${addresses}@${block.height} from ${this._peer.peerAddress}`);\n\n        return new Promise((resolve, reject) => {\n            this._transactionsProofRequest = {\n                addresses,\n                block,\n                resolve,\n                reject,\n            };\n\n            // Request TransactionProof from peer.\n            this._peer.channel.getTransactionsProof(block.hash(), addresses);\n\n            // Drop the peer if it doesn't send the TransactionProof within the timeout.\n            this._peer.channel.expectMessage(Message.Type.TRANSACTIONS_PROOF, () => {\n                this._peer.channel.close(CloseType.GET_TRANSACTIONS_PROOF_TIMEOUT, 'getTransactionsProof timeout');\n                reject(new Error('timeout'));\n            }, BaseConsensusAgent.TRANSACTIONS_PROOF_REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * @param {TransactionsProofMessage} msg\n     * @returns {void}\n     * @private\n     */\n    _onTransactionsProof(msg) {\n        Log.d(BaseConsensusAgent, () => `[TRANSACTIONS-PROOF] Received from ${this._peer.peerAddress}: blockHash=${msg.blockHash}, proof=${msg.proof} (${msg.serializedSize} bytes)`);\n\n        // Check if we have requested a transactions proof, reject unsolicited ones.\n        if (!this._transactionsProofRequest) {\n            Log.w(BaseConsensusAgent, `Unsolicited transactions proof received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n\n        const {/** @type {Block} */ block, resolve, reject} = this._transactionsProofRequest;\n        this._transactionsProofRequest = null;\n\n        if (!msg.hasProof()) {\n            Log.w(BaseConsensusAgent, `TransactionsProof request was rejected by ${this._peer.peerAddress}`);\n            reject(new Error('TransactionsProof request was rejected'));\n            return;\n        }\n\n        // Check that the reference block corresponds to the one we requested.\n        if (!block.hash().equals(msg.blockHash)) {\n            Log.w(BaseConsensusAgent, `Received TransactionsProof for invalid reference block from ${this._peer.peerAddress}`);\n            reject(new Error('Invalid reference block'));\n            return;\n        }\n\n        // Verify the proof.\n        const proof = msg.proof;\n        if (!block.bodyHash.equals(proof.root())) {\n            Log.w(BaseConsensusAgent, `Invalid TransactionsProof received from ${this._peer.peerAddress}`);\n            this._peer.channel.close(CloseType.INVALID_TRANSACTION_PROOF, 'Invalid TransactionsProof');\n            reject(new Error('Invalid TransactionsProof'));\n            return;\n        }\n\n        // TODO Verify that the proof only contains transactions that match the given addresses.\n\n        // Return the retrieved transactions.\n        resolve(proof.transactions);\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise.<Array.<TransactionReceipt>>}\n     */\n    getTransactionReceipts(address) {\n        return this._synchronizer.push('getTransactionReceipts',\n            this._getTransactionReceipts.bind(this, address));\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise.<Array.<TransactionReceipt>>}\n     * @private\n     */\n    _getTransactionReceipts(address) {\n        Assert.that(this._transactionReceiptsRequest === null);\n\n        return new Promise((resolve, reject) => {\n            this._transactionReceiptsRequest = {\n                address,\n                resolve,\n                reject\n            };\n\n            this._peer.channel.getTransactionReceipts(address);\n\n            this._peer.channel.expectMessage(Message.Type.TRANSACTION_RECEIPTS, () => {\n                this._peer.channel.close(CloseType.GET_TRANSACTION_RECEIPTS_TIMEOUT, 'getTransactionReceipts timeout');\n                reject(new Error('timeout'));\n            }, BaseConsensusAgent.TRANSACTION_RECEIPTS_REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * @param {TransactionReceiptsMessage} msg\n     * @returns {void}\n     * @private\n     */\n    _onTransactionReceipts(msg) {\n        Log.d(BaseConsensusAgent, () => `[TRANSACTION-RECEIPTS] Received from ${this._peer.peerAddress}: ${msg.transactionReceipts.length}`);\n\n        // Check if we have requested transaction receipts, reject unsolicited ones.\n        // TODO: How about more than one transactionReceipts message?\n        if (!this._transactionReceiptsRequest) {\n            Log.w(BaseConsensusAgent, `Unsolicited transaction receipts received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n\n        const {resolve} = this._transactionReceiptsRequest;\n        this._transactionReceiptsRequest = null;\n\n        // TODO Verify that the transaction receipts match the given address.\n\n        resolve(msg.transactionReceipts);\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     */\n    _onClose() {\n        this._synchronizer.clear();\n\n        // Clear all timers and intervals when the peer disconnects.\n        this._timers.clearAll();\n        this._txsToRequest.stop();\n        this._waitingInvVectors.stop();\n        this._waitingFreeInvVectors.stop();\n\n        // Notify listeners that the peer has disconnected.\n        this.fire('close', this);\n    }\n\n    /** @type {Peer} */\n    get peer() {\n        return this._peer;\n    }\n\n    /** @type {boolean} */\n    get synced() {\n        return this._synced;\n    }\n\n    /** @type {boolean} */\n    get syncing() {\n        return false;\n    }\n}\n/**\n * Number of InvVectors in invToRequest pool to automatically trigger a get-data request.\n * @type {number}\n */\nBaseConsensusAgent.REQUEST_THRESHOLD = 50;\n/**\n * Time (ms) to wait after the last received inv message before sending get-data.\n * @type {number}\n */\nBaseConsensusAgent.REQUEST_THROTTLE = 500;\n/**\n * Maximum time (ms) to wait after sending out get-data or receiving the last object for this request.\n * @type {number}\n */\nBaseConsensusAgent.REQUEST_TIMEOUT = 1000 * 10;\nBaseConsensusAgent.REQUEST_TRANSACTIONS_WAITING_MAX = 5000;\nBaseConsensusAgent.REQUEST_BLOCKS_WAITING_MAX = 5000;\n/**\n * Maximum time (ms) to wait for block-proof.\n * @type {number}\n */\nBaseConsensusAgent.BLOCK_PROOF_REQUEST_TIMEOUT = 1000 * 10;\n/**\n * Maximum time (ms) to wait for transactions-proof.\n * @type {number}\n */\nBaseConsensusAgent.TRANSACTIONS_PROOF_REQUEST_TIMEOUT = 1000 * 10;\n/**\n * Maximum time (ms) to wait for transactions-receipts.\n * @type {number}\n */\nBaseConsensusAgent.TRANSACTION_RECEIPTS_REQUEST_TIMEOUT = 1000 * 15;\n/**\n * Time interval (ms) to wait between sending out transactions.\n * @type {number}\n */\nBaseConsensusAgent.TRANSACTION_RELAY_INTERVAL = 5000;\nBaseConsensusAgent.TRANSACTIONS_AT_ONCE = 100;\nBaseConsensusAgent.TRANSACTIONS_PER_SECOND = 10;\n/**\n * Time interval (ms) to wait between sending out \"free\" transactions.\n * @type {number}\n */\nBaseConsensusAgent.FREE_TRANSACTION_RELAY_INTERVAL = 6000;\nBaseConsensusAgent.FREE_TRANSACTIONS_AT_ONCE = 10;\nBaseConsensusAgent.FREE_TRANSACTIONS_PER_SECOND = 1;\n/**\n * Soft limit for the total size (bytes) of free transactions per relay interval.\n * @type {number}\n */\nBaseConsensusAgent.FREE_TRANSACTION_SIZE_PER_INTERVAL = 15000; // ~100 legacy transactions\n/**\n * Minimum fee per byte (sat/byte) such that a transaction is not considered free.\n * @type {number}\n */\nBaseConsensusAgent.TRANSACTION_RELAY_FEE_MIN = 1;\n/**\n * Number of ms the peer may send non-matching transactions/blocks after a subscription change.\n * @type {number}\n */\nBaseConsensusAgent.SUBSCRIPTION_CHANGE_GRACE_PERIOD = 1000 * 2;\nBaseConsensusAgent.HEAD_REQUEST_INTERVAL = 100 * 1000; // 100 seconds, give client time to announce new head without request\nClass.register(BaseConsensusAgent);\n","/**\n * @abstract\n */\nclass BaseConsensus extends Observable {\n    /**\n     * @param {BaseChain} blockchain\n     * @param {Observable} mempool\n     * @param {Network} network\n     */\n    constructor(blockchain, mempool, network) {\n        super();\n        /** @type {BaseChain} */\n        this._blockchain = blockchain;\n        /** @type {Network} */\n        this._network = network;\n\n        /** @type {HashMap.<Peer,BaseConsensusAgent>} */\n        this._agents = new HashMap();\n\n        /** @type {Timers} */\n        this._timers = new Timers();\n\n        /** @type {boolean} */\n        this._established = false;\n\n        /** @type {Peer} */\n        this._syncPeer = null;\n\n        /** @type {Subscription} */\n        this._subscription = Subscription.ANY;\n\n        /** @type {InvRequestManager} */\n        this._invRequestManager = new InvRequestManager();\n\n        network.on('peer-joined', peer => this._onPeerJoined(peer));\n        network.on('peer-left', peer => this._onPeerLeft(peer));\n\n        // Notify peers when our blockchain head changes.\n        blockchain.on('head-changed', head => this._onHeadChanged(head));\n\n        // Relay new (verified) transactions to peers.\n        mempool.on('transaction-added', tx => this._onTransactionAdded(tx));\n    }\n\n    /**\n     * @param {Subscription} subscription\n     */\n    subscribe(subscription) {\n        this._subscription = subscription;\n        for (const /** @type {BaseConsensusAgent} */ agent of this._agents.values()) {\n            agent.subscribe(subscription);\n        }\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {BaseConsensusAgent}\n     * @protected\n     */\n    _newConsensusAgent(peer) {\n        throw new Error('not implemented');\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {BaseConsensusAgent}\n     * @protected\n     */\n    _onPeerJoined(peer) {\n        // Create a ConsensusAgent for each peer that connects.\n        const agent = this._newConsensusAgent(peer);\n        this._agents.put(peer.id, agent);\n\n        // Register agent event listeners.\n        agent.on('close', () => this._onPeerLeft(agent.peer));\n        agent.on('sync', () => this._onPeerSynced(agent.peer));\n        agent.on('out-of-sync', () => this._onPeerOutOfSync(agent.peer));\n\n        // If no more peers connect within the specified timeout, start syncing.\n        this._timers.resetTimeout('sync', this._syncBlockchain.bind(this), BaseConsensus.SYNC_THROTTLE);\n\n        return agent;\n    }\n\n    /**\n     * @param {Peer} peer\n     * @protected\n     */\n    _onPeerLeft(peer) {\n        // Reset syncPeer if it left during the sync.\n        if (peer.equals(this._syncPeer)) {\n            Log.d(BaseConsensus, `Peer ${peer.peerAddress} left during sync`);\n            this._syncPeer = null;\n            this.fire('sync-failed', peer.peerAddress);\n        }\n\n        this._agents.remove(peer.id);\n        this._syncBlockchain();\n    }\n\n    /**\n     * @protected\n     */\n    _syncBlockchain() {\n        const candidates = [];\n        let numSyncedFullNodes = 0;\n        for (const /** @type {BaseConsensusAgent} */ agent of this._agents.valueIterator()) {\n            if (!agent.synced) {\n                candidates.push(agent);\n            } else if (Services.isFullNode(agent.peer.peerAddress.services)) {\n                numSyncedFullNodes++;\n            }\n        }\n\n        // Report consensus-lost if we are synced with less than the minimum number of full nodes or have no connections at all.\n        if (this._established && (numSyncedFullNodes < BaseConsensus.MIN_FULL_NODES || this._agents.length === 0)) {\n            this._established = false;\n            this.fire('lost');\n        }\n\n        // Wait for ongoing sync to finish.\n        if (this._syncPeer) {\n            return;\n        }\n\n        // Choose a random peer which we aren't sync'd with yet.\n        const agent = ArrayUtils.randomElement(candidates);\n        if (!agent) {\n            // We are synced with all connected peers.\n\n            // Report consensus-established if we are connected to the minimum number of full nodes.\n            if (numSyncedFullNodes >= BaseConsensus.MIN_FULL_NODES) {\n                if (!this._established) {\n                    Log.i(BaseConsensus, `Synced with all connected peers (${this._agents.length}), consensus established.`);\n                    Log.d(BaseConsensus, `Blockchain: height=${this._blockchain.height}, headHash=${this._blockchain.headHash}`);\n\n                    // Report consensus-established.\n                    this._established = true;\n                    this.fire('established');\n\n                    // Allow inbound network connections after establishing consensus.\n                    this._network.allowInboundConnections = true;\n                }\n            }\n            // Otherwise, wait until more peer connections are established.\n            else {\n                this.fire('waiting');\n            }\n\n            return;\n        }\n\n        this._syncPeer = agent.peer;\n\n        // Notify listeners when we start syncing and have not established consensus yet.\n        if (!this._established) {\n            this.fire('syncing');\n        }\n\n        Log.v(BaseConsensus, `Syncing blockchain with peer ${agent.peer.peerAddress}`);\n        agent.syncBlockchain().catch(Log.w.tag(BaseConsensusAgent));\n    }\n\n    /**\n     * @param {Peer} peer\n     * @protected\n     */\n    _onPeerSynced(peer) {\n        // Reset syncPeer if we finished syncing with it.\n        if (peer.equals(this._syncPeer)) {\n            Log.v(BaseConsensus, `Finished sync with peer ${peer.peerAddress}`);\n            this._syncPeer = null;\n        }\n        this._syncBlockchain();\n    }\n\n    /**\n     * @param {Peer} peer\n     * @protected\n     */\n    _onPeerOutOfSync(peer) {\n        Log.w(BaseConsensus, `Peer ${peer.peerAddress} out of sync, resyncing`);\n        this._syncBlockchain();\n    }\n\n    /**\n     * @param {Block} head\n     * @protected\n     */\n    _onHeadChanged(head) {\n        // Don't announce head changes if we are not synced yet.\n        if (!this._established) return;\n\n        for (const agent of this._agents.values()) {\n            agent.relayBlock(head);\n        }\n    }\n\n    /**\n     * @param {Transaction} tx\n     * @protected\n     */\n    _onTransactionAdded(tx) {\n        // Don't relay transactions if we are not synced yet.\n        if (!this._established) return;\n\n        for (const agent of this._agents.values()) {\n            agent.relayTransaction(tx);\n        }\n    }\n\n    /**\n     * @param {Hash} blockHashToProve\n     * @param {number} blockHeightToProve\n     * @returns {Promise.<Block>}\n     * @protected\n     */\n    async _requestBlockProof(blockHashToProve, blockHeightToProve) {\n        /** @type {Block} */\n        const knownBlock = await this._blockchain.getNearestBlockAt(blockHeightToProve, /*lower*/ false);\n        if (!knownBlock) {\n            throw new Error('No suitable reference block found for BlockProof');\n        }\n\n        if (blockHashToProve.equals(knownBlock.hash())) {\n            return knownBlock;\n        }\n\n        const agents = this._agents.values().filter(agent =>\n            agent.synced\n            && Services.isFullNode(agent.peer.peerAddress.services)\n        );\n\n        // Try agents first that (we think) know the reference block hash.\n        const knownBlockHash = knownBlock.hash();\n        agents.sort((a, b) =>\n            b.knowsBlock(knownBlockHash) !== a.knowsBlock(knownBlockHash)\n                ? -a.knowsBlock(knownBlockHash) + 0.5\n                : Math.random() - 0.5);\n\n        for (const /** @type {BaseConsensusAgent} */ agent of agents) {\n            try {\n                return await agent.getBlockProof(blockHashToProve, knownBlock); // eslint-disable-line no-await-in-loop\n            } catch (e) {\n                Log.w(BaseConsensus, `Failed to retrieve block proof for ${blockHashToProve}@${blockHeightToProve} from ${agent.peer.peerAddress}: ${e.message || e}`);\n                // Try the next peer.\n            }\n        }\n\n        // No peer supplied the requested account, fail.\n        throw new Error(`Failed to retrieve block proof for ${blockHashToProve}`);\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     * @param {Block} [block]\n     * @returns {Promise.<Array<Transaction>>}\n     * @protected\n     */\n    async _requestTransactionsProof(addresses, block = this._blockchain.head) {\n        if (addresses.length === 0) {\n            return [];\n        }\n\n        const agents = this._agents.values().filter(agent =>\n            agent.synced\n            && !Services.isNanoNode(agent.peer.peerAddress.services)\n        );\n\n        // Try agents first that (we think) know the reference block hash.\n        const blockHash = block.hash();\n        agents.sort((a, b) =>\n            b.knowsBlock(blockHash) !== a.knowsBlock(blockHash)\n                ? -a.knowsBlock(blockHash) + 0.5\n                : Math.random() - 0.5);\n\n        for (const /** @type {BaseConsensusAgent} */ agent of agents) {\n            try {\n                return await agent.getTransactionsProof(block, addresses); // eslint-disable-line no-await-in-loop\n            } catch (e) {\n                Log.w(BaseConsensus, `Failed to retrieve transactions proof for ${addresses} from ${agent.peer.peerAddress}: ${e.message || e}`);\n                // Try the next peer.\n            }\n        }\n\n        // No peer supplied the requested proof, fail.\n        throw new Error(`Failed to retrieve transactions proof for ${addresses}`);\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise.<Array.<TransactionReceipt>>}\n     * @protected\n     */\n    async _requestTransactionReceipts(address) {\n        const agents = this._agents.values().filter(agent =>\n            agent.synced\n            && Services.isFullNode(agent.peer.peerAddress.services)\n        ).sort(() => Math.random() - 0.5);\n\n        for (const /** @type {BaseConsensusAgent} */ agent of agents) {\n            try {\n                return await agent.getTransactionReceipts(address); // eslint-disable-line no-await-in-loop\n            } catch (e) {\n                Log.w(BaseConsensus, `Failed to retrieve transaction receipts for ${address} from ${agent.peer.peerAddress}: ${e.message || e}`);\n                // Try the next peer.\n            }\n        }\n\n        // No peer supplied the requested receipts, fail.\n        throw new Error(`Failed to retrieve transaction receipts for ${address}`);\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise.<Array.<{transaction: Transaction, header: BlockHeader}>>}\n     * @protected\n     */\n    async _requestTransactionHistory(address) {\n        // 1. Get transaction receipts.\n        const receipts = await this._requestTransactionReceipts(address);\n\n        // 2. Request proofs for missing blocks.\n        /** @type {Array.<Promise.<Block>>} */\n        const blockRequests = [];\n        let lastBlockHash = null;\n        for (const receipt of receipts) {\n            if (!receipt.blockHash.equals(lastBlockHash)) {\n                // eslint-disable-next-line no-await-in-loop\n                const block = await this._blockchain.getBlock(receipt.blockHash);\n                if (block) {\n                    blockRequests.push(Promise.resolve(block));\n                } else {\n                    const request = this._requestBlockProof(receipt.blockHash, receipt.blockHeight)\n                        .catch(e => Log.e(BaseConsensus, `Failed to retrieve proof for block ${receipt.blockHash}`\n                            + ` (${e}) - transaction history may be incomplete`));\n                    blockRequests.push(request);\n                }\n\n                lastBlockHash = receipt.blockHash;\n            }\n        }\n        const blocks = await Promise.all(blockRequests);\n\n        // 3. Request transaction proofs.\n        const transactionRequests = [];\n        for (const block of blocks) {\n            if (!block) continue;\n\n            const request = this._requestTransactionsProof([address], block)\n                .then(txs => txs.map(tx => ({ transaction: tx, header: block.header })))\n                .catch(e => Log.e(BaseConsensus, `Failed to retrieve transactions for block ${block.hash()}`\n                    + ` (${e}) - transaction history may be incomplete`));\n            transactionRequests.push(request);\n        }\n\n        const transactions = await Promise.all(transactionRequests);\n        return transactions\n            .reduce((flat, it) => it ? flat.concat(it) : flat, [])\n            .sort((a, b) => a.header.height - b.header.height);\n    }\n\n    /** @type {boolean} */\n    get established() {\n        return this._established;\n    }\n\n    /** @type {Network} */\n    get network() {\n        return this._network;\n    }\n\n    get invRequestManager() {\n        return this._invRequestManager;\n    }\n}\nBaseConsensus.SYNC_THROTTLE = 1500; // ms\nBaseConsensus.MIN_FULL_NODES = 1;\nClass.register(BaseConsensus);\n","/**\n * An anchored, contiguous chain of full blocks.\n */\nclass FullChain extends BaseChain {\n    /**\n     * @param {JungleDB} jdb\n     * @param {Accounts} accounts\n     * @param {Time} time\n     * @param {TransactionStore} [transactionStore]\n     * @returns {Promise.<FullChain>}\n     */\n    static getPersistent(jdb, accounts, time, transactionStore) {\n        const store = ChainDataStore.getPersistent(jdb);\n        const chain = new FullChain(store, accounts, time, transactionStore);\n        return chain._init();\n    }\n\n    /**\n     * @param {Accounts} accounts\n     * @param {Time} time\n     * @param {TransactionStore} [transactionStore]\n     * @returns {Promise.<FullChain>}\n     */\n    static createVolatile(accounts, time, transactionStore) {\n        const store = ChainDataStore.createVolatile();\n        const chain = new FullChain(store, accounts, time, transactionStore);\n        return chain._init();\n    }\n\n    /**\n     * @param {ChainDataStore} store\n     * @param {Accounts} accounts\n     * @param {Time} time\n     * @param {TransactionStore} [transactionStore]\n     * @returns {FullChain}\n     */\n    constructor(store, accounts, time, transactionStore) {\n        super(store);\n        this._accounts = accounts;\n        this._time = time;\n\n        /** @type {HashMap.<Hash,Accounts>} */\n        this._snapshots = new HashMap();\n        /** @type {Array.<Hash>} */\n        this._snapshotOrder = [];\n\n        /** @type {ChainData} */\n        this._mainChain = null;\n\n        /** @type {ChainProof} */\n        this._proof = null;\n\n        /** @type {TransactionCache} */\n        this._transactionCache = new TransactionCache();\n\n        /** @type {TransactionStore} */\n        this._transactionStore = transactionStore;\n\n        /** @type {PrioritySynchronizer} */\n        this._synchronizer = new PrioritySynchronizer(2);\n\n        /** @type {number} */\n        this._blockKnownCount = this._blockInvalidCount = this._blockOrphanCount = this._blockExtendedCount = this._blockRebranchedCount = this._blockForkedCount = 0;\n    }\n\n    /**\n     * @returns {Promise.<FullChain>}\n     * @protected\n     */\n    async _init() {\n        this._headHash = await this._store.getHead();\n        if (this._headHash) {\n            // Check that the correct genesis block is stored.\n            const genesis = await this._store.getChainData(GenesisConfig.GENESIS_HASH);\n            if (!genesis || !genesis.onMainChain) {\n                throw new Error('Invalid genesis block stored. Reset your consensus database.');\n            }\n\n            // Load main chain from store.\n            this._mainChain = await this._store.getChainData(this._headHash, /*includeBody*/ true);\n            Assert.that(!!this._mainChain, 'Failed to load main chain from storage');\n\n            // Check that chain/accounts state is consistent.\n            if (!this._mainChain.head.accountsHash.equals(await this._accounts.hash())) {\n                throw new Error('Corrupted store: Inconsistent chain/accounts state');\n            }\n\n            // Initialize TransactionCache.\n            const blocks = await this._store.getBlocksBackward(this.headHash, this._transactionCache.missingBlocks - 1, /*includeBody*/ true);\n            this._transactionCache.prependBlocks([...blocks.reverse(), this._mainChain.head]);\n        } else {\n            // Initialize chain & accounts with Genesis block.\n            this._mainChain = await ChainData.initial(GenesisConfig.GENESIS_BLOCK);\n            this._headHash = GenesisConfig.GENESIS_HASH;\n\n            const tx = this._store.synchronousTransaction();\n            tx.putChainDataSync(GenesisConfig.GENESIS_HASH, this._mainChain);\n            tx.setHeadSync(GenesisConfig.GENESIS_HASH);\n            await tx.commit();\n\n            await this._accounts.initialize(GenesisConfig.GENESIS_BLOCK, GenesisConfig.GENESIS_ACCOUNTS);\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     */\n    pushBlock(block) {\n        return this._synchronizer.push(/*priority*/ 0,\n            this._pushBlock.bind(this, block));\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     * @protected\n     */\n    async _pushBlock(block) {\n        // Check if we already know this block.\n        const hash = block.hash();\n        const knownBlock = await this._store.getBlock(hash);\n        if (knownBlock) {\n            this._blockKnownCount++;\n            return FullChain.OK_KNOWN;\n        }\n\n        // Check that the given block is a full block (includes block body).\n        if (!block.isFull()) {\n            Log.w(FullChain, 'Rejecting block - body missing');\n            this._blockInvalidCount++;\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check all intrinsic block invariants.\n        if (!(await block.verify(this._time))) {\n            this._blockInvalidCount++;\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check that all known interlink blocks are valid predecessors of the given block.\n        // if (!(await this._verifyInterlink(block))) {\n        //     Log.w(FullChain, 'Rejecting block - interlink verification failed');\n        //     return FullChain.ERR_INVALID;\n        // }\n\n        // Check if the block's immediate predecessor is part of the chain.\n        /** @type {ChainData} */\n        const prevData = await this._store.getChainData(block.prevHash);\n        if (!prevData) {\n            Log.w(FullChain, 'Rejecting block - unknown predecessor');\n            this._blockOrphanCount++;\n            return FullChain.ERR_ORPHAN;\n        }\n\n        // Check that the block is a valid successor of its immediate predecessor.\n        const predecessor = prevData.head;\n        if (!(await block.isImmediateSuccessorOf(predecessor))) {\n            Log.w(FullChain, 'Rejecting block - not a valid immediate successor');\n            this._blockInvalidCount++;\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check that the difficulty is correct.\n        const nextTarget = await this.getNextTarget(predecessor);\n        Assert.that(BlockUtils.isValidTarget(nextTarget), 'Failed to compute next target in FullChain');\n        if (block.nBits !== BlockUtils.targetToCompact(nextTarget)) {\n            Log.w(FullChain, 'Rejecting block - difficulty mismatch');\n            this._blockInvalidCount++;\n            return FullChain.ERR_INVALID;\n        }\n\n        // Block looks good, create ChainData.\n        const chainData = await prevData.nextChainData(block);\n\n        // Check if the block extends our current main chain.\n        if (block.prevHash.equals(this.headHash)) {\n            // Append new block to the main chain.\n            if (!(await this._extend(hash, chainData, prevData))) {\n                this._blockInvalidCount++;\n                return FullChain.ERR_INVALID;\n            }\n            this._blockExtendedCount++;\n            return FullChain.OK_EXTENDED;\n        }\n\n        // Otherwise, check if the new chain is harder than our current main chain.\n        if (chainData.totalDifficulty > this.totalDifficulty) {\n            // A fork has become the hardest chain, rebranch to it.\n            if (!(await this._rebranch(hash, chainData))) {\n                this._blockInvalidCount++;\n                return FullChain.ERR_INVALID;\n            }\n            this._blockRebranchedCount++;\n            return FullChain.OK_REBRANCHED;\n        }\n\n        // Otherwise, we are creating/extending a fork. Store chain data.\n        Log.v(FullChain, `Creating/extending fork with block ${hash}, height=${block.height}, totalDifficulty=${chainData.totalDifficulty}, totalWork=${chainData.totalWork}`);\n        await this._store.putChainData(hash, chainData);\n\n        this._blockForkedCount++;\n        return FullChain.OK_FORKED;\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<boolean>}\n     * @protected\n     */\n    async _verifyInterlink(block) {\n        // Check that all blocks referenced in the interlink of the given block are valid predecessors of that block.\n        for (let i = 0; i < block.interlink.length; i++) {\n            const predecessor = await this._store.getBlock(block.interlink.hashes[i]); // eslint-disable-line no-await-in-loop\n            if (!predecessor || !(await block.isInterlinkSuccessorOf(predecessor))) { // eslint-disable-line no-await-in-loop\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {ChainData} chainData\n     * @param {ChainData} prevData\n     * @returns {Promise.<boolean>}\n     * @fires FullChain#head-changed\n     * @private\n     */\n    async _extend(blockHash, chainData, prevData) {\n        const accountsTx = await this._accounts.transaction();\n        try {\n            await accountsTx.commitBlock(chainData.head, this._transactionCache);\n        } catch (e) {\n            // AccountsHash mismatch. This can happen if someone gives us an invalid block.\n            // TODO error handling\n            Log.w(FullChain, `Rejecting block - failed to commit to AccountsTree: ${e.message || e}`);\n            accountsTx.abort().catch(Log.w.tag(FullChain));\n            return false;\n        }\n\n        chainData.onMainChain = true;\n        prevData.mainChainSuccessor = blockHash;\n\n        const storeTx = await this._store.synchronousTransaction();\n        storeTx.putChainDataSync(blockHash, chainData);\n        storeTx.putChainDataSync(chainData.head.prevHash, prevData, /*includeBody*/ false);\n        storeTx.setHeadSync(blockHash);\n\n        if (this._transactionStore) {\n            const transactionStoreTx = this._transactionStore.transaction();\n            await transactionStoreTx.put(chainData.head);\n            await JDB.JungleDB.commitCombined(...storeTx.txs, accountsTx.tx, transactionStoreTx.tx);\n        } else {\n            await JDB.JungleDB.commitCombined(...storeTx.txs, accountsTx.tx);\n        }\n\n        // New block on main chain, so store a new snapshot.\n        await this._saveSnapshot(blockHash);\n\n        // Update transactions cache.\n        this._transactionCache.pushBlock(chainData.head);\n\n        if (this._shouldExtendChainProof() && this._proof) {\n            // If we want to maintain our proof by extending it and have a cached proof, extend it.\n            this._proof = await this._extendChainProof(this._proof, chainData.head.header);\n        } else {\n            // Otherwise, clear the proof and recompute it the next time it is needed.\n            this._proof = null;\n        }\n\n        // Update head.\n        this._mainChain = chainData;\n        this._headHash = blockHash;\n\n        // Tell listeners that the head of the chain has changed.\n        this.fire('head-changed', this.head, /*rebranching*/ false);\n\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _shouldExtendChainProof() {\n        return false;\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {ChainData} chainData\n     * @returns {Promise.<boolean>}\n     * @protected\n     */\n    async _rebranch(blockHash, chainData) {\n        Log.v(FullChain, `Rebranching to fork ${blockHash}, height=${chainData.head.height}, totalDifficulty=${chainData.totalDifficulty}, totalWork=${chainData.totalWork}`);\n\n        // Drop all snapshots.\n        for (const hash of this._snapshotOrder) {\n            const snapshot = this._snapshots.get(hash);\n            snapshot.abort(); // We do not need to wait for the abortion as long as it has been triggered.\n        }\n        this._snapshots.clear();\n        this._snapshotOrder = [];\n\n        // Find the common ancestor between our current main chain and the fork chain.\n        // Walk up the fork chain until we find a block that is part of the main chain.\n        // Store the chain along the way.\n        /** @type {Array.<ChainData>} */\n        const forkChain = [];\n        /** @type {Array.<Hash>} */\n        const forkHashes = [];\n\n        /** @type {ChainData} */\n        let curData = chainData;\n        /** @type {Hash} */\n        let curHash = blockHash;\n        while (!curData.onMainChain) {\n            forkChain.push(curData);\n            forkHashes.push(curHash);\n\n            curHash = curData.head.prevHash;\n            // TODO FIXME This can fail in the light client. It might not have the requested block at all or only the light block.\n            curData = await this._store.getChainData(curHash, /*includeBody*/ true); // eslint-disable-line no-await-in-loop\n            Assert.that(!!curData, 'Corrupted store: Failed to find fork predecessor while rebranching');\n        }\n\n        Log.v(FullChain, () => `Found common ancestor ${curHash.toBase64()} ${forkChain.length} blocks up`);\n\n        /** @type {ChainData} */\n        const ancestorData = curData;\n        /** @type {Hash} */\n        const ancestorHash = curHash;\n\n        // Validate all accountsHashes on the fork. Revert the AccountsTree to the common ancestor state first.\n        const accountsTx = await this._accounts.transaction(false);\n        const transactionCacheTx = this._transactionCache.clone();\n        // Also update transactions in index.\n        const transactionStoreTx = this._transactionStore ? this._transactionStore.transaction() : null;\n\n        /** @type {Array.<ChainData>} */\n        const revertChain = [];\n        /** @type {Hash} */\n        let headHash = this._headHash;\n        /** @type {ChainData} */\n        let headData = this._mainChain;\n        while (!headHash.equals(ancestorHash)) {\n            try {\n                // This only works in the light client if we revert less than Policy.TRANSACTION_VALIDITY_WINDOW blocks.\n                await accountsTx.revertBlock(headData.head, transactionCacheTx);\n                transactionCacheTx.revertBlock(headData.head);\n\n                // Also update transactions in index.\n                if (this._transactionStore) {\n                    await transactionStoreTx.remove(headData.head);\n                }\n                revertChain.push(headData);\n            } catch (e) {\n                Log.e(FullChain, 'Failed to revert main chain while rebranching', e);\n                accountsTx.abort().catch(Log.w.tag(FullChain));\n                if (this._transactionStore) {\n                    transactionStoreTx.abort().catch(Log.w.tag(FullChain));\n                }\n                return false;\n            }\n\n            headHash = headData.head.prevHash;\n            headData = await this._store.getChainData(headHash, /*includeBody*/ true);\n            Assert.that(!!headData, 'Corrupted store: Failed to find main chain predecessor while rebranching');\n            Assert.that(headData.head.accountsHash.equals(await accountsTx.hash()), 'Failed to revert main chain - inconsistent state');\n        }\n\n        // Try to fetch missing transactions for the cache.\n        // TODO FIXME The light client might not have all necessary blocks.\n        const numMissingBlocks = transactionCacheTx.missingBlocks;\n        const blocks = await this._store.getBlocksBackward(headHash, numMissingBlocks, /*includeBody*/ true);\n        transactionCacheTx.prependBlocks(blocks.reverse());\n\n        // Try to apply all fork blocks.\n        for (let i = forkChain.length - 1; i >= 0; i--) {\n            try {\n                await accountsTx.commitBlock(forkChain[i].head, transactionCacheTx);\n                transactionCacheTx.pushBlock(forkChain[i].head);\n\n                // Also update transactions in index.\n                if (this._transactionStore) {\n                    await transactionStoreTx.put(forkChain[i].head);\n                }\n            } catch (e) {\n                // A fork block is invalid.\n                // TODO delete invalid block and its successors from store.\n                Log.e(FullChain, 'Failed to apply fork block while rebranching', e);\n                accountsTx.abort().catch(Log.w.tag(FullChain));\n                if (this._transactionStore) {\n                    transactionStoreTx.abort().catch(Log.w.tag(FullChain));\n                }\n                return false;\n            }\n        }\n\n        // Fork looks good.\n        // Unset onMainChain flag / mainChainSuccessor on the current main chain up to (excluding) the common ancestor.\n        /** @type {ChainDataStore} */\n        const chainTx = this._store.synchronousTransaction(false);\n        for (const revertedData of revertChain) {\n            revertedData.onMainChain = false;\n            revertedData.mainChainSuccessor = null;\n            chainTx.putChainDataSync(revertedData.head.hash(), revertedData, /*includeBody*/ false);\n        }\n\n        // Update the mainChainSuccessor of the common ancestor block.\n        ancestorData.mainChainSuccessor = forkHashes[forkHashes.length - 1];\n        chainTx.putChainDataSync(ancestorHash, ancestorData, /*includeBody*/ false);\n\n        // Set onMainChain flag / mainChainSuccessor on the fork.\n        for (let i = forkChain.length - 1; i >= 0; i--) {\n            const forkData = forkChain[i];\n            forkData.onMainChain = true;\n            forkData.mainChainSuccessor = i > 0 ? forkHashes[i - 1] : null;\n            // Include the body of the new block (at position 0).\n            chainTx.putChainDataSync(forkHashes[i], forkData, /*includeBody*/ i === 0);\n        }\n\n        // Update head & commit transactions.\n        chainTx.setHeadSync(blockHash);\n        if (this._transactionStore) {\n            await JDB.JungleDB.commitCombined(...chainTx.txs, accountsTx.tx, transactionStoreTx.tx);\n        } else {\n            await JDB.JungleDB.commitCombined(...chainTx.txs, accountsTx.tx);\n        }\n        this._transactionCache = transactionCacheTx;\n\n        // Reset chain proof. We don't recompute the chain proof here, but do it lazily the next time it is needed.\n        // TODO modify chain proof directly, don't recompute.\n        this._proof = null;\n\n        // Fire block-reverted event for each block reverted during rebranch\n        for (const revertedData of revertChain) {\n            this.fire('block-reverted', revertedData.head);\n        }\n\n        // Fire head-changed event for each fork block.\n        for (let i = forkChain.length - 1; i >= 0; i--) {\n            this._mainChain = forkChain[i];\n            this._headHash = forkHashes[i];\n            this.fire('head-changed', this.head, /*rebranching*/ i > 0);\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * @param {Hash} startBlockHash\n     * @param {number} count\n     * @param {boolean} forward\n     * @returns {Promise.<Array.<Block>>}\n     */\n    getBlocks(startBlockHash, count = 500, forward = true) {\n        return this._store.getBlocks(startBlockHash, count, forward);\n    }\n\n    /**\n     * @returns {Promise.<ChainProof>}\n     * @override\n     */\n    getChainProof() {\n        return this._synchronizer.push(/*priority*/ 1, async () => {\n            if (!this._proof) {\n                this._proof = await this._getChainProof();\n            }\n            return this._proof;\n        });\n    }\n\n    /**\n     * @param {Block} blockToProve\n     * @param {Block} knownBlock\n     * @returns {Promise.<?BlockChain>}\n     **/\n    getBlockProof(blockToProve, knownBlock) {\n        return this._synchronizer.push(/*priority*/ 1,\n            this._getBlockProof.bind(this, blockToProve, knownBlock));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {string} startPrefix\n     * @returns {Promise.<?AccountsTreeChunk>}\n     */\n    async getAccountsTreeChunk(blockHash, startPrefix) {\n        const snapshot = await this._getSnapshot(blockHash);\n        return snapshot && await snapshot.getAccountsTreeChunk(startPrefix);\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<?AccountsProof>}\n     */\n    async getAccountsProof(blockHash, addresses) {\n        const snapshot = await this._getSnapshot(blockHash);\n        return snapshot && await snapshot.getAccountsProof(addresses);\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<?TransactionsProof>}\n     */\n    async getTransactionsProof(blockHash, addresses) {\n        const block = await this.getBlock(blockHash, /*includeForks*/ false, /*includeBody*/ true);\n        if (!block || !block.isFull()) {\n            return null;\n        }\n\n        const matches = [];\n        const addressesSet = new HashSet();\n        addressesSet.addAll(addresses);\n        for (const transaction of block.transactions) {\n            if (addressesSet.contains(transaction.sender) || addressesSet.contains(transaction.recipient)) {\n                matches.push(transaction);\n            }\n        }\n\n        const proof = MerkleProof.compute(block.body.getMerkleLeafs(), matches);\n        return new TransactionsProof(matches, proof);\n    }\n\n    /**\n     * @param {Address} address\n     * @param {number} [limit]\n     * @returns {Promise.<Array.<TransactionReceipt>>}\n     */\n    async getTransactionReceiptsByAddress(address, limit = null) {\n        if (!this._transactionStore) {\n            throw new Error('Invalid request');\n        }\n\n        const transactionReceipts = [];\n        const entriesBySender = await this._transactionStore.getBySender(address, limit);\n        const entriesByRecipient = await this._transactionStore.getByRecipient(address, limit === null ? null : Math.max(0, limit - entriesBySender.length));\n\n        entriesBySender.forEach(entry => {\n            transactionReceipts.push(new TransactionReceipt(entry.transactionHash, entry.blockHash, entry.blockHeight));\n        });\n\n        entriesByRecipient.forEach(entry => {\n            transactionReceipts.push(new TransactionReceipt(entry.transactionHash, entry.blockHash, entry.blockHeight));\n        });\n\n        return transactionReceipts;\n    }\n\n    /**\n     * @param {Hash} transactionHash\n     * @returns {Promise.<?TransactionStoreEntry>}\n     */\n    async getTransactionInfoByHash(transactionHash) {\n        if (!this._transactionStore) {\n            throw new Error('Invalid request');\n        }\n\n        const txStoreEntry = await this._transactionStore.get(transactionHash);\n        if (!txStoreEntry) {\n            return null;\n        }\n\n        return txStoreEntry;\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @returns {Promise.<?Accounts>}\n     */\n    _getSnapshot(blockHash) {\n        // TODO Does this have to be synchronized with pushBlock() ?\n        return this._synchronizer.push(/*priority*/ 1, async () => {\n            const block = await this.getBlock(blockHash);\n            // Check if blockHash is a block on the main chain within the allowed window.\n            if (!block || this._mainChain.head.height - block.height > Policy.NUM_SNAPSHOTS_MAX) {\n                return null;\n            }\n\n            // Check if there already is a snapshot, otherwise create it.\n            let snapshot = null;\n            if (!this._snapshots.contains(blockHash)) {\n                const tx = await this._accounts.transaction();\n                const transactionsTx = this._transactionCache.clone();\n                let currentHash = this._headHash;\n                // Save all snapshots up to blockHash (and stop when its predecessor would be next).\n                while (!block.prevHash.equals(currentHash)) {\n                    const currentBlock = await this.getBlock(currentHash, /*includeForks*/ false, /*includeBody*/ true);\n\n                    if (!this._snapshots.contains(currentHash)) {\n                        snapshot = await this._accounts.snapshot(tx);\n                        this._snapshots.put(currentHash, snapshot);\n                        this._snapshotOrder.unshift(currentHash);\n                    }\n\n                    await tx.revertBlock(currentBlock, transactionsTx);\n                    transactionsTx.revertBlock(currentBlock);\n                    currentHash = currentBlock.prevHash;\n                }\n                await tx.abort();\n            } else {\n                snapshot = this._snapshots.get(blockHash);\n            }\n\n            Assert.that(block.accountsHash.equals(await snapshot.hash()), 'AccountsHash mismatch for snapshot of block ${blockHash}');\n\n            return snapshot;\n        });\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _saveSnapshot(blockHash) {\n        // Replace oldest snapshot if possible.\n        // This ensures snapshots are only created lazily.\n        if (this._snapshotOrder.length > 0) {\n            const oldestHash = this._snapshotOrder.shift();\n            // If the hash is not reused, remove it.\n            const oldestSnapshot = this._snapshots.get(oldestHash);\n            if (oldestSnapshot) {\n                await oldestSnapshot.abort();\n            } else {\n                Log.e(FullChain, () => `Snapshot with hash ${oldestHash.toBase64()} not found.`);\n            }\n            this._snapshots.remove(oldestHash);\n\n            // Add new snapshot.\n            const snapshot = await this._accounts.snapshot();\n            this._snapshots.put(blockHash, snapshot);\n            this._snapshotOrder.push(blockHash);\n        }\n    }\n\n    /** @type {Block} */\n    get head() {\n        return this._mainChain.head;\n    }\n\n    /** @type {Hash} */\n    get headHash() {\n        return this._headHash;\n    }\n\n    get height() {\n        return this._mainChain.head.height;\n    }\n\n    /** @type {number} */\n    get totalDifficulty() {\n        return this._mainChain.totalDifficulty;\n    }\n\n    /** @type {number} */\n    get totalWork() {\n        return this._mainChain.totalWork;\n    }\n\n    /** @type {Accounts} */\n    // XXX Do we really want to expose this?\n    get accounts() {\n        return this._accounts;\n    }\n\n    /** @type {TransactionCache} */\n    get transactionCache() {\n        return this._transactionCache;\n    }\n\n    /** @type {number} */\n    get blockForkedCount() {\n        return this._blockForkedCount;\n    }\n\n    /** @type {number} */\n    get blockRebranchedCount() {\n        return this._blockRebranchedCount;\n    }\n\n    /** @type {number} */\n    get blockExtendedCount() {\n        return this._blockExtendedCount;\n    }\n\n    /** @type {number} */\n    get blockOrphanCount() {\n        return this._blockOrphanCount;\n    }\n\n    /** @type {number} */\n    get blockInvalidCount() {\n        return this._blockInvalidCount;\n    }\n\n    /** @type {number} */\n    get blockKnownCount() {\n        return this._blockKnownCount;\n    }\n\n    /**\n     * @returns {Promise.<Hash>}\n     */\n    // XXX Do we really want to expose this?\n    accountsHash() {\n        return this._accounts.hash();\n    }\n}\n\nFullChain.ERR_ORPHAN = -2;\nFullChain.ERR_INVALID = -1;\nFullChain.OK_KNOWN = 0;\nFullChain.OK_EXTENDED = 1;\nFullChain.OK_REBRANCHED = 2;\nFullChain.OK_FORKED = 3;\nClass.register(FullChain);\n","class FullConsensusAgent extends BaseConsensusAgent {\n    /**\n     * @param {FullChain} blockchain\n     * @param {Mempool} mempool\n     * @param {Time} time\n     * @param {Peer} peer\n     * @param {InvRequestManager} invRequestManager\n     * @param {Subscription} targetSubscription\n     */\n    constructor(blockchain, mempool, time, peer, invRequestManager, targetSubscription) {\n        super(time, peer, invRequestManager, targetSubscription);\n        /** @type {FullChain} */\n        this._blockchain = blockchain;\n        /** @type {Mempool} */\n        this._mempool = mempool;\n\n        // Flag indicating that we are currently syncing our blockchain with the peer's.\n        /** @type {boolean} */\n        this._syncing = false;\n\n        // The number of blocks that extended our blockchain since the last requestBlocks().\n        /** @type {number} */\n        this._numBlocksExtending = -1;\n        // The number of blocks that forked our blockchain since the last requestBlocks().\n        /** @type {number} */\n        this._numBlocksForking = -1;\n        // The last fork block the peer has sent us.\n        /** @type {Block} */\n        this._forkHead = null;\n\n        // The number of failed blockchain sync attempts.\n        /** @type {number} */\n        this._failedSyncs = 0;\n\n        // The block hash that we want to learn to consider the sync complete.\n        /** @type {Hash} */\n        this._syncTarget = peer.headHash;\n\n        /** @type {RateLimit} */\n        this._chainProofLimit = new RateLimit(FullConsensusAgent.CHAIN_PROOF_RATE_LIMIT);\n        /** @type {RateLimit} */\n        this._accountsProofLimit = new RateLimit(FullConsensusAgent.ACCOUNTS_PROOF_RATE_LIMIT);\n        /** @type {RateLimit} */\n        this._accountsTreeChunkLimit = new RateLimit(FullConsensusAgent.ACCOUNTS_TREE_CHUNK_RATE_LIMIT);\n        /** @type {RateLimit} */\n        this._transactionsProofLimit = new RateLimit(FullConsensusAgent.TRANSACTION_PROOF_RATE_LIMIT);\n        /** @type {RateLimit} */\n        this._transactionReceiptsLimit = new RateLimit(FullConsensusAgent.TRANSACTION_RECEIPTS_RATE_LIMIT);\n        /** @type {RateLimit} */\n        this._blockProofLimit = new RateLimit(FullConsensusAgent.BLOCK_PROOF_RATE_LIMIT);\n\n        // Listen to consensus messages from the peer.\n        peer.channel.on('get-blocks', msg => this._onGetBlocks(msg));\n        peer.channel.on('get-chain-proof', msg => this._onGetChainProof(msg));\n        peer.channel.on('get-accounts-proof', msg => this._onGetAccountsProof(msg));\n        peer.channel.on('get-accounts-tree-chunk', msg => this._onGetAccountsTreeChunk(msg));\n        peer.channel.on('get-transactions-proof', msg => this._onGetTransactionsProof(msg));\n        peer.channel.on('get-transaction-receipts', msg => this._onGetTransactions(msg));\n        peer.channel.on('get-block-proof', msg => this._onGetBlockProof(msg));\n        peer.channel.on('mempool', msg => this._onMempool(msg));\n    }\n\n    async syncBlockchain() {\n        this._syncing = true;\n\n        // We only sync with other full nodes.\n        if (!Services.isFullNode(this._peer.peerAddress.services)) {\n            this._syncFinished();\n            return;\n        }\n\n        // Wait for all objects to arrive.\n        if (!this._objectsInFlight.isEmpty()) {\n            Log.v(FullConsensusAgent, `Waiting for ${this._objectsInFlight.length} objects to arrive ...`);\n            return;\n        }\n\n        // Wait for all objects to be processed.\n        if (!this._objectsProcessing.isEmpty()) {\n            Log.v(FullConsensusAgent, `Waiting for ${this._objectsProcessing.length} objects to be processed ...`);\n            return;\n        }\n\n        // If we know our sync target block, the sync process is finished.\n        const head = await this._blockchain.getBlock(this._syncTarget, /*includeForks*/ true);\n        if (head) {\n            this._syncFinished();\n            return;\n        }\n\n        // If the peer didn't send us any blocks that extended our chain, count it as a failed sync attempt.\n        // This sets a maximum length for forks that the full client will accept:\n        //   FullConsensusAgent.SYNC_ATTEMPTS_MAX * BaseInvectoryMessage.VECTORS_MAX_COUNT\n        if (this._numBlocksExtending === 0 && ++this._failedSyncs >= FullConsensusAgent.SYNC_ATTEMPTS_MAX) {\n            this._peer.channel.close(CloseType.BLOCKCHAIN_SYNC_FAILED, 'blockchain sync failed');\n            return;\n        }\n\n        // We don't know the peer's head block, request blocks from it.\n        this._requestBlocks().catch(Log.w.tag(FullConsensusAgent));\n    }\n\n    _syncFinished() {\n        // Subscribe to all announcements from the peer.\n        this._subscribeTarget();\n\n        // Request the peer's mempool.\n        // XXX Use a random delay here to prevent requests to multiple peers at once.\n        const delay = FullConsensusAgent.MEMPOOL_DELAY_MIN\n            + Math.random() * (FullConsensusAgent.MEMPOOL_DELAY_MAX - FullConsensusAgent.MEMPOOL_DELAY_MIN);\n        setTimeout(() => this._peer.channel.mempool(), delay);\n\n        this._syncing = false;\n        this._synced = true;\n\n        this._numBlocksExtending = 0;\n        this._numBlocksForking = 0;\n        this._forkHead = null;\n        this._failedSyncs = 0;\n\n        this.fire('sync');\n    }\n\n    async _requestBlocks(maxInvSize) {\n        // Only one getBlocks request at a time.\n        if (this._peer.channel.isExpectingMessage(Message.Type.INV)) {\n            return;\n        }\n\n        // Drop the peer if it doesn't start sending InvVectors for its chain within the timeout.\n        // Set timeout early to prevent re-entering the method.\n        this._peer.channel.expectMessage(Message.Type.INV, () => {\n            this._peer.channel.close(CloseType.GET_BLOCKS_TIMEOUT, 'getBlocks timeout');\n        }, BaseConsensusAgent.REQUEST_TIMEOUT);\n\n        // Check if the peer is sending us a fork.\n        const onFork = this._forkHead && this._numBlocksExtending === 0 && this._numBlocksForking > 0;\n\n        /** @type {Array.<Hash>} */\n        let locators;\n        if (onFork) {\n            // Only send the fork head as locator if the peer is sending us a fork.\n            locators = [this._forkHead.hash()];\n        } else {\n            locators = await this._blockchain.getBlockLocators();\n        }\n\n        // Reset block counters.\n        this._numBlocksExtending = 0;\n        this._numBlocksForking = 0;\n\n        // Request blocks from peer.\n        this._peer.channel.getBlocks(locators, maxInvSize);\n    }\n\n    /**\n     * @param {InvMessage} msg\n     * @returns {Promise}\n     * @protected\n     * @override\n     */\n    _onInv(msg) {\n        return super._onInv(msg);\n    }\n\n    /**\n     * @param {InvVector} vector\n     * @returns {boolean}\n     * @protected\n     * @override\n     */\n    _shouldRequestData(vector) {\n        // Ignore block announcements from nano clients as they will ignore our getData requests anyways (they only know headers).\n        return !(Services.isNanoNode(this._peer.peerAddress.services) && vector.type === InvVector.Type.BLOCK);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @param {boolean} [includeBody]\n     * @returns {Promise.<?Block>}\n     * @protected\n     * @override\n     */\n    _getBlock(hash, includeForks = false, includeBody = false) {\n        return this._blockchain.getBlock(hash, includeForks, includeBody);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @returns {Promise.<?Uint8Array>}\n     * @protected\n     * @override\n     */\n    _getRawBlock(hash, includeForks = false) {\n        return this._blockchain.getRawBlock(hash, includeForks);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Promise.<?Transaction>}\n     * @protected\n     * @override\n     */\n    _getTransaction(hash) {\n        return Promise.resolve(this._mempool.getTransaction(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @returns {void}\n     * @protected\n     * @override\n     */\n    async _onKnownBlockAnnounced(hash, block) {\n        if (!this._syncing) return;\n\n        this._numBlocksForking++;\n        this._forkHead = block;\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     * @override\n     */\n    _onNoUnknownObjects() {\n        // The peer does not have any new inv vectors for us.\n        if (this._syncing) {\n            this.syncBlockchain().catch(Log.w.tag(FullConsensusAgent));\n        }\n    }\n\n    /**\n     * @protected\n     * @override\n     */\n    _onAllObjectsReceived() {\n        // If all objects have been received, request more if we're syncing the blockchain.\n        if (this._syncing) {\n            this.syncBlockchain().catch(Log.w.tag(FullConsensusAgent));\n        }\n    }\n\n    /**\n     * @param {HeaderMessage} msg\n     * @return {Promise.<void>}\n     * @protected\n     * @override\n     */\n    _onHeader(msg) {\n        // Ignore header messages.\n        Log.w(FullConsensusAgent, `Unsolicited header message received from ${this._peer.peerAddress}, discarding`);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @returns {Promise.<void>}\n     * @protected\n     * @override\n     */\n    async _processBlock(hash, block) {\n        // TODO send reject message if we don't like the block\n        const status = await this._blockchain.pushBlock(block);\n        switch (status) {\n            case FullChain.ERR_INVALID:\n                this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK, 'received invalid block');\n                break;\n\n            case FullChain.OK_EXTENDED:\n            case FullChain.OK_REBRANCHED:\n                if (this._syncing) this._numBlocksExtending++;\n                break;\n\n            case FullChain.OK_FORKED:\n                if (this._syncing) {\n                    this._numBlocksForking++;\n                    this._forkHead = block;\n                }\n                break;\n\n            case FullChain.ERR_ORPHAN:\n                this._onOrphanBlock(hash, block);\n                break;\n\n            case FullChain.OK_KNOWN:\n                Log.v(FullConsensusAgent, `Received known block ${hash} (height=${block.height}, prevHash=${block.prevHash}) from ${this._peer.peerAddress}`);\n                break;\n        }\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @protected\n     */\n    _onOrphanBlock(hash, block) {\n        // Ignore orphan blocks if we're not synced yet. This shouldn't happen.\n        if (!this._synced) {\n            Log.w(FullConsensusAgent, `Received orphan block ${hash} (height=${block.height}, prevHash=${block.prevHash}) while syncing`);\n            return;\n        }\n\n        // The peer has announced an orphaned block after the initial sync. We're probably out of sync.\n        Log.d(FullConsensusAgent, `Received orphan block ${hash} (height=${block.height}, prevHash=${block.prevHash}) from ${this._peer.peerAddress}`);\n\n        // Disable announcements from the peer once.\n        if (!this._timers.timeoutExists('outOfSync')) {\n            this._subscribe(Subscription.NONE);\n        }\n\n        // Set the orphaned block as the new sync target.\n        this._syncTarget = hash;\n\n        // Wait a short time for:\n        // - our (un-)subscribe message to be sent\n        // - potentially more orphaned blocks to arrive\n        this._timers.resetTimeout('outOfSync', () => this._outOfSync(), FullConsensusAgent.RESYNC_THROTTLE);\n    }\n\n    /**\n     * @private\n     */\n    _outOfSync() {\n        this._timers.clearTimeout('outOfSync');\n\n        this._synced = false;\n\n        this.fire('out-of-sync');\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Transaction} transaction\n     * @returns {Promise.<boolean>}\n     * @protected\n     * @override\n     */\n    async _processTransaction(hash, transaction) {\n        const result = await this._mempool.pushTransaction(transaction);\n        switch (result) {\n            case Mempool.ReturnCode.ACCEPTED:\n                return true;\n            case Mempool.ReturnCode.KNOWN:\n                return false;\n            case Mempool.ReturnCode.FEE_TOO_LOW:\n                this.peer.channel.reject(Message.Type.TX, RejectMessage.Code.REJECT_INSUFFICIENT_FEE,\n                    'Sender has too many free transactions', transaction.hash().serialize());\n                return false;\n            case Mempool.ReturnCode.INVALID:\n                this.peer.channel.reject(Message.Type.TX, RejectMessage.Code.REJECT_INVALID, 'Invalid transaction',\n                    transaction.hash().serialize());\n                return false;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @protected\n     * @override\n     */\n    _onAllObjectsProcessed() {\n        // If all objects have been processed, request more if we're syncing the blockchain.\n        if (this._syncing) {\n            this.syncBlockchain().catch(Log.w.tag(FullConsensusAgent));\n        }\n    }\n\n\n    /* Request endpoints */\n\n    /**\n     * @param {GetBlocksMessage} msg\n     * @return {Promise}\n     * @private\n     */\n    async _onGetBlocks(msg) {\n        Log.v(FullConsensusAgent, `[GETBLOCKS] ${msg.locators.length} block locators maxInvSize ${msg.maxInvSize} received from ${this._peer.peerAddress}`);\n\n        // A peer has requested blocks. Check all requested block locator hashes\n        // in the given order and pick the first hash that is found on our main\n        // chain, ignore the rest. If none of the requested hashes is found,\n        // pick the genesis block hash. Send the main chain starting from the\n        // picked hash back to the peer.\n        let startBlock = GenesisConfig.GENESIS_BLOCK;\n        for (const locator of msg.locators) {\n            const block = await this._blockchain.getBlock(locator);\n            if (block) {\n                // We found a block, ignore remaining block locator hashes.\n                startBlock = block;\n                break;\n            }\n        }\n\n        // Collect up to GETBLOCKS_VECTORS_MAX inventory vectors for the blocks starting right\n        // after the identified block on the main chain.\n        const blocks = await this._blockchain.getBlocks(startBlock.hash(),\n            Math.min(msg.maxInvSize, FullConsensusAgent.GETBLOCKS_VECTORS_MAX),\n            msg.direction === GetBlocksMessage.Direction.FORWARD);\n        const vectors = [];\n        for (const block of blocks) {\n            vectors.push(InvVector.fromBlock(block));\n        }\n\n        // Send the vectors back to the requesting peer.\n        this._peer.channel.inv(vectors);\n    }\n\n    /**\n     * @param {GetChainProofMessage} msg\n     * @private\n     */\n    async _onGetChainProof(msg) {\n        if (!this._chainProofLimit.note()) {\n            Log.w(FullConsensusAgent, 'Rejecting GetChainProof message - rate-limit exceeded');\n            this._peer.channel.close(CloseType.RATE_LIMIT_EXCEEDED, 'rate-limit exceeded');\n            return;\n        }\n        const proof = await this._blockchain.getChainProof();\n        this._peer.channel.chainProof(proof);\n    }\n\n    /**\n     * @param {GetBlockProofMessage} msg\n     * @private\n     */\n    async _onGetBlockProof(msg) {\n        if (!this._blockProofLimit.note()) {\n            Log.w(FullConsensusAgent, 'Rejecting GetBlockProof message - rate-limit exceeded');\n            this._peer.channel.blockProof(null);\n            return;\n        }\n        const blockToProve = await this._blockchain.getBlock(msg.blockHashToProve);\n        const knownBlock = await this._blockchain.getBlock(msg.knownBlockHash);\n        if (!blockToProve || !knownBlock) {\n            this._peer.channel.blockProof();\n            return;\n        }\n\n        const proof = await this._blockchain.getBlockProof(blockToProve, knownBlock);\n        this._peer.channel.blockProof(proof);\n    }\n\n    /**\n     * @param {GetAccountsProofMessage} msg\n     * @private\n     */\n    async _onGetAccountsProof(msg) {\n        if (!this._accountsProofLimit.note()) {\n            Log.w(FullConsensusAgent, 'Rejecting GetAccountsProof message - rate-limit exceeded');\n            this._peer.channel.accountsProof(msg.blockHash, null);\n            return;\n        }\n        const proof = await this._blockchain.getAccountsProof(msg.blockHash, msg.addresses);\n        this._peer.channel.accountsProof(msg.blockHash, proof);\n    }\n\n    /**\n     * @param {GetTransactionsProofMessage} msg\n     * @private\n     */\n    async _onGetTransactionsProof(msg) {\n        if (!this._transactionsProofLimit.note()) {\n            Log.w(FullConsensusAgent, 'Rejecting GetTransactionsProof message - rate-limit exceeded');\n            this._peer.channel.transactionsProof(msg.blockHash, null);\n            return;\n        }\n        const proof = await this._blockchain.getTransactionsProof(msg.blockHash, msg.addresses);\n        this._peer.channel.transactionsProof(msg.blockHash, proof);\n    }\n\n    /**\n     * @param {GetAccountsTreeChunkMessage} msg\n     * @private\n     */\n    async _onGetAccountsTreeChunk(msg) {\n        if (!this._accountsTreeChunkLimit.note()) {\n            Log.w(FullConsensusAgent, 'Rejecting GetAccountsTreeChunk message - rate-limit exceeded');\n            this._peer.channel.accountsTreeChunk(msg.blockHash, null);\n            return;\n        }\n        const chunk = await this._blockchain.getAccountsTreeChunk(msg.blockHash, msg.startPrefix);\n        this._peer.channel.accountsTreeChunk(msg.blockHash, chunk);\n    }\n\n    /**\n     * @param {GetTransactionReceiptsMessage} msg\n     * @private\n     */\n    async _onGetTransactions(msg) {\n        if (!this._transactionReceiptsLimit.note()) {\n            Log.w(FullConsensusAgent, 'Rejecting GetTransactionReceipts message - rate-limit exceeded');\n            return;\n        }\n\n        const transactionReceipts = await this._blockchain.getTransactionReceiptsByAddress(msg.address, FullConsensusAgent.TRANSACTION_RECEIPTS_LIMIT);\n\n        // TODO recipients current only support a single transaction-receipts message.\n        for (let i = 0; i < transactionReceipts.length && /* TODO Remove me */ i === 0; i += TransactionReceiptsMessage.RECEIPTS_MAX_COUNT) {\n            const receipts = transactionReceipts.slice(i, i + TransactionReceiptsMessage.RECEIPTS_MAX_COUNT);\n            this._peer.channel.transactionReceipts(receipts);\n        }\n    }\n\n    /**\n     * @param {MempoolMessage} msg\n     * @return {Promise}\n     * @private\n     */\n    async _onMempool(msg) {\n        // Query mempool for transactions\n        let transactions = [];\n        switch (this._remoteSubscription.type) {\n            case Subscription.Type.ADDRESSES:\n                transactions = this._mempool.getTransactionsByAddresses(this._remoteSubscription.addresses, FullConsensusAgent.MEMPOOL_ENTRIES_MAX);\n                break;\n            case Subscription.Type.MIN_FEE:\n                transactions = new LimitIterable(this._mempool.transactionGenerator(/*maxSize*/ undefined, this._remoteSubscription.minFeePerByte), FullConsensusAgent.MEMPOOL_ENTRIES_MAX);\n                break;\n            case Subscription.Type.ANY:\n                transactions = new LimitIterable(this._mempool.transactionGenerator(), FullConsensusAgent.MEMPOOL_ENTRIES_MAX);\n                break;\n        }\n\n        // Send an InvVector for each transaction in the mempool.\n        // Split into multiple Inv messages if the mempool is large.\n        let vectors = [];\n        for (const tx of transactions) {\n            vectors.push(InvVector.fromTransaction(tx));\n\n            if (vectors.length >= BaseInventoryMessage.VECTORS_MAX_COUNT) {\n                this._peer.channel.inv(vectors);\n                vectors = [];\n                await new Promise((resolve) => setTimeout(resolve, FullConsensusAgent.MEMPOOL_THROTTLE));\n            }\n        }\n\n        if (vectors.length > 0) {\n            this._peer.channel.inv(vectors);\n        }\n    }\n\n    /** @type {boolean} */\n    get syncing() {\n        return this._syncing;\n    }\n}\n/**\n * Maximum number of blockchain sync retries before closing the connection.\n * XXX If the peer is on a long fork, it will count as a failed sync attempt\n * if our blockchain doesn't switch to the fork within 500 (max InvVectors returned by getBlocks)\n * blocks.\n * @type {number}\n */\nFullConsensusAgent.SYNC_ATTEMPTS_MAX = 25;\n/**\n * Maximum number of inventory vectors to sent in the response for onGetBlocks.\n * @type {number}\n */\nFullConsensusAgent.GETBLOCKS_VECTORS_MAX = 500;\n/**\n * Time {ms} to wait before triggering a blockchain re-sync with the peer.\n * @type {number}\n */\nFullConsensusAgent.RESYNC_THROTTLE = 1000 * 3; // 3 seconds\n/**\n * Minimum time {ms} to wait before triggering the initial mempool request.\n * @type {number}\n */\nFullConsensusAgent.MEMPOOL_DELAY_MIN = 1000 * 2; // 2 seconds\n/**\n * Maximum time {ms} to wait before triggering the initial mempool request.\n * @type {number}\n */\nFullConsensusAgent.MEMPOOL_DELAY_MAX = 1000 * 20; // 20 seconds\n/**\n * Time {ms} to wait between sending full inv vectors of transactions during Mempool request\n * @type {number}\n */\nFullConsensusAgent.MEMPOOL_THROTTLE = 1000;\n/**\n * Number of transaction vectors to send\n * @type {number}\n */\nFullConsensusAgent.MEMPOOL_ENTRIES_MAX = 10000;\nFullConsensusAgent.CHAIN_PROOF_RATE_LIMIT = 3;\nFullConsensusAgent.ACCOUNTS_PROOF_RATE_LIMIT = 60;\nFullConsensusAgent.ACCOUNTS_TREE_CHUNK_RATE_LIMIT = 120;\nFullConsensusAgent.TRANSACTION_PROOF_RATE_LIMIT = 60;\nFullConsensusAgent.TRANSACTION_RECEIPTS_RATE_LIMIT = 30;\nFullConsensusAgent.TRANSACTION_RECEIPTS_LIMIT = 1000;\nFullConsensusAgent.BLOCK_PROOF_RATE_LIMIT = 60;\nClass.register(FullConsensusAgent);\n","class FullConsensus extends BaseConsensus {\n    /**\n     * @param {FullChain} blockchain\n     * @param {Mempool} mempool\n     * @param {Network} network\n     */\n    constructor(blockchain, mempool, network) {\n        super(blockchain, mempool, network);\n        /** @type {FullChain} */\n        this._blockchain = blockchain;\n        /** @type {Mempool} */\n        this._mempool = mempool;\n    }\n\n    /**\n     * @param {number} minFeePerByte\n     */\n    subscribeMinFeePerByte(minFeePerByte) {\n        this.subscribe(Subscription.fromMinFeePerByte(minFeePerByte));\n        this.mempool.evictBelowMinFeePerByte(minFeePerByte);\n    }\n\n    /**\n     * @type {number} minFeePerByte\n     */\n    get minFeePerByte() {\n        return this._subscription.type === Subscription.Type.MIN_FEE ? this._subscription.minFeePerByte : 0;\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {BaseConsensusAgent}\n     * @override\n     */\n    _newConsensusAgent(peer) {\n        return new FullConsensusAgent(this._blockchain, this._mempool, this._network.time, peer, this._invRequestManager, this._subscription);\n    }\n\n    /** @type {FullChain} */\n    get blockchain() {\n        return this._blockchain;\n    }\n\n    /** @type {Mempool} */\n    get mempool() {\n        return this._mempool;\n    }\n}\nClass.register(FullConsensus);\n","/**\n * A LightChain is initialized by using NiPoPoWs instead of the full\n * blockchain history, but after initialization, it behaves as a regular\n * full blockchain.\n */\nclass LightChain extends FullChain {\n    /**\n    * @param {JungleDB} jdb\n    * @param {Accounts} accounts\n    * @param {Time} time\n    * @returns {Promise.<LightChain>}\n    */\n    static getPersistent(jdb, accounts, time) {\n        const store = ChainDataStore.getPersistent(jdb);\n        const chain = new LightChain(store, accounts, time);\n        return chain._init();\n    }\n\n    /**\n     * @param {Accounts} accounts\n     * @param {Time} time\n     * @returns {Promise.<LightChain>}\n     */\n    static createVolatile(accounts, time) {\n        const store = ChainDataStore.createVolatile();\n        const chain = new LightChain(store, accounts, time);\n        return chain._init();\n    }\n\n    /**\n     * @param {ChainDataStore} store\n     * @param {Accounts} accounts\n     * @param {Time} time\n     * @returns {PartialLightChain}\n     */\n    constructor(store, accounts, time) {\n        super(store, accounts, time);\n    }\n\n    /**\n     * @override\n     * @protected\n     */\n    async _init() {\n        // FIXME: this is a workaround as Babel doesn't understand await super().\n        await FullChain.prototype._init.call(this);\n        if (!this._proof) {\n            this._proof = await this._getChainProof();\n        }\n        return this;\n    }\n\n    /**\n     * @return {PartialLightChain}\n     */\n    async partialChain() {\n        const proof = await this.getChainProof();\n        const partialChain = new PartialLightChain(this._store, this._accounts, this._time, proof);\n        partialChain.on('committed', (proof, headHash, mainChain) => {\n            this._proof = proof;\n            this._headHash = headHash;\n            this._mainChain = mainChain;\n            this.fire('head-changed', this.head);\n        });\n        await partialChain._init();\n        return partialChain;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     * @override\n     */\n    _shouldExtendChainProof() {\n        return true;\n    }\n}\nClass.register(LightChain);\n","class LightConsensusAgent extends FullConsensusAgent {\n    /**\n     * @param {LightChain} blockchain\n     * @param {Mempool} mempool\n     * @param {Time} time\n     * @param {Peer} peer\n     * @param {InvRequestManager} invRequestManager\n     * @param {Subscription} targetSubscription\n     */\n    constructor(blockchain, mempool, time, peer, invRequestManager, targetSubscription) {\n        super(blockchain, mempool, time, peer, invRequestManager, targetSubscription);\n        /** @type {LightChain} */\n        this._blockchain = blockchain;\n        /** @type {PartialLightChain} */\n        this._partialChain = null;\n\n        /** @type {boolean} */\n        this._syncing = false;\n\n        // Flag indicating whether we do a full catchup or request a proof.\n        /** @type {boolean} */\n        this._catchup = false;\n\n        // Flag indicating whether we believe to be on the main chain of the client.\n        /** @type {boolean} */\n        this._onMainChain = false;\n\n        /** @type {Array.<Block>} */\n        this._orphanedBlocks = [];\n\n        /** @type {boolean} */\n        this._busy = false;\n\n        // Helper object to keep track of the accounts we're requesting from the peer.\n        this._accountsRequest = null;\n\n        // Flag to track chain proof requests.\n        this._requestedChainProof = false;\n\n        // Number of weak proofs we have received from the peer.\n        this._numWeakProofs = 0;\n\n        // Listen to consensus messages from the peer.\n        peer.channel.on('chain-proof', msg => this._onChainProof(msg));\n        peer.channel.on('accounts-tree-chunk', msg => this._onAccountsTreeChunk(msg));\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     * @override\n     */\n    async syncBlockchain() {\n        // We don't sync with nano nodes.\n        if (Services.isNanoNode(this._peer.peerAddress.services)) {\n            this._syncFinished();\n            return;\n        }\n\n        // Wait for all objects to arrive.\n        if (!this._objectsInFlight.isEmpty()) {\n            Log.v(LightConsensusAgent, `Waiting for ${this._objectsInFlight.length} objects to arrive ...`);\n            return;\n        }\n\n        // Wait for all objects to be processed.\n        if (!this._objectsProcessing.isEmpty()) {\n            Log.v(LightConsensusAgent, `Waiting for ${this._objectsProcessing.length} objects to be processed ...`);\n            return;\n        }\n\n        // Ban peer if the sync failed more often than allowed.\n        if (this._failedSyncs >= LightConsensusAgent.SYNC_ATTEMPTS_MAX) {\n            this._peer.channel.close(CloseType.BLOCKCHAIN_SYNC_FAILED, 'blockchain sync failed');\n            if (this._partialChain) {\n                await this._partialChain.abort();\n                this._partialChain = null;\n            }\n            return;\n        }\n\n        // Check if we know head block.\n        const block = await this._blockchain.getBlock(this._syncTarget, /*includeForks*/ true);\n\n        /*\n         * Three cases:\n         * 1) We know block and are not yet syncing: All is done.\n         * 2) We don't know the block and are not yet syncing: Start syncing.\n         *    and determine sync mode (full catchup or not).\n         * 3) We are syncing. Behave differently based on sync mode.\n         *    Note that we can switch from catchup to proof if we notice that\n         *    we're on a fork and get an INV vector starting from the genesis block.\n         */\n\n        // Case 1: We're up to date.\n        if (block && !this._syncing) {\n            this._syncFinished();\n            return;\n        }\n\n        // Case 2: Check header.\n        if (!block && !this._syncing) {\n            this._syncing = true;\n            this._onMainChain = false;\n\n            let header;\n            try {\n                header = await this.getHeader(this._syncTarget);\n            } catch (e) {\n                this._peer.channel.close(CloseType.DID_NOT_GET_REQUESTED_HEADER, 'Did not get requested header');\n                return;\n            }\n\n            // Check how to sync based on heuristic:\n            this._catchup = header.height >= this._blockchain.height\n                && header.height - this._blockchain.height <= Policy.NUM_BLOCKS_VERIFICATION;\n            Log.d(LightConsensusAgent, `Start syncing, catchup mode: ${this._catchup}`);\n        }\n\n        // Case 3: We are syncing.\n        if (this._syncing && !this._busy) {\n            if (this._catchup) {\n                await FullConsensusAgent.prototype.syncBlockchain.call(this);\n            } else {\n                // Initialize partial chain on first call.\n                if (!this._partialChain) {\n                    await this._initChainProofSync();\n                }\n\n                switch (this._partialChain.state) {\n                    case PartialLightChain.State.PROVE_CHAIN:\n                        this._requestChainProof();\n                        this.fire('sync-chain-proof', this._peer.peerAddress);\n                        break;\n                    case PartialLightChain.State.PROVE_ACCOUNTS_TREE:\n                        this._requestAccountsTree();\n                        this.fire('sync-accounts-tree', this._peer.peerAddress);\n                        break;\n                    case PartialLightChain.State.PROVE_BLOCKS:\n                        this._requestProofBlocks();\n                        this.fire('verify-accounts-tree', this._peer.peerAddress);\n                        break;\n                    case PartialLightChain.State.COMPLETE:\n                        // Commit state on success.\n                        this.fire('sync-finalize', this._peer.peerAddress);\n                        this._busy = true;\n                        await this._partialChain.commit();\n                        await this._applyOrphanedBlocks();\n                        this._syncFinished();\n                        break;\n                    case PartialLightChain.State.ABORTED:\n                        this._peer.channel.close(CloseType.ABORTED_SYNC, 'aborted sync');\n                        break;\n                    case PartialLightChain.State.WEAK_PROOF:\n                        Log.d(LightConsensusAgent, `Not syncing with ${this._peer.peerAddress} - weaker proof`);\n                        this._numWeakProofs++;\n                        if (this._numWeakProofs >= LightConsensusAgent.WEAK_PROOFS_MAX) {\n                            this._peer.channel.close(CloseType.BLOCKCHAIN_SYNC_FAILED, 'too many weak proofs');\n                        } else {\n                            this._syncFinished();\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _initChainProofSync() {\n        // Subscribe to all announcements from the peer.\n        this._subscribeTarget();\n\n        this._syncing = true;\n        this._synced = false;\n        this._catchup = false;\n        this._onMainChain = true;\n\n        if (this._partialChain) {\n            await this._partialChain.abort();\n        }\n\n        this._partialChain = await this._blockchain.partialChain();\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _syncFinished() {\n        if (this._partialChain) {\n            this._partialChain = null;\n        }\n\n        this._busy = false;\n        super._syncFinished();\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _applyOrphanedBlocks() {\n        for (const block of this._orphanedBlocks) {\n            const status = await this._blockchain.pushBlock(block);\n            if (status === LightChain.ERR_INVALID) {\n                this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK, 'received invalid block');\n                break;\n            }\n        }\n        this._orphanedBlocks = [];\n    }\n\n    // Syncing stages.\n    // Stage 1: Chain proof.\n    /**\n     * @returns {void}\n     * @private\n     */\n    _requestChainProof() {\n        Assert.that(this._partialChain && this._partialChain.state === PartialLightChain.State.PROVE_CHAIN);\n        Assert.that(!this._requestedChainProof);\n        this._busy = true;\n\n        // Request ChainProof from peer.\n        this._peer.channel.getChainProof();\n        this._requestedChainProof = true;\n\n        // Drop the peer if it doesn't send the chain proof within the timeout.\n        // TODO should we ban here instead?\n        this._peer.channel.expectMessage(Message.Type.CHAIN_PROOF, () => {\n            this._peer.channel.close(CloseType.GET_CHAIN_PROOF_TIMEOUT, 'getChainProof timeout');\n        }, LightConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT, LightConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT);\n    }\n\n    /**\n     * @param {ChainProofMessage} msg\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _onChainProof(msg) {\n        Assert.that(this._partialChain && this._partialChain.state === PartialLightChain.State.PROVE_CHAIN);\n        Log.d(LightConsensusAgent, `[CHAIN-PROOF] Received from ${this._peer.peerAddress}: ${msg.proof}`);\n\n        // Check if we have requested an interlink chain, reject unsolicited ones.\n        if (!this._requestedChainProof) {\n            Log.w(LightConsensusAgent, `Unsolicited chain proof received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n        this._requestedChainProof = false;\n\n        if (this._syncing) {\n            this.fire('verify-chain-proof', this._peer.peerAddress);\n        }\n\n        // Push the proof into the LightChain.\n        if (!(await this._partialChain.pushProof(msg.proof))) {\n            Log.w(LightConsensusAgent, `Invalid chain proof received from ${this._peer.peerAddress} - verification failed`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.INVALID_CHAIN_PROOF, 'invalid chain proof');\n            return;\n        }\n\n        // TODO add all blocks from the chain proof to knownObjects.\n        this._busy = false;\n        this.syncBlockchain().catch(Log.w.tag(LightConsensusAgent));\n    }\n\n    // Stage 2: Request AccountsTree.\n    /**\n     * @private\n     */\n    _requestAccountsTree() {\n        Assert.that(this._partialChain && this._partialChain.state === PartialLightChain.State.PROVE_ACCOUNTS_TREE);\n        Assert.that(!this._accountsRequest);\n        this._busy = true;\n\n        const startPrefix = this._partialChain.getMissingAccountsPrefix();\n        const headHash = this._partialChain.headHash;\n        Log.d(LightConsensusAgent, `Requesting AccountsTreeChunk starting at ${startPrefix} from ${this._peer.peerAddress}`);\n\n        this._accountsRequest = {\n            startPrefix: startPrefix,\n            blockHash: headHash\n        };\n\n        // Request AccountsProof from peer.\n        this._peer.channel.getAccountsTreeChunk(headHash, startPrefix);\n\n        // Drop the peer if it doesn't send the accounts proof within the timeout.\n        this._peer.channel.expectMessage(Message.Type.ACCOUNTS_TREE_CHUNK, () => {\n            this._peer.channel.close(CloseType.GET_ACCOUNTS_TREE_CHUNK_TIMEOUT, 'getAccountsTreeChunk timeout');\n        }, LightConsensusAgent.ACCOUNTS_TREE_CHUNK_REQUEST_TIMEOUT);\n    }\n\n    /**\n     * @param {AccountsTreeChunkMessage} msg\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _onAccountsTreeChunk(msg) {\n        Log.d(LightConsensusAgent, `[ACCOUNTS-TREE-CHUNK] Received from ${this._peer.peerAddress}: blockHash=${msg.blockHash}, proof=${msg.chunk}`);\n\n        // Check if we have requested an accounts proof, reject unsolicited ones.\n        if (!this._accountsRequest) {\n            Log.w(LightConsensusAgent, `Unsolicited accounts tree chunk received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n\n        Assert.that(this._partialChain && this._partialChain.state === PartialLightChain.State.PROVE_ACCOUNTS_TREE);\n\n        const startPrefix = this._accountsRequest.startPrefix;\n        const blockHash = this._accountsRequest.blockHash;\n\n        // Reset accountsRequest.\n        this._accountsRequest = null;\n\n        if (!msg.hasChunk()) {\n            // Restart syncing.\n            await this._partialChain.abort();\n            this._partialChain = null;\n            this._busy = false;\n            this._failedSyncs++;\n            return;\n        }\n\n        // Check that we know the reference block.\n        if (!blockHash.equals(msg.blockHash) || msg.chunk.head.prefix <= startPrefix) {\n            Log.w(LightConsensusAgent, `Received AccountsTreeChunk for block != head or wrong start prefix from ${this._peer.peerAddress}`);\n            this._peer.channel.close(CloseType.INVALID_ACCOUNTS_TREE_CHUNK, 'Invalid AccountsTreeChunk');\n            return;\n        }\n\n        // Verify the proof.\n        const chunk = msg.chunk;\n        if (!chunk.verify()) {\n            Log.w(LightConsensusAgent, `Invalid AccountsTreeChunk received from ${this._peer.peerAddress}`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.INVALID_ACCOUNTS_TREE_CHUNK, 'Invalid AccountsTreeChunk');\n            return;\n        }\n\n        // Check that the proof root hash matches the accountsHash in the reference block.\n        const rootHash = chunk.root();\n        const block = await this._partialChain.getBlock(blockHash);\n        if (!block.accountsHash.equals(rootHash)) {\n            Log.w(LightConsensusAgent, `Invalid AccountsTreeChunk (root hash) received from ${this._peer.peerAddress}`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH, 'AccountsTreeChunk root hash mismatch');\n            return;\n        }\n\n        // Return the retrieved accounts.\n        const result = await this._partialChain.pushAccountsTreeChunk(chunk);\n\n        // Something went wrong!\n        if (result < 0) {\n            // TODO maybe ban?\n            Log.e(`AccountsTree sync failed with error code ${result} from ${this._peer.peerAddress}`);\n            this._peer.channel.close(CloseType.ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH, 'AccountsTreeChunk root hash mismatch');\n        }\n\n        this._busy = false;\n        this.syncBlockchain().catch(Log.w.tag(LightConsensusAgent));\n    }\n\n    // Stage 3: Request proof blocks.\n    /**\n     * @private\n     */\n    _requestProofBlocks() {\n        Assert.that(this._partialChain && this._partialChain.state === PartialLightChain.State.PROVE_BLOCKS);\n\n        // If nothing happend since the last request, increase failed syncs.\n        if (this._lastChainHeight === this._partialChain.proofHeadHeight) {\n            this._failedSyncs++;\n        }\n        this._lastChainHeight = this._partialChain.proofHeadHeight;\n\n        // XXX Only one getBlocks request at a time.\n        if (this._peer.channel.isExpectingMessage(Message.Type.INV)) {\n            Log.e(LightConsensusAgent, 'Duplicate _requestProofBlocks()');\n            return;\n        }\n\n        // Drop the peer if it doesn't start sending InvVectors for its chain within the timeout.\n        this._peer.channel.expectMessage(Message.Type.INV, () => {\n            this._peer.channel.close(CloseType.GET_BLOCKS_TIMEOUT, 'getBlocks timeout');\n        }, BaseConsensusAgent.REQUEST_TIMEOUT);\n\n        // Request the full block for our proof head.\n        const locators = this._partialChain.getBlockLocators();\n        this.requestVector(new InvVector(InvVector.Type.BLOCK, locators[0]));\n\n        // Request blocks from peer.\n        this._peer.channel.getBlocks(locators, this._partialChain.numBlocksNeeded(), false);\n    }\n\n    // Block processing.\n    /**\n     * @returns {Promise.<void>}\n     * @private\n     */\n    _requestBlocks() {\n        // If we are syncing and not yet sure whether our blocks are on the main chain, just sync one block for now.\n        if (this._syncing && !this._onMainChain) {\n            return super._requestBlocks(1);\n        }\n        return super._requestBlocks();\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @returns {Promise.<void>}\n     * @protected\n     * @override\n     */\n    async _processBlock(hash, block) {\n        // If we find that we are on a fork far away from our chain, resync.\n        if (block.height < this._chain.height - Policy.NUM_BLOCKS_VERIFICATION\n            && (!this._partialChain || this._partialChain.state !== PartialLightChain.State.PROVE_BLOCKS)) {\n            this._onMainChain = false;\n            await this._initChainProofSync();\n            this.syncBlockchain().catch(Log.w.tag(LightConsensusAgent));\n            return;\n        } else {\n            this._onMainChain = true;\n        }\n\n        // Put block into blockchain.\n        const status = await this._chain.pushBlock(block);\n\n        switch (status) {\n            case FullChain.ERR_INVALID:\n                this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK, 'received invalid block');\n                break;\n\n            case FullChain.OK_EXTENDED:\n            case FullChain.OK_REBRANCHED:\n                if (this._syncing) this._numBlocksExtending++;\n                break;\n\n            case FullChain.OK_FORKED:\n                if (this._syncing) {\n                    this._numBlocksForking++;\n                    this._forkHead = block;\n                }\n                break;\n\n            case LightChain.ERR_ORPHAN:\n                this._onOrphanBlock(hash, block);\n                break;\n        }\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @returns {void}\n     * @protected\n     * @override\n     */\n    async _onKnownBlockAnnounced(hash, block) {\n        if (this._syncing && this._catchup) {\n            // If we find that we are on a fork far away from our chain, resync.\n            if (block.height < this._chain.height - Policy.NUM_BLOCKS_VERIFICATION\n                && (!this._partialChain || this._partialChain.state !== PartialLightChain.State.PROVE_BLOCKS)) {\n                this._onMainChain = false;\n                await this._initChainProofSync();\n                this.syncBlockchain().catch(e => Log.e(LightConsensusAgent, e));\n                return;\n            } else {\n                this._onMainChain = true;\n            }\n\n            FullConsensusAgent.prototype._onKnownBlockAnnounced.call(this, hash, block);\n        }\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Block} block\n     * @private\n     * @override\n     */\n    _onOrphanBlock(hash, block) {\n        if (this._syncing && !this._catchup) {\n            this._orphanedBlocks.push(block);\n        } else {\n            super._onOrphanBlock(hash, block);\n        }\n    }\n\n    // Header processing.\n    /**\n     * @param {Hash} hash\n     * @return {Promise.<BlockHeader>}\n     */\n    getHeader(hash) {\n        Assert.that(!this._headerRequest);\n\n        return new Promise((resolve, reject) => {\n            const vector = new InvVector(InvVector.Type.BLOCK, hash);\n            this._headerRequest = {\n                hash: hash,\n                resolve: resolve,\n                reject: reject\n            };\n\n            this._peer.channel.getHeader([vector]);\n\n            // Drop the peer if it doesn't send the accounts proof within the timeout.\n            this._peer.channel.expectMessage(Message.Type.HEADER, () => {\n                this._headerRequest = null;\n                this._peer.channel.close(CloseType.GET_HEADER_TIMEOUT, 'getHeader timeout');\n                reject(new Error('timeout')); // TODO error handling\n            }, BaseConsensusAgent.REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * @param {HeaderMessage} msg\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _onHeader(msg) {\n        const header = msg.header;\n        const hash = header.hash();\n\n        // Check if we have requested this block.\n        if (!this._headerRequest) {\n            Log.w(NanoConsensusAgent, `Unsolicited header ${hash} received from ${this._peer.peerAddress}, discarding`);\n            // TODO What should happen here? ban? drop connection?\n            return;\n        }\n\n        const requestedHash = this._headerRequest.hash;\n        const resolve = this._headerRequest.resolve;\n        const reject = this._headerRequest.reject;\n\n        // Reset headerRequest.\n        this._headerRequest = null;\n\n        // Check that it is the correct hash.\n        if (!requestedHash.equals(hash)) {\n            Log.w(LightConsensusAgent, `Received wrong header from ${this._peer.peerAddress}`);\n            this._peer.channel.close(CloseType.RECEIVED_WRONG_HEADER, 'Received wrong header');\n            reject(new Error('Received wrong header'));\n            return;\n        }\n\n        resolve(header);\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     * @override\n     */\n    _onClose() {\n        if (this._partialChain) {\n            this._partialChain.abort().catch(Log.w.tag(LightConsensusAgent));\n        }\n\n        super._onClose();\n    }\n\n    /** @type {LightChain} */\n    get _chain() {\n        if (this._syncing && !this._catchup && this._partialChain) {\n            return this._partialChain;\n        }\n        return this._blockchain;\n    }\n\n    /** @type {boolean} */\n    get syncing() {\n        return this._syncing;\n    }\n}\n/**\n * Maximum time (ms) to wait for chain-proof after sending out get-chain-proof before dropping the peer.\n * @type {number}\n */\nLightConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT = 1000 * 45;\n/**\n * Maximum time (ms) to wait for between chain-proof chunks before dropping the peer.\n * @type {number}\n */\nLightConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT = 1000 * 10;\n/**\n * Maximum time (ms) to wait for accounts-tree-chunk after sending out get-accounts-tree-chunk before dropping the peer.\n * @type {number}\n */\nLightConsensusAgent.ACCOUNTS_TREE_CHUNK_REQUEST_TIMEOUT = 1000 * 8;\n/**\n * Maximum number of blockchain sync retries before closing the connection.\n * @type {number}\n */\nLightConsensusAgent.SYNC_ATTEMPTS_MAX = 5;\n/**\n * Maximum number of inventory vectors to sent in the response for onGetBlocks.\n * @type {number}\n */\nLightConsensusAgent.GETBLOCKS_VECTORS_MAX = 500;\n/**\n * Maximum number of weak proofs we allow before closing the connection.\n * @type {number}\n */\nLightConsensusAgent.WEAK_PROOFS_MAX = 3;\n\nClass.register(LightConsensusAgent);\n","class LightConsensus extends BaseConsensus {\n    /**\n     * @param {LightChain} blockchain\n     * @param {Mempool} mempool\n     * @param {Network} network\n     */\n    constructor(blockchain, mempool, network) {\n        super(blockchain, mempool, network);\n        /** @type {LightChain} */\n        this._blockchain = blockchain;\n        /** @type {Mempool} */\n        this._mempool = mempool;\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {BaseConsensusAgent}\n     * @override\n     */\n    _newConsensusAgent(peer) {\n        return new LightConsensusAgent(this._blockchain, this._mempool, this._network.time, peer, this._invRequestManager, this._subscription);\n    }\n\n    /**\n     * @param {Peer} peer\n     * @override\n     */\n    _onPeerJoined(peer) {\n        const agent = super._onPeerJoined(peer);\n\n        // Forward sync events.\n        this.bubble(agent, 'sync-chain-proof', 'verify-chain-proof', 'sync-accounts-tree', 'verify-accounts-tree', 'sync-finalize');\n\n        return agent;\n    }\n\n    /** @type {LightChain} */\n    get blockchain() {\n        return this._blockchain;\n    }\n\n    /** @type {Mempool} */\n    get mempool() {\n        return this._mempool;\n    }\n}\nClass.register(LightConsensus);\n","class PartialLightChain extends LightChain {\n    /**\n     * @param {ChainDataStore} store\n     * @param {Accounts} accounts\n     * @param {Time} time\n     * @param {ChainProof} proof\n     * @returns {PartialLightChain}\n     */\n    constructor(store, accounts, time, proof) {\n        const tx = store.transaction(false);\n        super(tx, accounts, time);\n\n        /** @type {ChainProof} */\n        this._proof = proof;\n\n        /** @type {PartialLightChain.State} */\n        this._state = PartialLightChain.State.PROVE_CHAIN;\n        /** @type {PartialAccountsTree} */\n        this._partialTree = null;\n        /** @type {Accounts} */\n        this._accountsTx = null;\n        /** @type {ChainData} */\n        this._proofHead = null;\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @returns {Promise.<boolean>}\n     */\n    pushProof(proof) {\n        // Synchronize with .pushBlock()\n        return this._synchronizer.push(/*priority*/ 0,\n            this._pushProof.bind(this, proof));\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @returns {Promise.<boolean>}\n     * @private\n     */\n    async _pushProof(proof) {\n        const toDo = [];\n        for (let i = 0; i < proof.prefix.length; ++i) {\n            const block = proof.prefix.blocks[i];\n            const hash = block.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (!knownBlock && !block.header._pow) {\n                toDo.push(block.header);\n            }\n        }\n        for (let i = 0; i < proof.suffix.length; ++i) {\n            const header = proof.suffix.headers[i];\n            const hash = header.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (!knownBlock && !header._pow) {\n                toDo.push(header);\n            }\n        }\n        await BaseChain.manyPow(toDo);\n\n        // Verify all prefix blocks that we don't know yet.\n        for (let i = 0; i < proof.prefix.length; i++) {\n            const block = proof.prefix.blocks[i];\n            const hash = block.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (knownBlock) {\n                proof.prefix.blocks[i] = knownBlock.toLight();\n            } else if (!(await block.verify(this._time))) {\n                Log.w(PartialLightChain, 'Rejecting proof - prefix contains invalid block');\n                return false;\n            }\n        }\n\n        // Verify all suffix headers that we don't know yet.\n        for (let i = 0; i < proof.suffix.length; i++) {\n            const header = proof.suffix.headers[i];\n            const hash = header.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (knownBlock) {\n                proof.suffix.headers[i] = knownBlock.header;\n            } else if (!(await header.verifyProofOfWork())) {\n                Log.w(PartialLightChain, 'Rejecting proof - suffix contains invalid header');\n                return false;\n            }\n        }\n\n        // Check that the proof is valid.\n        if (!(await proof.verify())) {\n            Log.w(PartialLightChain, 'Rejecting proof - verification failed');\n            return false;\n        }\n\n        // Check that the suffix is long enough.\n        if (proof.suffix.length !== Policy.K && proof.suffix.length !== proof.head.height - 1) {\n            Log.w(PartialLightChain, 'Rejecting proof - invalid suffix length');\n            return false;\n        }\n\n        // Check that the dense suffix of the prefix is long enough.\n        // The paper doesn't require this, we however need a sufficiently long dense suffix\n        // to be able to verify block difficulties.\n        const denseSuffix = proof.prefix.denseSuffix();\n        if (denseSuffix.length < Policy.M && proof.prefix.length > 0 && proof.prefix.head.height >= Policy.M) {\n            Log.w(NanoChain, 'Rejecting proof - dense suffix too short');\n            return false;\n        }\n\n        // Compute and verify interlinks for the suffix.\n        const suffixBlocks = [];\n        let head = proof.prefix.head;\n        for (const header of proof.suffix.headers) {\n            const interlink = await head.getNextInterlink(header.target, header.version);\n            const interlinkHash = interlink.hash();\n            if (!header.interlinkHash.equals(interlinkHash)) {\n                Log.w(PartialLightChain, 'Rejecting proof - invalid interlink hash in proof suffix');\n                return false;\n            }\n\n            head = new Block(header, interlink);\n            suffixBlocks.push(head);\n        }\n\n        // If the given proof is better than our current proof, adopt the given proof as the new best proof.\n        const currentProof = this._proof || await this._getChainProof();\n        if (await BaseChain.isBetterProof(proof, currentProof, Policy.M)) {\n            await this._acceptProof(proof, suffixBlocks);\n        } else {\n            await this.abort();\n            this._state = PartialLightChain.State.WEAK_PROOF;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @param {Array.<Block>} suffix\n     * @returns {Promise.<void>}\n     * @protected\n     */\n    async _acceptProof(proof, suffix) {\n        // If the proof prefix head is not part of our current dense chain suffix, reset store and start over.\n        // TODO use a store transaction here?\n        const head = proof.prefix.head;\n        const headHash = head.hash();\n        const headData = await this._store.getChainData(headHash);\n        if (!headData || headData.totalDifficulty <= 0) {\n            // Delete our current chain.\n            await this._store.truncate();\n\n            /** @type {Array.<Block>} */\n            const denseSuffix = proof.prefix.denseSuffix();\n\n            // Put all other prefix blocks in the store as well (so they can be retrieved via getBlock()/getBlockAt()),\n            // but don't allow blocks to be appended to them by setting totalDifficulty = -1;\n            let superBlockCounts = new SuperBlockCounts();\n            for (let i = 0; i < proof.prefix.length - denseSuffix.length; i++) {\n                const block = proof.prefix.blocks[i];\n                const hash = block.hash();\n                const depth = BlockUtils.getHashDepth(await block.pow());\n                superBlockCounts = superBlockCounts.copyAndAdd(depth);\n\n                const data = new ChainData(block, /*totalDifficulty*/ -1, /*totalWork*/ -1, superBlockCounts, true);\n                await this._store.putChainData(hash, data);\n            }\n\n            // Set the tail end of the dense suffix of the prefix as the new chain head.\n            const tailEnd = denseSuffix[0];\n            this._headHash = tailEnd.hash();\n            this._mainChain = await ChainData.initial(tailEnd, superBlockCounts);\n            await this._store.putChainData(this._headHash, this._mainChain);\n\n            // Only in the dense suffix of the prefix we can calculate the difficulties.\n            for (let i = 1; i < denseSuffix.length; i++) {\n                const block = denseSuffix[i];\n                const result = await this._pushLightBlock(block); // eslint-disable-line no-await-in-loop\n                Assert.that(result >= 0);\n            }\n        }\n\n        // Push all suffix blocks.\n        for (const block of suffix) {\n            const result = await this._pushLightBlock(block); // eslint-disable-line no-await-in-loop\n            Assert.that(result >= 0);\n        }\n\n        this._state = PartialLightChain.State.PROVE_ACCOUNTS_TREE;\n        this._partialTree = await this._accounts.partialAccountsTree();\n        this._proofHead = this._mainChain;\n        await this._store.setHead(this.headHash);\n\n        this._proof = proof;\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushLightBlock(block) {\n        // Check if we already know this header/block.\n        const hash = block.hash();\n        const knownBlock = await this._store.getBlock(hash);\n        if (knownBlock) {\n            return NanoChain.OK_KNOWN;\n        }\n\n        // Retrieve the immediate predecessor.\n        /** @type {ChainData} */\n        const prevData = await this._store.getChainData(block.prevHash);\n        if (!prevData || prevData.totalDifficulty <= 0) {\n            return NanoChain.ERR_ORPHAN;\n        }\n\n        return this._pushBlockInternal(block, hash, prevData);\n    }\n\n    /**\n     * @param {Block} block\n     * @param {Hash} blockHash\n     * @param {ChainData} prevData\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushBlockInternal(block, blockHash, prevData) {\n        // Block looks good, create ChainData.\n        const chainData = await prevData.nextChainData(block);\n\n        // Check if the block extends our current main chain.\n        if (block.prevHash.equals(this.headHash)) {\n            // Append new block to the main chain.\n            chainData.onMainChain = true;\n            prevData.mainChainSuccessor = blockHash;\n\n            await this._store.putChainData(blockHash, chainData);\n            await this._store.putChainData(block.prevHash, prevData, /*includeBody*/ false);\n\n            // Update head.\n            this._mainChain = chainData;\n            this._headHash = blockHash;\n\n            // Append new block to chain proof.\n            if (this._proof) {\n                const proofHeadHash = this._proof.head.hash();\n                if (block.prevHash.equals(proofHeadHash)) {\n                    this._proof = await this._extendChainProof(this._proof, block.header);\n                }\n            }\n\n            // Tell listeners that the head of the chain has changed.\n            this.fire('head-changed', this.head, /*rebranching*/ false);\n\n            return NanoChain.OK_EXTENDED;\n        }\n\n        // Otherwise, check if the new chain is harder than our current main chain.\n        if (chainData.totalDifficulty > this._mainChain.totalDifficulty) {\n            // A fork has become the hardest chain, rebranch to it.\n            await this._rebranch(blockHash, chainData);\n\n            return NanoChain.OK_REBRANCHED;\n        }\n\n        // Otherwise, we are creating/extending a fork. Store chain data.\n        Log.v(NanoChain, `Creating/extending fork with block ${blockHash}, height=${block.height}, totalDifficulty=${chainData.totalDifficulty}, totalWork=${chainData.totalWork}`);\n        await this._store.putChainData(blockHash, chainData);\n\n        return NanoChain.OK_FORKED;\n    }\n\n    /**\n     * @override\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     */\n    _pushBlock(block) {\n        // Queue new blocks while syncing.\n        if (this._state === PartialLightChain.State.PROVE_BLOCKS) {\n            const blockHash = block.hash();\n            if (this._proofHead.head.prevHash.equals(blockHash)) {\n                return this._pushBlockBackwards(block);\n            } else if (this._proofHead.head.hash().equals(blockHash)) {\n                return this._pushHeadBlock(block);\n            }\n        }\n\n        return FullChain.ERR_ORPHAN;\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushHeadBlock(block) {\n        // Check if we already know this block.\n        const hash = block.hash();\n\n        // Check that the given block is a full block (includes block body).\n        if (!block.isFull()) {\n            Log.w(PartialLightChain, 'Rejecting block - body missing');\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check all intrinsic block invariants.\n        if (!(await block.verify(this._time))) {\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check that all known interlink blocks are valid predecessors of the given block.\n        if (!(await this._verifyInterlink(block))) {\n            Log.w(PartialLightChain, 'Rejecting block - interlink verification failed');\n            return FullChain.ERR_INVALID;\n        }\n\n        // We know that the current proof head is the successor.\n        // Check that the block is a valid predecessor of its immediate successor.\n        const prevData = await this._store.getChainData(block.prevHash);\n        if (!prevData) {\n            Log.w(PartialLightChain, 'Rejecting block - unknown predecessor');\n            return FullChain.ERR_ORPHAN;\n        }\n\n        // Check that the block is a valid successor of its immediate predecessor.\n        const predecessor = prevData.head;\n        if (!(await block.isImmediateSuccessorOf(predecessor))) {\n            Log.w(PartialLightChain, 'Rejecting block - not a valid immediate successor');\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check that the difficulty is correct.\n        const nextTarget = await this.getNextTarget(predecessor);\n        if (BlockUtils.isValidTarget(nextTarget)) {\n            if (block.nBits !== BlockUtils.targetToCompact(nextTarget)) {\n                Log.w(PartialLightChain, 'Rejecting block - difficulty mismatch');\n                return FullChain.ERR_INVALID;\n            }\n        } else {\n            Log.w(PartialLightChain, 'Skipping difficulty verification - not enough blocks available');\n        }\n\n        // Block looks good, create ChainData.\n        const chainData = await prevData.nextChainData(block);\n\n        // Prepend new block to the main chain.\n        if (!(await this._prepend(hash, chainData))) {\n            return FullChain.ERR_INVALID;\n        }\n\n        this._mainChain = chainData;\n        this._proofHead = chainData; // So now it is a full block.\n        this._headHash = hash;\n\n        // Check whether we're complete.\n        if (!this.needsMoreBlocks()) {\n            await this._complete();\n        }\n\n        return FullChain.OK_EXTENDED;\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushBlockBackwards(block) {\n        // Check if we already know this block.\n        const hash = block.hash();\n\n        // Check that the given block is a full block (includes block body).\n        if (!block.isFull()) {\n            Log.w(PartialLightChain, 'Rejecting block - body missing');\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check all intrinsic block invariants.\n        if (!(await block.verify(this._time))) {\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check that all known interlink blocks are valid predecessors of the given block.\n        if (!(await this._verifyInterlink(block))) {\n            Log.w(PartialLightChain, 'Rejecting block - interlink verification failed');\n            return FullChain.ERR_INVALID;\n        }\n\n        // We know that the current proof head is the successor.\n        // Check that the block is a valid predecessor of its immediate successor.\n        if (!(await this._proofHead.head.isImmediateSuccessorOf(block))) {\n            Log.w(PartialLightChain, 'Rejecting block - not a valid immediate predecessor');\n            return FullChain.ERR_INVALID;\n        }\n\n        // Check that the difficulty is correct.\n        const nextTarget = await this.getNextTarget(block);\n        if (BlockUtils.isValidTarget(nextTarget)) {\n            if (this._proofHead.head.nBits !== BlockUtils.targetToCompact(nextTarget)) {\n                Log.w(PartialLightChain, 'Rejecting block - difficulty mismatch');\n                return FullChain.ERR_INVALID;\n            }\n        } else {\n            Log.w(NanoChain, 'Skipping difficulty verification - not enough blocks available');\n        }\n\n        // Block looks good, create ChainData.\n        const chainData = await this._proofHead.previousChainData(block);\n\n        // Prepend new block to the main chain.\n        if (!(await this._prepend(hash, chainData))) {\n            return FullChain.ERR_INVALID;\n        }\n\n        return FullChain.OK_EXTENDED;\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {ChainData} chainData\n     * @returns {Promise.<boolean>}\n     * @private\n     */\n    async _prepend(blockHash, chainData) {\n        try {\n            const transactionCache = new TransactionCache();\n            await this._accountsTx.revertBlock(chainData.head, transactionCache);\n        } catch (e) {\n            // AccountsHash mismatch. This can happen if someone gives us an invalid block.\n            // TODO error handling\n            Log.w(PartialLightChain, `Rejecting block - failed to commit to AccountsTree: ${e.message || e}`);\n            return false;\n        }\n\n        chainData.onMainChain = true;\n        chainData.mainChainSuccessor = this._proofHead.head.hash();\n        await this._store.putChainData(blockHash, chainData);\n\n        this._proofHead = chainData;\n\n        // Check whether we're complete.\n        if (!this.needsMoreBlocks()) {\n            await this._complete();\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {AccountsTreeChunk} chunk\n     * @returns {Promise.<PartialAccountsTree.Status>}\n     */\n    async pushAccountsTreeChunk(chunk) {\n        if (this._state !== PartialLightChain.State.PROVE_ACCOUNTS_TREE) {\n            return PartialAccountsTree.Status.ERR_INCORRECT_PROOF;\n        }\n\n        const result = await this._partialTree.pushChunk(chunk);\n\n        // If we're done, prepare next phase.\n        if (result === PartialAccountsTree.Status.OK_COMPLETE) {\n            this._state = PartialLightChain.State.PROVE_BLOCKS;\n            this._accountsTx = new Accounts(this._partialTree.transaction(false));\n        }\n\n        return result;\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _complete() {\n        this._state = PartialLightChain.State.COMPLETE;\n        if (this._accountsTx) {\n            await this._accountsTx.abort();\n            this._accountsTx = null;\n        }\n\n        const currentProof = this._proof || await this._getChainProof();\n        this.fire('complete', currentProof, this._headHash, this._mainChain);\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    async commit() {\n        if (this._accountsTx) {\n            await this._accountsTx.abort();\n        }\n\n        const result = await JDB.JungleDB.commitCombined(...this._store.txs, this._partialTree.tx);\n        this._partialTree = null;\n\n        const currentProof = this._proof || await this._getChainProof();\n        this.fire('committed', currentProof, this._headHash, this._mainChain);\n\n        return result;\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     */\n    async abort() {\n        this._state = PartialLightChain.State.ABORTED;\n        if (this._accountsTx) {\n            await this._accountsTx.abort();\n        }\n        if (this._partialTree) {\n            await this._partialTree.abort();\n        }\n        await this._store.abort();\n        this.fire('aborted');\n    }\n\n    /**\n     * @returns {string}\n     */\n    getMissingAccountsPrefix() {\n        if (this._partialTree) {\n            return this._partialTree.missingPrefix;\n        }\n        return '';\n    }\n\n    /**\n     * @returns {Array.<Hash>}\n     */\n    getBlockLocators() {\n        return this._proofHead ? [this._proofHead.head.hash()] : [this.headHash];\n    }\n\n    /**\n     * @returns {number}\n     */\n    numBlocksNeeded() {\n        if (!this._proofHead) {\n            return Policy.NUM_BLOCKS_VERIFICATION;\n        }\n        let numBlocks = Policy.NUM_BLOCKS_VERIFICATION - (this.height - this._proofHead.head.height + 1);\n        // If we begin syncing, we need one block additionally.\n        if (!this._proofHead.head.isFull()) {\n            numBlocks++;\n        }\n        return numBlocks;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    needsMoreBlocks() {\n        return this.numBlocksNeeded() > 0;\n    }\n\n    /** @type {PartialLightChain.State} */\n    get state() {\n        return this._state;\n    }\n\n    /** @type {number} */\n    get proofHeadHeight() {\n        return this._proofHead.head.height;\n    }\n}\n/**\n * @enum {number}\n */\nPartialLightChain.State = {\n    WEAK_PROOF: -2,\n    ABORTED: -1,\n    PROVE_CHAIN: 0,\n    PROVE_ACCOUNTS_TREE: 1,\n    PROVE_BLOCKS: 2,\n    COMPLETE: 3\n};\nClass.register(PartialLightChain);\n","class NanoChain extends BaseChain {\n    /**\n     * @param {Time} time\n     * @returns {Promise.<NanoChain>}\n     */\n    constructor(time) {\n        super(ChainDataStore.createVolatile());\n\n        /** @type {Time} */\n        this._time = time;\n\n        /** @type {ChainProof} */\n        this._proof = new ChainProof(new BlockChain([GenesisConfig.GENESIS_BLOCK.toLight()]), new HeaderChain([]));\n\n        /** @type {Hash} */\n        this._headHash = GenesisConfig.GENESIS_HASH;\n\n        /** @type {PrioritySynchronizer} */\n        this._synchronizer = new PrioritySynchronizer(2);\n\n        return this._init();\n    }\n\n    async _init() {\n        this._mainChain = await ChainData.initial(GenesisConfig.GENESIS_BLOCK);\n        await this._store.putChainData(GenesisConfig.GENESIS_HASH, this._mainChain);\n\n        return this;\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @returns {Promise.<boolean>}\n     */\n    pushProof(proof) {\n        return this._synchronizer.push(/*priority*/ 0,\n            this._pushProof.bind(this, proof));\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @returns {Promise.<boolean>}\n     * @private\n     */\n    async _pushProof(proof) {\n        const toDo = [];\n        for (let i = 0; i < proof.prefix.length; ++i) {\n            const block = proof.prefix.blocks[i];\n            const hash = block.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (!knownBlock && !block.header._pow) {\n                toDo.push(block.header);\n            }\n        }\n        for (let i = 0; i < proof.suffix.length; ++i) {\n            const header = proof.suffix.headers[i];\n            const hash = header.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (!knownBlock && !header._pow) {\n                toDo.push(header);\n            }\n        }\n        await BaseChain.manyPow(toDo);\n\n        // Verify all prefix blocks that we don't know yet.\n        for (let i = 0; i < proof.prefix.length; i++) {\n            const block = proof.prefix.blocks[i];\n            const hash = block.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (knownBlock) {\n                proof.prefix.blocks[i] = knownBlock.toLight();\n            } else if (!(await block.verify(this._time))) {\n                Log.w(NanoChain, 'Rejecting proof - prefix contains invalid block');\n                return false;\n            }\n        }\n\n        // Verify all suffix headers that we don't know yet.\n        for (let i = 0; i < proof.suffix.length; i++) {\n            const header = proof.suffix.headers[i];\n            const hash = header.hash();\n            const knownBlock = await this._store.getBlock(hash);\n            if (knownBlock) {\n                proof.suffix.headers[i] = knownBlock.header;\n            } else if (!(await header.verifyProofOfWork())) {\n                Log.w(NanoChain, 'Rejecting proof - suffix contains invalid header');\n                return false;\n            }\n        }\n\n        // Check that the proof is valid.\n        if (!(await proof.verify())) {\n            Log.w(NanoChain, 'Rejecting proof - verification failed');\n            return false;\n        }\n\n        // Check that the suffix is long enough.\n        if (proof.suffix.length !== Policy.K && proof.suffix.length !== proof.head.height - 1) {\n            Log.w(NanoChain, 'Rejecting proof - invalid suffix length');\n            return false;\n        }\n\n        // Check that the dense suffix of the prefix is long enough.\n        // The paper doesn't require this, we however need a sufficiently long dense suffix\n        // to be able to verify block difficulties.\n        const denseSuffix = proof.prefix.denseSuffix();\n        if (denseSuffix.length < Policy.M && proof.prefix.length > 0 && proof.prefix.head.height >= Policy.M) {\n            Log.w(NanoChain, 'Rejecting proof - dense suffix too short');\n            return false;\n        }\n\n        // Compute and verify interlinks for the suffix.\n        const suffixBlocks = [];\n        let head = proof.prefix.head;\n        for (const header of proof.suffix.headers) {\n            const interlink = await head.getNextInterlink(header.target, header.version);\n            const interlinkHash = interlink.hash();\n            if (!header.interlinkHash.equals(interlinkHash)) {\n                Log.w(NanoChain, 'Rejecting proof - invalid interlink hash in proof suffix');\n                return false;\n            }\n\n            head = new Block(header, interlink);\n            suffixBlocks.push(head);\n        }\n\n        // If the given proof is better than our current proof, adopt the given proof as the new best proof.\n        const currentProof = this._proof || await this._getChainProof();\n        if (await BaseChain.isBetterProof(proof, currentProof, Policy.M)) {\n            await this._acceptProof(proof, suffixBlocks);\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @param {Array.<Block>} suffix\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _acceptProof(proof, suffix) {\n        this._proof = proof;\n\n        // If the proof prefix head is not part of our current dense chain suffix, reset store and start over.\n        // TODO use a store transaction here?\n        const head = proof.prefix.head;\n        const headHash = head.hash();\n        const headData = await this._store.getChainData(headHash);\n        if (!headData || headData.totalDifficulty <= 0) {\n            // Delete our current chain.\n            await this._store.truncate();\n\n            /** @type {Array.<Block>} */\n            const denseSuffix = proof.prefix.denseSuffix();\n\n            // Store all prefix blocks so they can be retrieved via getBlock()/getBlockAt()),\n            // but don't allow blocks to be appended to them by setting totalDifficulty = -1;\n            let superBlockCounts = new SuperBlockCounts();\n            for (let i = 0; i < proof.prefix.length - denseSuffix.length; i++) {\n                const block = proof.prefix.blocks[i];\n                const hash = block.hash();\n                const depth = BlockUtils.getHashDepth(await block.pow());\n                superBlockCounts = superBlockCounts.copyAndAdd(depth);\n\n                const data = new ChainData(block, /*totalDifficulty*/ -1, /*totalWork*/ -1, superBlockCounts, true);\n                await this._store.putChainData(hash, data);\n            }\n\n            // Set the tail end of the dense suffix of the prefix as the new chain head.\n            const tailEnd = denseSuffix[0];\n            this._headHash = tailEnd.hash();\n            this._mainChain = await ChainData.initial(tailEnd, superBlockCounts);\n            await this._store.putChainData(this._headHash, this._mainChain);\n\n            // Only in the dense suffix of the prefix we can calculate the difficulties.\n            for (let i = 1; i < denseSuffix.length; i++) {\n                const block = denseSuffix[i];\n                const result = await this._pushBlock(block); // eslint-disable-line no-await-in-loop\n                Assert.that(result >= 0);\n            }\n        }\n\n        // Push all suffix blocks.\n        for (const block of suffix) {\n            const result = await this._pushBlock(block); // eslint-disable-line no-await-in-loop\n            Assert.that(result >= 0);\n        }\n    }\n\n    /**\n     * @param {Block} block\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushBlock(block) {\n        // Check if we already know this header/block.\n        const hash = await block.hash();\n        const knownBlock = await this._store.getBlock(hash);\n        if (knownBlock) {\n            return NanoChain.OK_KNOWN;\n        }\n\n        // Retrieve the immediate predecessor.\n        /** @type {ChainData} */\n        const prevData = await this._store.getChainData(block.prevHash);\n        if (!prevData || prevData.totalDifficulty <= 0) {\n            return NanoChain.ERR_ORPHAN;\n        }\n\n        return this._pushBlockInternal(block, hash, prevData);\n    }\n\n    /**\n     * @param {BlockHeader} header\n     * @returns {Promise.<number>}\n     */\n    pushHeader(header) {\n        // Synchronize with .pushProof()\n        return this._synchronizer.push(/*priority*/ 0,\n            this._pushHeader.bind(this, header));\n    }\n\n    /**\n     * @param {BlockHeader} header\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushHeader(header) {\n        // Check if we already know this header/block.\n        const hash = header.hash();\n        const knownBlock = await this._store.getBlock(hash);\n        if (knownBlock) {\n            return NanoChain.OK_KNOWN;\n        }\n\n        // Verify proof of work.\n        if (!(await header.verifyProofOfWork())) {\n            Log.w(NanoChain, 'Rejecting header - PoW verification failed');\n            return NanoChain.ERR_INVALID;\n        }\n\n        // Retrieve the immediate predecessor.\n        /** @type {ChainData} */\n        const prevData = await this._store.getChainData(header.prevHash);\n        if (!prevData || prevData.totalDifficulty <= 0) {\n            Log.w(NanoChain, 'Rejecting header - unknown predecessor');\n            return NanoChain.ERR_ORPHAN;\n        }\n\n        // Check that the block is valid successor to its predecessor.\n        /** @type {Block} */\n        const predecessor = prevData.head;\n        if (!header.isImmediateSuccessorOf(predecessor.header)) {\n            Log.w(NanoChain, 'Rejecting header - not a valid successor');\n            return NanoChain.ERR_INVALID;\n        }\n\n        // Check that the difficulty is correct (if we can compute the next target)\n        const nextTarget = await this.getNextTarget(predecessor);\n        if (BlockUtils.isValidTarget(nextTarget)) {\n            if (header.nBits !== BlockUtils.targetToCompact(nextTarget)) {\n                Log.w(NanoChain, 'Rejecting header - difficulty mismatch');\n                return NanoChain.ERR_INVALID;\n            }\n        } else {\n            Log.w(NanoChain, 'Skipping difficulty verification - not enough blocks available');\n        }\n\n        // Compute and verify interlink.\n        const interlink = await predecessor.getNextInterlink(header.target, header.version);\n        const interlinkHash = interlink.hash();\n        if (!interlinkHash.equals(header.interlinkHash)) {\n            Log.w(NanoChain, 'Rejecting header - interlink verification failed');\n            return NanoChain.ERR_INVALID;\n        }\n\n        const block = new Block(header, interlink);\n        return this._pushBlockInternal(block, hash, prevData);\n    }\n\n    /**\n     * @param {Block} block\n     * @param {Hash} blockHash\n     * @param {ChainData} prevData\n     * @returns {Promise.<number>}\n     * @private\n     */\n    async _pushBlockInternal(block, blockHash, prevData) {\n        // Block looks good, create ChainData.\n        const chainData = await prevData.nextChainData(block);\n\n        // Check if the block extends our current main chain.\n        if (block.prevHash.equals(this.headHash)) {\n            // Append new block to the main chain.\n            chainData.onMainChain = true;\n            prevData.mainChainSuccessor = blockHash;\n\n            const storeTx = this._store.synchronousTransaction();\n            storeTx.putChainDataSync(blockHash, chainData);\n            storeTx.putChainDataSync(block.prevHash, prevData);\n            await storeTx.commit();\n\n            // Update head.\n            this._mainChain = chainData;\n            this._headHash = blockHash;\n\n            // Append new block to chain proof.\n            if (this._proof) {\n                const proofHeadHash = this._proof.head.hash();\n                if (block.prevHash.equals(proofHeadHash)) {\n                    this._proof = await this._extendChainProof(this._proof, block.header);\n                }\n            }\n\n            // Tell listeners that the head of the chain has changed.\n            this.fire('head-changed', this.head, /*rebranching*/ false);\n\n            return NanoChain.OK_EXTENDED;\n        }\n\n        // Otherwise, check if the new chain is harder than our current main chain.\n        if (chainData.totalDifficulty > this._mainChain.totalDifficulty) {\n            // A fork has become the hardest chain, rebranch to it.\n            await this._rebranch(blockHash, chainData);\n\n            return NanoChain.OK_REBRANCHED;\n        }\n\n        // Otherwise, we are creating/extending a fork. Store chain data.\n        Log.v(NanoChain, `Creating/extending fork with block ${blockHash}, height=${block.height}, totalDifficulty=${chainData.totalDifficulty}, totalWork=${chainData.totalWork}`);\n        await this._store.putChainData(blockHash, chainData);\n\n        return NanoChain.OK_FORKED;\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {ChainData} chainData\n     * @returns {Promise}\n     * @private\n     */\n    async _rebranch(blockHash, chainData) {\n        Log.v(NanoChain, `Rebranching to fork ${blockHash}, height=${chainData.head.height}, totalDifficulty=${chainData.totalDifficulty}, totalWork=${chainData.totalWork}`);\n\n        // Find the common ancestor between our current main chain and the fork chain.\n        // Walk up the fork chain until we find a block that is part of the main chain.\n        // Store the chain along the way.\n        const forkChain = [];\n        const forkHashes = [];\n\n        let curData = chainData;\n        let curHash = blockHash;\n        while (!curData.onMainChain) {\n            forkChain.push(curData);\n            forkHashes.push(curHash);\n\n            curHash = curData.head.prevHash;\n            curData = await this._store.getChainData(curHash); // eslint-disable-line no-await-in-loop\n            Assert.that(!!curData, 'Failed to find fork predecessor while rebranching');\n        }\n\n        Log.v(NanoChain, () => `Found common ancestor ${curHash.toBase64()} ${forkChain.length} blocks up`);\n\n        /** @type {ChainData} */\n        const ancestorData = curData;\n        /** @type {Hash} */\n        const ancestorHash = curHash;\n\n        /** @type {ChainDataStore} */\n        const chainTx = this._store.synchronousTransaction(false);\n        /** @type {Array.<ChainData>} */\n        const revertChain = [];\n        /** @type {Hash} */\n        let headHash = this._headHash;\n        /** @type {ChainData} */\n        let headData = this._mainChain;\n\n        // Unset onMainChain flag / mainChainSuccessor on the current main chain up to (excluding) the common ancestor.\n        while (!headHash.equals(ancestorHash)) {\n            headData.onMainChain = false;\n            headData.mainChainSuccessor = null;\n            chainTx.putChainDataSync(headHash, headData);\n            revertChain.push(headData);\n\n            headHash = headData.head.prevHash;\n            headData = await this._store.getChainData(headHash);\n            Assert.that(!!headData, 'Failed to find main chain predecessor while rebranching');\n        }\n\n        // Update the mainChainSuccessor of the common ancestor block.\n        ancestorData.mainChainSuccessor = forkHashes[forkHashes.length - 1];\n        chainTx.putChainDataSync(ancestorHash, ancestorData);\n\n        // Set onMainChain flag / mainChainSuccessor on the fork.\n        for (let i = forkChain.length - 1; i >= 0; i--) {\n            const forkData = forkChain[i];\n            forkData.onMainChain = true;\n            forkData.mainChainSuccessor = i > 0 ? forkHashes[i - 1] : null;\n            chainTx.putChainDataSync(forkHashes[i], forkData);\n        }\n\n        await chainTx.commit();\n\n        // Reset chain proof. We don't recompute the chain proof here, but do it lazily the next time it is needed.\n        // TODO modify chain proof directly, don't recompute.\n        this._proof = null;\n\n        // Fire block-reverted event for each block reverted during rebranch\n        for (const revertedData of revertChain) {\n            this.fire('block-reverted', revertedData.head);\n        }\n\n        // Fire head-changed event for each fork block.\n        for (let i = forkChain.length - 1; i >= 0; i--) {\n            this._mainChain = forkChain[i];\n            this._headHash = forkHashes[i];\n            this.fire('head-changed', this.head, /*rebranching*/ i > 0);\n        }\n    }\n\n    /**\n     * @returns {Promise.<ChainProof>}\n     * @override\n     */\n    getChainProof() {\n        return this._synchronizer.push(/*priority*/ 1, async () => {\n            if (!this._proof) {\n                this._proof = await this._getChainProof();\n            }\n            return this._proof;\n        });\n    }\n\n    /** @type {Block} */\n    get head() {\n        return this._mainChain.head;\n    }\n\n    /** @type {Hash} */\n    get headHash() {\n        return this._headHash;\n    }\n\n    /** @type {number} */\n    get height() {\n        return this._mainChain.head.height;\n    }\n}\nNanoChain.ERR_ORPHAN = -2;\nNanoChain.ERR_INVALID = -1;\nNanoChain.OK_KNOWN = 0;\nNanoChain.OK_EXTENDED = 1;\nNanoChain.OK_REBRANCHED = 2;\nNanoChain.OK_FORKED = 3;\nClass.register(NanoChain);\n","class NanoConsensusAgent extends BaseConsensusAgent {\n    /**\n     * @param {NanoChain} blockchain\n     * @param {NanoMempool} mempool\n     * @param {Time} time\n     * @param {Peer} peer\n     * @param {InvRequestManager} invRequestManager\n     * @param {Subscription} targetSubscription\n     */\n    constructor(blockchain, mempool, time, peer, invRequestManager, targetSubscription) {\n        super(time, peer, invRequestManager, targetSubscription);\n        /** @type {NanoChain} */\n        this._blockchain = blockchain;\n        /** @type {NanoMempool} */\n        this._mempool = mempool;\n\n        // Flag indicating that we are currently syncing our blockchain with the peer's.\n        /** @type {boolean} */\n        this._syncing = false;\n\n        /** @type {Array.<BlockHeader>} */\n        this._orphanedBlocks = [];\n\n        // Helper object to keep track of the accounts we're requesting from the peer.\n        this._accountsRequest = null;\n\n        // Flag to track chain proof requests.\n        this._requestedChainProof = false;\n\n        // Listen to consensus messages from the peer.\n        peer.channel.on('chain-proof', msg => this._onChainProof(msg));\n        peer.channel.on('accounts-proof', msg => this._onAccountsProof(msg));\n\n        peer.channel.on('get-chain-proof', msg => this._onGetChainProof(msg));\n\n        // Subscribe to all announcements from the peer.\n        this._subscribeTarget();\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     */\n    async syncBlockchain() {\n        this._syncing = true;\n\n        const headBlock = await this._blockchain.getBlock(this._peer.headHash);\n        if (!headBlock) {\n            this._requestChainProof();\n            this.fire('sync-chain-proof', this._peer.peerAddress);\n        } else {\n            this._syncFinished();\n        }\n    }\n\n    requestMempool() {\n        // Request the peer's mempool.\n        // XXX Use a random delay here to prevent requests to multiple peers at once.\n        const delay = NanoConsensusAgent.MEMPOOL_DELAY_MIN\n            + Math.random() * (NanoConsensusAgent.MEMPOOL_DELAY_MAX - NanoConsensusAgent.MEMPOOL_DELAY_MIN);\n        setTimeout(() => this._peer.channel.mempool(), delay);\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _syncFinished() {\n        this._syncing = false;\n        this._synced = true;\n\n        this.requestMempool();\n\n        this.fire('sync');\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _requestChainProof() {\n        // Only one chain proof request at a time.\n        if (this._requestedChainProof) {\n            return;\n        }\n\n        // Request ChainProof from peer.\n        this._peer.channel.getChainProof();\n        this._requestedChainProof = true;\n\n        // Drop the peer if it doesn't send the chain proof within the timeout.\n        this._peer.channel.expectMessage(Message.Type.CHAIN_PROOF, () => {\n            this._peer.channel.close(CloseType.GET_CHAIN_PROOF_TIMEOUT, 'getChainProof timeout');\n        }, NanoConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT, NanoConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT);\n    }\n\n    /**\n     * @param {ChainProofMessage} msg\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _onChainProof(msg) {\n        Log.d(NanoConsensusAgent, `[CHAIN-PROOF] Received from ${this._peer.peerAddress}: ${msg.proof}`);\n\n        // Check if we have requested a chain proof, reject unsolicited ones.\n        // FIXME\n        if (!this._requestedChainProof) {\n            Log.w(NanoConsensusAgent, `Unsolicited chain proof received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n        this._requestedChainProof = false;\n\n        if (this._syncing) {\n            this.fire('verify-chain-proof', this._peer.peerAddress);\n        }\n\n        // Push the proof into the NanoChain.\n        if (!(await this._blockchain.pushProof(msg.proof))) {\n            Log.w(NanoConsensusAgent, `Invalid chain proof received from ${this._peer.peerAddress} - verification failed`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.INVALID_CHAIN_PROOF, 'invalid chain proof');\n            return;\n        }\n\n        // TODO add all blocks from the chain proof to knownObjects.\n\n        // Apply any orphaned blocks we received while waiting for the chain proof.\n        await this._applyOrphanedBlocks();\n\n        if (this._syncing) {\n            this._syncFinished();\n        }\n    }\n\n    /**\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _applyOrphanedBlocks() {\n        for (const header of this._orphanedBlocks) {\n            const status = await this._blockchain.pushHeader(header);\n            if (status === NanoChain.ERR_INVALID) {\n                this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK, 'received invalid block');\n                break;\n            }\n        }\n        this._orphanedBlocks = [];\n    }\n\n    /**\n     * @param {Array.<InvVector>} vectors\n     * @returns {void}\n     * @protected\n     * @override\n     */\n    _doRequestData(vectors) {\n        /** @type {Array.<InvVector>} */\n        const blocks = [];\n        /** @type {Array.<InvVector>} */\n        const transactions = [];\n        for (const vector of vectors) {\n            if (vector.type === InvVector.Type.BLOCK) {\n                blocks.push(vector);\n            } else {\n                transactions.push(vector);\n            }\n        }\n\n        // Request headers and transactions from peer.\n        this._peer.channel.getHeader(blocks);\n        this._peer.channel.getData(transactions);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {boolean} [includeForks]\n     * @returns {Promise.<?Block>}\n     * @protected\n     * @override\n     */\n    _getBlock(hash, includeForks = false) {\n        return this._blockchain.getBlock(hash, includeForks);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Promise.<?Transaction>}\n     * @protected\n     * @override\n     */\n    _getTransaction(hash) {\n        return Promise.resolve(this._mempool.getTransaction(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {BlockHeader} header\n     * @returns {Promise.<void>}\n     * @protected\n     * @override\n     */\n    async _processHeader(hash, header) {\n        // TODO send reject message if we don't like the block\n        const status = await this._blockchain.pushHeader(header);\n        if (status === NanoChain.ERR_INVALID) {\n            this._peer.channel.close(CloseType.RECEIVED_INVALID_HEADER, 'received invalid header');\n        }\n        // Re-sync with this peer if it starts sending orphan blocks after the initial sync.\n        else if (status === NanoChain.ERR_ORPHAN) {\n            this._orphanedBlocks.push(header);\n            if (this._synced) {\n                this._requestChainProof();\n            }\n        }\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {Transaction} transaction\n     * @returns {Promise.<void>}\n     * @protected\n     * @override\n     */\n    _processTransaction(hash, transaction) {\n        return this._mempool.pushTransaction(transaction);\n    }\n\n    /**\n     * @param {GetChainProofMessage} msg\n     * @private\n     */\n    async _onGetChainProof(msg) {\n        const proof = await this._blockchain.getChainProof();\n        if (proof) {\n            this._peer.channel.chainProof(proof);\n        }\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<Array.<Account>>}\n     */\n    getAccounts(blockHash, addresses) {\n        return this._synchronizer.push('getAccounts',\n            this._getAccounts.bind(this, blockHash, addresses));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     * @returns {Promise.<Array<Account>>}\n     * @private\n     */\n    _getAccounts(blockHash, addresses) {\n        Assert.that(this._accountsRequest === null);\n\n        Log.d(NanoConsensusAgent, `Requesting AccountsProof for ${addresses} from ${this._peer.peerAddress}`);\n\n        return new Promise((resolve, reject) => {\n            this._accountsRequest = {\n                addresses: addresses,\n                blockHash: blockHash,\n                resolve: resolve,\n                reject: reject\n            };\n\n            // Request AccountsProof from peer.\n            this._peer.channel.getAccountsProof(blockHash, addresses);\n\n            // Drop the peer if it doesn't send the accounts proof within the timeout.\n            this._peer.channel.expectMessage(Message.Type.ACCOUNTS_PROOF, () => {\n                this._peer.channel.close(CloseType.GET_ACCOUNTS_PROOF_TIMEOUT, 'getAccountsProof timeout');\n                reject(new Error('timeout')); // TODO error handling\n            }, NanoConsensusAgent.ACCOUNTSPROOF_REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * @param {AccountsProofMessage} msg\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _onAccountsProof(msg) {\n        Log.d(NanoConsensusAgent, `[ACCOUNTS-PROOF] Received from ${this._peer.peerAddress}: blockHash=${msg.blockHash}, proof=${msg.proof} (${msg.serializedSize} bytes)`);\n\n        // Check if we have requested an accounts proof, reject unsolicited ones.\n        if (!this._accountsRequest) {\n            Log.w(NanoConsensusAgent, `Unsolicited accounts proof received from ${this._peer.peerAddress}`);\n            // TODO close/ban?\n            return;\n        }\n\n        const addresses = this._accountsRequest.addresses;\n        const blockHash = this._accountsRequest.blockHash;\n        const resolve = this._accountsRequest.resolve;\n        const reject = this._accountsRequest.reject;\n\n        // Reset accountsRequest.\n        this._accountsRequest = null;\n\n        if (!msg.hasProof()) {\n            reject(new Error('Accounts request was rejected'));\n            return;\n        }\n\n        // Check that the reference block corresponds to the one we requested.\n        if (!blockHash.equals(msg.blockHash)) {\n            Log.w(NanoConsensusAgent, `Received AccountsProof for invalid reference block from ${this._peer.peerAddress}`);\n            reject(new Error('Invalid reference block'));\n            return;\n        }\n\n        // Verify the proof.\n        const proof = msg.proof;\n        if (!proof.verify()) {\n            Log.w(NanoConsensusAgent, `Invalid AccountsProof received from ${this._peer.peerAddress}`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.INVALID_ACCOUNTS_PROOF, 'Invalid AccountsProof');\n            reject(new Error('Invalid AccountsProof'));\n            return;\n        }\n\n        // Check that the proof root hash matches the accountsHash in the reference block.\n        const rootHash = proof.root();\n        const block = await this._blockchain.getBlock(blockHash);\n        if (!block.accountsHash.equals(rootHash)) {\n            Log.w(NanoConsensusAgent, `Invalid AccountsProof (root hash) received from ${this._peer.peerAddress}`);\n            // TODO ban instead?\n            this._peer.channel.close(CloseType.ACCOUNTS_PROOF_ROOT_HASH_MISMATCH, 'AccountsProof root hash mismatch');\n            reject(new Error('AccountsProof root hash mismatch'));\n            return;\n        }\n\n        // Check that all requested accounts are part of this proof.\n        // XXX return a map address -> account instead?\n        const accounts = [];\n        for (const address of addresses) {\n            try {\n                const account = proof.getAccount(address);\n                accounts.push(account);\n            } catch (e) {\n                Log.w(NanoConsensusAgent, `Incomplete AccountsProof received from ${this._peer.peerAddress}`);\n                // TODO ban instead?\n                this._peer.channel.close(CloseType.INCOMPLETE_ACCOUNTS_PROOF, 'Incomplete AccountsProof');\n                reject(new Error('Incomplete AccountsProof'));\n                return;\n            }\n        }\n\n        // Return the retrieved accounts.\n        resolve(accounts);\n    }\n\n    /**\n     * @returns {void}\n     * @protected\n     * @override\n     */\n    _onClose() {\n        // Clear the synchronizer queue.\n        this._synchronizer.clear();\n        super._onClose();\n    }\n\n    /** @type {boolean} */\n    get syncing() {\n        return this._syncing;\n    }\n}\n/**\n * Maximum time (ms) to wait for chain-proof after sending out get-chain-proof before dropping the peer.\n * @type {number}\n */\nNanoConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT = 1000 * 45;\n/**\n * Maximum time (ms) to wait for between chain-proof chunks before dropping the peer.\n * @type {number}\n */\nNanoConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT = 1000 * 10;\n/**\n * Maximum time (ms) to wait for accounts-proof after sending out get-accounts-proof before dropping the peer.\n * @type {number}\n */\nNanoConsensusAgent.ACCOUNTSPROOF_REQUEST_TIMEOUT = 1000 * 5;\n/**\n * Minimum time {ms} to wait before triggering the initial mempool request.\n * @type {number}\n */\nNanoConsensusAgent.MEMPOOL_DELAY_MIN = 1000 * 2; // 2 seconds\n/**\n * Maximum time {ms} to wait before triggering the initial mempool request.\n * @type {number}\n */\nNanoConsensusAgent.MEMPOOL_DELAY_MAX = 1000 * 20; // 20 seconds\nClass.register(NanoConsensusAgent);\n","class NanoConsensus extends BaseConsensus {\n    /**\n     * @param {NanoChain} blockchain\n     * @param {NanoMempool} mempool\n     * @param {Network} network\n     */\n    constructor(blockchain, mempool, network) {\n        super(blockchain, mempool, network);\n        /** @type {NanoChain} */\n        this._blockchain = blockchain;\n        /** @type {NanoMempool} */\n        this._mempool = mempool;\n\n        /** @type {Subscription} */\n        this._subscription = Subscription.BLOCKS_ONLY;\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     */\n    subscribeAccounts(addresses) {\n        this.subscribe(Subscription.fromAddresses(addresses));\n        this._mempool.evictExceptAddresses(addresses);\n        for (const /** @type {NanoConsensusAgent} */ agent of this._agents.valueIterator()) {\n            agent.requestMempool();\n        }\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {BaseConsensusAgent}\n     * @override\n     */\n    _newConsensusAgent(peer) {\n        return new NanoConsensusAgent(this._blockchain, this._mempool, this._network.time, peer, this._invRequestManager, this._subscription);\n    }\n\n    /**\n     * @param {Peer} peer\n     * @override\n     */\n    _onPeerJoined(peer) {\n        const agent = super._onPeerJoined(peer);\n\n        // Forward sync events.\n        this.bubble(agent, 'sync-chain-proof', 'verify-chain-proof');\n\n        return agent;\n    }\n\n    /**\n     * @param {Block} head\n     * @override\n     */\n    async _onHeadChanged(head) {\n        if (!this._established) return;\n\n        // Update mempool.\n        try {\n            const includedTransactions = await this._requestTransactionsProof(this._subscription.addresses, head);\n            this._mempool.changeHead(head, includedTransactions);\n        } catch (e) {\n            Log.e(NanoConsensus, `Failed to retrieve transaction proof to update mempool: ${e.message || e}`);\n        }\n\n        // Relay block *after* requesting the TransactionsProof. Otherwise, we might\n        // send the request to a peer (first) that has not adopted the new block yet.\n        super._onHeadChanged(head);\n    }\n\n    /**\n     * @param {Transaction} tx\n     * @protected\n     */\n    _onTransactionAdded(tx) {\n        // Don't relay transactions added to the mempool.\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Hash} [blockHash]\n     * @returns {Promise.<Account>}\n     */\n    async getAccount(address, blockHash = null) {\n        return (await this.getAccounts([address], blockHash))[0];\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     * @param {Hash} [blockHash]\n     * @returns {Promise.<Array<Account>>}\n     */\n    async getAccounts(addresses, blockHash) {\n        blockHash = blockHash ? blockHash : this._blockchain.headHash;\n        const agents = this._agents.values().filter(agent =>\n            agent.synced\n            && agent.knowsBlock(blockHash)\n            && !Services.isNanoNode(agent.peer.peerAddress.services)\n        );\n\n        for (const /** @type {NanoConsensusAgent} */ agent of agents) {\n            try {\n                return await agent.getAccounts(blockHash, addresses); // eslint-disable-line no-await-in-loop\n            } catch (e) {\n                Log.w(NanoConsensus, `Failed to retrieve accounts ${addresses} from ${agent.peer.peerAddress}: ${e}`);\n                // Try the next peer.\n            }\n        }\n\n        // No peer supplied the requested account, fail.\n        throw new Error(`Failed to retrieve accounts ${addresses}`);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {Promise.<void>}\n     */\n    async relayTransaction(transaction) {\n        // Fail if we are not connected to at least one full/light node.\n        if (!this._agents.values().some(agent => !Services.isNanoNode(agent.peer.peerAddress.services))) {\n            throw new Error('Failed to relay transaction - only nano nodes connected');\n        }\n\n        // Store transaction in mempool.\n        if (!(await this._mempool.pushTransaction(transaction))) {\n            throw new Error('Failed to relay transaction - mempool rejected transaction');\n        }\n\n        // Relay transaction to all connected peers.\n        let relayed = false;\n        for (const agent of this._agents.values()) {\n            relayed = agent.relayTransaction(transaction) || relayed;\n        }\n\n        // Fail if the transaction was not relayed.\n        if (!relayed) {\n            throw new Error('Failed to relay transaction - no agent relayed transaction');\n        }\n    }\n\n    /** @type {NanoChain} */\n    get blockchain() {\n        return this._blockchain;\n    }\n\n    /** @type {NanoMempool} */\n    get mempool() {\n        return this._mempool;\n    }\n}\nClass.register(NanoConsensus);\n","class NanoMempool extends Observable {\n    /**\n     * @param {IBlockchain} blockchain\n     */\n    constructor(blockchain) {\n        super();\n\n        /** @type {IBlockchain} */\n        this._blockchain = blockchain;\n\n        // Our pool of transactions.\n        /** @type {HashMap.<Hash, Transaction>} */\n        this._transactionsByHash = new HashMap();\n        /** @type {HashMap.<Address, MempoolTransactionSet>} */\n        this._transactionSetByAddress = new HashMap();\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @fires Mempool#transaction-added\n     * @returns {Promise.<boolean>}\n     */\n    async pushTransaction(transaction) {\n        // Check if we already know this transaction.\n        const hash = transaction.hash();\n        if (this._transactionsByHash.contains(hash)) {\n            Log.v(Mempool, () => `Ignoring known transaction ${hash.toBase64()}`);\n            return false;\n        }\n\n        // Check validity based on startHeight.\n        if (this._blockchain.height >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n            Log.v(Mempool, () => `Ignoring expired transaction ${hash.toBase64()}`);\n            return false;\n        }\n\n        // Verify transaction.\n        if (!transaction.verify()) {\n            return false;\n        }\n\n        // Transaction is valid, add it to the mempool.\n        this._transactionsByHash.put(hash, transaction);\n        const set = this._transactionSetByAddress.get(transaction.sender) || new MempoolTransactionSet();\n        set.add(transaction);\n        this._transactionSetByAddress.put(transaction.sender, set);\n\n        // Tell listeners about the new transaction we received.\n        this.fire('transaction-added', transaction);\n\n        return true;\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Transaction}\n     */\n    getTransaction(hash) {\n        return this._transactionsByHash.get(hash);\n    }\n\n    /**\n     * @param {number} maxCount\n     * @returns {Array.<Transaction>}\n     */\n    getTransactions(maxCount = 5000) {\n        return this._transactionsByHash.values().sort((a, b) => a.compare(b)).slice(0, maxCount);\n    }\n\n    /**\n     * @param {Address} address\n     * @return {Array.<Transaction>}\n     */\n    getPendingTransactions(address) {\n        const set = this._transactionSetByAddress.get(address);\n        return set ? set.transactions : [];\n    }\n\n    /**\n     * @param {Block} block\n     * @param {Array.<Transaction>} transactions\n     */\n    changeHead(block, transactions) {\n        this._evictTransactions(block.header, transactions);\n    }\n\n    /**\n     * @param {Array.<Address>} addresses\n     */\n    evictExceptAddresses(addresses) {\n        const addressSet = new HashSet();\n        addressSet.addAll(addresses);\n        for (const /** @type {Transaction} */ tx of this._transactionsByHash.values()) {\n            if (!addressSet.contains(tx.sender) && !addressSet.contains(tx.recipient)) {\n                this._transactionsByHash.remove(tx.hash());\n\n                /** @type {MempoolTransactionSet} */\n                const set = this._transactionSetByAddress.get(tx.sender);\n                set.remove(tx);\n\n                if (set.length === 0) {\n                    this._transactionSetByAddress.remove(tx.sender);\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {BlockHeader} blockHeader\n     * @param {Array.<Transaction>} transactions\n     * @private\n     */\n    _evictTransactions(blockHeader, transactions) {\n        // Remove expired transactions.\n        for (const /** @type {Transaction} */ tx of this._transactionsByHash.values()) {\n            const txHash = tx.hash();\n            if (blockHeader.height >= tx.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                this._transactionsByHash.remove(txHash);\n\n                /** @type {MempoolTransactionSet} */\n                const set = this._transactionSetByAddress.get(tx.sender);\n                set.remove(tx);\n\n                if (set.length === 0) {\n                    this._transactionSetByAddress.remove(tx.sender);\n                }\n\n                this.fire('transaction-expired', tx);\n            }\n        }\n\n        // Remove mined transactions.\n        for (const /** @type {Transaction} */ tx of transactions) {\n            const txHash = tx.hash();\n            if (this._transactionsByHash.contains(txHash)) {\n                this._transactionsByHash.remove(txHash);\n\n                /** @type {MempoolTransactionSet} */\n                const set = this._transactionSetByAddress.get(tx.sender);\n                set.remove(tx);\n\n                if (set.length === 0) {\n                    this._transactionSetByAddress.remove(tx.sender);\n                }\n\n                this.fire('transaction-mined', tx, blockHeader);\n            }\n        }\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._transactionsByHash.length;\n    }\n}\nClass.register(NanoMempool);\n","class ConsensusDB extends JDB.JungleDB {\n    /**\n     * @param {string} [dbPrefix]\n     * @returns {Promise.<ConsensusDB>}\n     */\n    static async getFull(dbPrefix = '') {\n        if (!ConsensusDB._instance) {\n            ConsensusDB._instance = await new ConsensusDB(`${dbPrefix}full-consensus`);\n        }\n        return ConsensusDB._instance;\n    }\n\n    /**\n     * @param {string} dbPrefix\n     * @returns {Promise.<ConsensusDB>}\n     */\n    static async getLight(dbPrefix = '') {\n        if (!ConsensusDB._instance) {\n            ConsensusDB._instance = await new ConsensusDB(`${dbPrefix}light-consensus`);\n        }\n        return ConsensusDB._instance;\n    }\n\n    /**\n     * @param {string} dbName\n     * @returns {Promise.<ConsensusDB>}\n     */\n    constructor(dbName) {\n        // Start with 500MB and resize at least 1GB at a time.\n        super(dbName, ConsensusDB.VERSION, {\n            maxDbSize: ConsensusDB.INITIAL_DB_SIZE,\n            autoResize: true,\n            minResize: ConsensusDB.MIN_RESIZE\n        });\n        return this._init();\n    }\n\n    /**\n     * @returns {Promise.<ConsensusDB>}\n     * @private\n     */\n    async _init() {\n        // Initialize object stores.\n        AccountsTreeStore.initPersistent(this);\n        ChainDataStore.initPersistent(this);\n        TransactionStore.initPersistent(this);\n\n        // Establish connection to database.\n        await this.connect();\n\n        return this;\n    }\n}\nConsensusDB._instance = null;\nConsensusDB.VERSION = 4;\nConsensusDB.INITIAL_DB_SIZE = 1024*1024*500; // 500 MB initially\nConsensusDB.MIN_RESIZE = 1 << 30; // 1 GB\nClass.register(ConsensusDB);\n","class Consensus {\n    /**\n     * @param {NetworkConfig} [netconfig]\n     * @return {Promise.<FullConsensus>}\n     */\n    static async full(netconfig = NetworkConfig.getDefault()) {\n        netconfig.services = new Services(Services.FULL, Services.FULL);\n        await netconfig.initPersistent();\n\n        /** @type {Time} */\n        const time = new Time();\n        /** @type {ConsensusDB} */\n        const db = await ConsensusDB.getFull(`${GenesisConfig.NETWORK_NAME}-`);\n        /** @type {Accounts} */\n        const accounts = await Accounts.getPersistent(db);\n        /** @type {TransactionStore} */\n        const transactionStore = await TransactionStore.getPersistent(db);\n        /** @type {FullChain} */\n        const blockchain = await FullChain.getPersistent(db, accounts, time, transactionStore);\n        /** @type {Mempool} */\n        const mempool = new Mempool(blockchain, accounts);\n        /** @type {Network} */\n        const network = new Network(blockchain, netconfig, time);\n\n        return new FullConsensus(blockchain, mempool, network);\n    }\n\n    /**\n     * @param {NetworkConfig} [netconfig]\n     * @return {Promise.<LightConsensus>}\n     */\n    static async light(netconfig = NetworkConfig.getDefault()) {\n        netconfig.services = new Services(Services.LIGHT, Services.LIGHT | Services.FULL);\n        await netconfig.initPersistent();\n\n        /** @type {Time} */\n        const time = new Time();\n        /** @type {ConsensusDB} */\n        const db = await ConsensusDB.getLight(`${GenesisConfig.NETWORK_NAME}-`);\n        /** @type {Accounts} */\n        const accounts = await Accounts.getPersistent(db);\n        /** @type {LightChain} */\n        const blockchain = await LightChain.getPersistent(db, accounts, time);\n        /** @type {Mempool} */\n        const mempool = new Mempool(blockchain, accounts);\n        /** @type {Network} */\n        const network = new Network(blockchain, netconfig, time);\n\n        return new LightConsensus(blockchain, mempool, network);\n    }\n\n    /**\n     * @param {NetworkConfig} [netconfig]\n     * @return {Promise.<NanoConsensus>}\n     */\n    static async nano(netconfig = NetworkConfig.getDefault()) {\n        netconfig.services = new Services(Services.NANO, Services.NANO | Services.LIGHT | Services.FULL);\n        await netconfig.initPersistent();\n\n        /** @type {Time} */\n        const time = new Time();\n        /** @type {NanoChain} */\n        const blockchain = await new NanoChain(time);\n        /** @type {NanoMempool} */\n        const mempool = new NanoMempool(blockchain);\n        /** @type {Network} */\n        const network = new Network(blockchain, netconfig, time);\n\n        return new NanoConsensus(blockchain, mempool, network);\n    }\n\n    /**\n     * @param {NetworkConfig} [netconfig]\n     * @return {Promise.<FullConsensus>}\n     */\n    static async volatileFull(netconfig = NetworkConfig.getDefault()) {\n        netconfig.services = new Services(Services.FULL, Services.FULL);\n        await netconfig.initVolatile();\n\n        /** @type {Time} */\n        const time = new Time();\n        /** @type {Accounts} */\n        const accounts = await Accounts.createVolatile();\n        /** @type {TransactionStore} */\n        const transactionStore = await TransactionStore.createVolatile();\n        /** @type {FullChain} */\n        const blockchain = await FullChain.createVolatile(accounts, time, transactionStore);\n        /** @type {Mempool} */\n        const mempool = new Mempool(blockchain, accounts);\n        /** @type {Network} */\n        const network = new Network(blockchain, netconfig, time);\n\n        return new FullConsensus(blockchain, mempool, network);\n    }\n\n    /**\n     * @param {NetworkConfig} [netconfig]\n     * @return {Promise.<LightConsensus>}\n     */\n    static async volatileLight(netconfig = NetworkConfig.getDefault()) {\n        netconfig.services = new Services(Services.LIGHT, Services.LIGHT | Services.FULL);\n        await netconfig.initVolatile();\n\n        /** @type {Time} */\n        const time = new Time();\n        /** @type {Accounts} */\n        const accounts = await Accounts.createVolatile();\n        /** @type {LightChain} */\n        const blockchain = await LightChain.createVolatile(accounts, time);\n        /** @type {Mempool} */\n        const mempool = new Mempool(blockchain, accounts);\n        /** @type {Network} */\n        const network = new Network(blockchain, netconfig, time);\n\n        return new LightConsensus(blockchain, mempool, network);\n    }\n\n    /**\n     * @param {NetworkConfig} [netconfig]\n     * @return {Promise.<NanoConsensus>}\n     */\n    static async volatileNano(netconfig = NetworkConfig.getDefault()) {\n        netconfig.services = new Services(Services.NANO, Services.NANO | Services.LIGHT | Services.FULL);\n        await netconfig.initVolatile();\n\n        /** @type {Time} */\n        const time = new Time();\n        /** @type {NanoChain} */\n        const blockchain = await new NanoChain(time);\n        /** @type {NanoMempool} */\n        const mempool = new NanoMempool(blockchain);\n        /** @type {Network} */\n        const network = new Network(blockchain, netconfig, time);\n\n        return new NanoConsensus(blockchain, mempool, network);\n    }\n}\n\nClass.register(Consensus);\n","class Protocol {\n}\nProtocol.DUMB = 0;\nProtocol.WS = 1;\nProtocol.RTC = 2;\nClass.register(Protocol);\n","class Message {\n    /**\n     * Create a new Message instance. This is usually not called directly but by subclasses.\n     * @param {Message.Type} type Message type\n     */\n    constructor(type) {\n        if (!NumberUtils.isUint64(type)) throw new Error('Malformed type');\n        /** @type {Message.Type} */\n        this._type = type;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Message.Type}\n     */\n    static peekType(buf) {\n        // Store current read position.\n        const pos = buf.readPos;\n\n        // Set read position past the magic to the beginning of the type string.\n        buf.readPos = 4;\n\n        // Read the type.\n        const type = buf.readVarUint();\n\n        // Reset the read position to original.\n        buf.readPos = pos;\n\n        return /** @type {Message.Type} */ type;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {number}\n     */\n    static peekLength(buf) {\n        // Store current read position.\n        const pos = buf.readPos;\n\n        // Set read position past the magic to the beginning of the type string.\n        buf.readPos = 4;\n\n        // Read the type and ignore it.\n        buf.readVarUint();\n        // Read the length.\n        const length = buf.readUint32();\n\n        // Reset the read position to original.\n        buf.readPos = pos;\n\n        return length;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Message}\n     */\n    static unserialize(buf) {\n        // XXX Direct buffer manipulation currently requires this.\n        Assert.that(buf.readPos === 0, 'Message.unserialize() requires buf.readPos == 0');\n\n        const magic = buf.readUint32();\n        const type = buf.readVarUint();\n        buf.readUint32(); // length is ignored\n        const checksum = buf.readUint32();\n\n        // Validate magic.\n        if (magic !== Message.MAGIC) throw 'Malformed magic';\n\n        // Validate checksum.\n        Message._writeChecksum(type, buf, 0);\n        const calculatedChecksum = CRC32.compute(buf);\n        if (checksum !== calculatedChecksum) throw new Error('Invalid checksum');\n\n        return new Message(type);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        // XXX Direct buffer manipulation currently requires this.\n        Assert.that(buf.writePos === 0, 'Message.serialize() requires buf.writePos == 0');\n\n        buf.writeUint32(Message.MAGIC);\n        buf.writeVarUint(this._type);\n        buf.writeUint32(this.serializedSize);\n        buf.writeUint32(0); // written later by _setChecksum()\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*magic*/ 4\n            + /*type*/ SerialBuffer.varUintSize(this._type)\n            + /*length*/ 4\n            + /*checksum*/ 4;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {void}\n     * @protected\n     */\n    _setChecksum(buf) {\n        const checksum = CRC32.compute(buf);\n        Message._writeChecksum(this._type, buf, checksum);\n    }\n\n    /**\n     * @param {Message.Type} type\n     * @param {SerialBuffer} buf\n     * @param {number} value\n     * @returns {void}\n     * @private\n     */\n    static _writeChecksum(type, buf, value) {\n        // Store current write position.\n        const pos = buf.writePos;\n\n        // Set write position past the magic, type, and length fields to the\n        // beginning of the checksum value.\n        buf.writePos = /*magic*/ 4\n            + /*type*/ SerialBuffer.varUintSize(type)\n            + /*length*/ 4;\n\n        // Write the checksum value.\n        buf.writeUint32(value);\n\n        // Reset the write position to original.\n        buf.writePos = pos;\n    }\n\n    /** @type {Message.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /** @returns {string} */\n    toString() {\n        return `Message{type=${this.type}, size=${this.serializedSize}}`;\n    }\n}\nMessage.MAGIC = 0x42042042;\n/**\n * Enum for message types.\n * @enum {number}\n */\nMessage.Type = {\n    VERSION:    0,\n    INV:        1,\n    GET_DATA:   2,\n    GET_HEADER: 3,\n    NOT_FOUND:  4,\n    GET_BLOCKS: 5,\n    BLOCK:      6,\n    HEADER:     7,\n    TX:         8,\n    MEMPOOL:    9,\n    REJECT:     10,\n    SUBSCRIBE:  11,\n\n    ADDR:       20,\n    GET_ADDR:   21,\n    PING:       22,\n    PONG:       23,\n\n    SIGNAL:     30,\n\n    GET_CHAIN_PROOF:            40,\n    CHAIN_PROOF:                41,\n    GET_ACCOUNTS_PROOF:         42,\n    ACCOUNTS_PROOF:             43,\n    GET_ACCOUNTS_TREE_CHUNK:    44,\n    ACCOUNTS_TREE_CHUNK:        45,\n    GET_TRANSACTIONS_PROOF:     47,\n    TRANSACTIONS_PROOF:         48,\n    GET_TRANSACTION_RECEIPTS:   49,\n    TRANSACTION_RECEIPTS:       50,\n    GET_BLOCK_PROOF:            51,\n    BLOCK_PROOF:                52,\n\n    GET_HEAD:   60,\n    HEAD:       61,\n\n    VERACK:   90\n};\nClass.register(Message);\n","class AddrMessage extends Message {\n    /**\n     * @param {Array.<PeerAddress>} addresses\n     */\n    constructor(addresses) {\n        super(Message.Type.ADDR);\n        if (!addresses || !NumberUtils.isUint16(addresses.length)\n            || addresses.some(it => !(it instanceof PeerAddress))) throw 'Malformed addresses';\n        this._addresses = addresses;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {AddrMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const addresses = [];\n        for (let i = 0; i < count; ++i) {\n            addresses.push(PeerAddress.unserialize(buf));\n        }\n        return new AddrMessage(addresses);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._addresses.length);\n        for (const addr of this._addresses) {\n            addr.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let size = super.serializedSize\n            + /*count*/ 2;\n        for (const addr of this._addresses) {\n            size += addr.serializedSize;\n        }\n        return size;\n    }\n\n    /** @type {Array.<PeerAddress>} */\n    get addresses() {\n        return this._addresses;\n    }\n\n    toString() {\n        return `AddrMessage{size=${this._addresses.length}}`;\n    }\n}\nClass.register(AddrMessage);\n","class BlockMessage extends Message {\n    /**\n     * @param {Block} block\n     */\n    constructor(block) {\n        super(Message.Type.BLOCK);\n        // TODO Bitcoin block messages start with a block version\n        /** @type {Block} */\n        this._block = block;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BlockMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const block = Block.unserialize(buf);\n        return new BlockMessage(block);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._block.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._block.serializedSize;\n    }\n\n    /** @type {Block} */\n    get block() {\n        return this._block;\n    }\n\n    toString() {\n        return `BlockMessage{height=${this._block.height}, hash=${this._block.hash()}}`;\n    }\n}\nClass.register(BlockMessage);\n","class RawBlockMessage extends Message {\n    /**\n     * @param {Uint8Array} block\n     */\n    constructor(block) {\n        super(Message.Type.BLOCK);\n        /** @type {Uint8Array} */\n        this._block = block;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.write(this._block);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /*\n        unserialize is not implemented,\n        because this message will serialize\n        to a BlockMessage\n     */\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._block.length;\n    }\n\n    /** @type {Block} */\n    get block() {\n        return Block.unserialize(new SerialBuffer(this._block));\n    }\n}\nClass.register(RawBlockMessage);\n","class GetAddrMessage extends Message {\n    /**\n     * @param {number} protocolMask\n     * @param {number} serviceMask\n     */\n    constructor(protocolMask, serviceMask) {\n        super(Message.Type.GET_ADDR);\n        if (!NumberUtils.isUint8(protocolMask)) throw 'Malformed protocolMask';\n        if (!NumberUtils.isUint32(serviceMask)) throw 'Malformed serviceMask';\n        this._protocolMask = protocolMask;\n        this._serviceMask = serviceMask;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {GetAddrMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const protocolMask = buf.readUint8();\n        const serviceMask = buf.readUint32();\n        return new GetAddrMessage(protocolMask, serviceMask);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint8(this._protocolMask);\n        buf.writeUint32(this._serviceMask);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*protocolMask*/ 1\n            + /*serviceMask*/ 4;\n    }\n\n    /** @type {number} */\n    get protocolMask() {\n        return this._protocolMask;\n    }\n\n    /** @type {number} */\n    get serviceMask() {\n        return this._serviceMask;\n    }\n\n    toString() {\n        return `GetAddrMessage{protocol=${this._protocolMask}, services=${this._serviceMask}}`;\n    }\n}\nClass.register(GetAddrMessage);\n","class GetBlocksMessage extends Message {\n    /**\n     * @param {Array.<Hash>} locators\n     * @param {number} maxInvSize\n     * @param {GetBlocksMessage.Direction} direction\n     */\n    constructor(locators, maxInvSize=BaseInventoryMessage.VECTORS_MAX_COUNT, direction=GetBlocksMessage.Direction.FORWARD) {\n        super(Message.Type.GET_BLOCKS);\n        if (!locators || !NumberUtils.isUint16(locators.length)\n            || locators.some(it => !Hash.isHash(it))) throw 'Malformed locators';\n        if (!NumberUtils.isUint16(maxInvSize)) throw 'Malformed maxInvSize';\n        if (!NumberUtils.isUint8(direction)) throw 'Malformed direction';\n        /** @type {Array.<Hash>} */\n        this._locators = locators;\n        this._maxInvSize = maxInvSize;\n        this._direction = direction;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {GetBlocksMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const locators = [];\n        for (let i = 0; i < count; i++) {\n            locators.push(Hash.unserialize(buf));\n        }\n        const maxInvSize = buf.readUint16();\n        const direction = buf.readUint8();\n        return new GetBlocksMessage(locators, maxInvSize, direction);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._locators.length);\n        for (const locator of this._locators) {\n            locator.serialize(buf);\n        }\n        buf.writeUint16(this._maxInvSize);\n        buf.writeUint8(this._direction);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let size = super.serializedSize\n            + /*count*/ 2\n            + /*direction*/ 1\n            + /*maxInvSize*/ 2;\n        for (const locator of this._locators) {\n            size += locator.serializedSize;\n        }\n        return size;\n    }\n\n    /** @type {Array.<Hash>} */\n    get locators() {\n        return this._locators;\n    }\n\n    /** @type {GetBlocksMessage.Direction} */\n    get direction() {\n        return this._direction;\n    }\n\n    /** @type {number} */\n    get maxInvSize() {\n        return this._maxInvSize;\n    }\n\n    toString() {\n        return `GetBlocksMessage{direction=${this._direction === GetBlocksMessage.Direction.FORWARD ? 'forward' : 'backward'}, maxInvSize=${this._maxInvSize}}`;\n    }\n}\n/**\n * @enum {number}\n */\nGetBlocksMessage.Direction = {\n    FORWARD: 0x1,\n    BACKWARD: 0x2\n};\nClass.register(GetBlocksMessage);\n","class HeaderMessage extends Message {\n    /**\n     * @param {BlockHeader} header\n     */\n    constructor(header) {\n        super(Message.Type.HEADER);\n        /** @type {BlockHeader} */\n        this._header = header;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HeaderMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const header = BlockHeader.unserialize(buf);\n        return new HeaderMessage(header);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._header.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._header.serializedSize;\n    }\n\n    /** @type {BlockHeader} */\n    get header() {\n        return this._header;\n    }\n\n    toString() {\n        return `HeaderMessage{height=${this._header.height}, hash=${this._header.hash()}}`;\n    }\n}\nClass.register(HeaderMessage);\n","class InvVector {\n    /**\n     * @param {Block} block\n     * @returns {InvVector}\n     */\n    static fromBlock(block) {\n        const hash = block.hash();\n        return new InvVector(InvVector.Type.BLOCK, hash);\n    }\n\n    /**\n     * @param {BlockHeader} header\n     * @returns {InvVector}\n     */\n    static fromHeader(header) {\n        const hash = header.hash();\n        return new InvVector(InvVector.Type.BLOCK, hash);\n    }\n\n    /**\n     * @param {Transaction} tx\n     * @returns {InvVector}\n     */\n    static fromTransaction(tx) {\n        const hash = tx.hash();\n        return new InvVector(InvVector.Type.TRANSACTION, hash);\n    }\n\n    /**\n     * @param {InvVector.Type} type\n     * @param {Hash} hash\n     */\n    constructor(type, hash) {\n        // TODO validate type\n        if (!Hash.isHash(hash)) throw 'Malformed hash';\n        /** @type {InvVector.Type} */\n        this._type = type;\n        /** @type {Hash} */\n        this._hash = hash;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {InvVector}\n     */\n    static unserialize(buf) {\n        const type = InvVector.Type.unserialize(buf);\n        const hash = Hash.unserialize(buf);\n        return new InvVector(type, hash);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint32(this._type);\n        this._hash.serialize(buf);\n        return buf;\n    }\n\n    /**\n     * @param {InvVector} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof InvVector\n            && this._type === o.type\n            && this._hash.equals(o.hash);\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return `${this._type}|${this._hash.toBase64()}`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `InvVector{type=${this._type}, hash=${this._hash}}`;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*invType*/ 4\n            + this._hash.serializedSize;\n    }\n\n    /** @type {InvVector.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n}\n/**\n * @enum {number}\n */\nInvVector.Type = {\n    ERROR: 0,\n    TRANSACTION: 1,\n    BLOCK: 2,\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {InvVector.Type}\n     */\n    unserialize: function (buf) {\n        return /** @type {InvVector.Type} */ (buf.readUint32());\n    }\n};\nClass.register(InvVector);\n\nclass BaseInventoryMessage extends Message {\n    /**\n     * @param {Message.Type} type\n     * @param {Array.<InvVector>} vectors\n     */\n    constructor(type, vectors) {\n        super(type);\n        if (!vectors || !NumberUtils.isUint16(vectors.length)\n            || vectors.some(it => !(it instanceof InvVector))\n            || vectors.length > BaseInventoryMessage.VECTORS_MAX_COUNT) throw 'Malformed vectors';\n        /** @type {Array.<InvVector>} */\n        this._vectors = vectors;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._vectors.length);\n        for (const vector of this._vectors) {\n            vector.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let size = super.serializedSize\n            + /*count*/ 2;\n        for (const vector of this._vectors) {\n            size += vector.serializedSize;\n        }\n        return size;\n    }\n\n    /** @type {Array.<InvVector>} */\n    get vectors() {\n        return this._vectors;\n    }\n\n    // noinspection JSCheckFunctionSignatures\n    toString(subtype = 'InventoryMessage') {\n        return `${subtype}{transactions=${this._vectors.filter(vector => vector.type === InvVector.Type.TRANSACTION).length}, blocks=${this._vectors.filter(vector => vector.type === InvVector.Type.BLOCK).length}}`;\n    }\n}\nBaseInventoryMessage.VECTORS_MAX_COUNT = 1000;\nClass.register(BaseInventoryMessage);\n\nclass InvMessage extends BaseInventoryMessage {\n    /**\n     * @param {Array.<InvVector>} vectors\n     */\n    constructor(vectors) {\n        super(Message.Type.INV, vectors);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {InvMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new InvMessage(vectors);\n    }\n\n    toString() {\n        return super.toString('InvMessage');\n    }\n}\nClass.register(InvMessage);\n\nclass GetDataMessage extends BaseInventoryMessage {\n    /**\n     * @param {Array.<InvVector>} vectors\n     */\n    constructor(vectors) {\n        super(Message.Type.GET_DATA, vectors);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetDataMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new GetDataMessage(vectors);\n    }\n\n    toString() {\n        return super.toString('GetDataMessage');\n    }\n}\nClass.register(GetDataMessage);\n\nclass GetHeaderMessage extends BaseInventoryMessage {\n    /**\n     * @param {Array.<InvVector>} vectors\n     */\n    constructor(vectors) {\n        super(Message.Type.GET_HEADER, vectors);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetHeaderMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new GetHeaderMessage(vectors);\n    }\n\n    toString() {\n        return super.toString('GetHeaderMessage');\n    }\n}\nClass.register(GetHeaderMessage);\n\nclass NotFoundMessage extends BaseInventoryMessage {\n    /**\n     * @param {Array.<InvVector>} vectors\n     */\n    constructor(vectors) {\n        super(Message.Type.NOT_FOUND, vectors);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {NotFoundMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new NotFoundMessage(vectors);\n    }\n\n    toString() {\n        return super.toString('NotFoundMessage');\n    }\n}\nClass.register(NotFoundMessage);\n","class MempoolMessage extends Message {\n    constructor() {\n        super(Message.Type.MEMPOOL);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MempoolMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        return new MempoolMessage();\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize;\n    }\n\n    toString() {\n        return 'MempoolMessage{}';\n    }\n}\nClass.register(MempoolMessage);\n","class PingMessage extends Message {\n    /**\n     * @param {number} nonce\n     */\n    constructor(nonce) {\n        super(Message.Type.PING);\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PingMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const nonce = buf.readUint32();\n        return new PingMessage(nonce);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._nonce);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*nonce*/ 4;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    toString() {\n        return `PingMessage{nonce=${this._nonce}}`;\n    }\n}\nClass.register(PingMessage);\n","class PongMessage extends Message {\n    /**\n     * @param {number} nonce\n     */\n    constructor(nonce) {\n        super(Message.Type.PONG);\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PongMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const nonce = buf.readUint32();\n        return new PongMessage(nonce);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._nonce);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*nonce*/ 4;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    toString() {\n        return `PongMessage{nonce=${this._nonce}}`;\n    }\n}\nClass.register(PongMessage);\n","class RejectMessage extends Message {\n    /**\n     * @param {Message.Type} messageType\n     * @param {RejectMessage.Code} code\n     * @param {string} reason\n     * @param {Uint8Array} [extraData]\n     */\n    constructor(messageType, code, reason, extraData=new Uint8Array(0)) {\n        super(Message.Type.REJECT);\n        if (!NumberUtils.isUint64(messageType)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint8(code)) throw new Error('Malformed code');\n        if (StringUtils.isMultibyte(reason) || reason.length > 255) throw new Error('Malformed reason');\n        if (!(extraData instanceof Uint8Array) || !NumberUtils.isUint16(extraData.byteLength)) throw new Error('Malformed extraData');\n\n        /** @type {Message.Type} */\n        this._messageType = messageType;\n        /** @type {RejectMessage.Code} */\n        this._code = code;\n        /** @type {string} */\n        this._reason = reason;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {RejectMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const messageType = /** @type {Message.Type} */ buf.readVarUint();\n        const code = /** @type {RejectMessage.Code} */ buf.readUint8();\n        const reason = buf.readVarLengthString();\n        const length = buf.readUint16();\n        const extraData = buf.read(length);\n        return new RejectMessage(messageType, code, reason, extraData);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeVarUint(this._messageType);\n        buf.writeUint8(this._code);\n        buf.writeVarLengthString(this._reason);\n        buf.writeUint16(this._extraData.byteLength);\n        buf.write(this._extraData);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + SerialBuffer.varUintSize(this._messageType)\n            + /*code*/ 1\n            + SerialBuffer.varLengthStringSize(this._reason)\n            + /*extraDataLength*/ 2\n            + this._extraData.byteLength;\n    }\n\n    /** @type {Message.Type} */\n    get messageType() {\n        return this._messageType;\n    }\n\n    /** @type {RejectMessage.Code} */\n    get code() {\n        return this._code;\n    }\n\n    /** @type {string} */\n    get reason() {\n        return this._reason;\n    }\n\n    /** @type {Uint8Array} */\n    get extraData() {\n        return this._extraData;\n    }\n\n    toString() {\n        return `RejectMessage{type=${this._messageType}, code=${this._code}, reason=${this._reason}}`;\n    }\n}\n/**\n * @enum {number}\n */\nRejectMessage.Code = {\n    REJECT_MALFORMED: 0x01,\n    REJECT_INVALID: 0x10,\n    REJECT_OBSOLETE: 0x11,\n    REJECT_DOUBLE: 0x12,\n    REJECT_DUST: 0x41,\n    REJECT_INSUFFICIENT_FEE: 0x42\n};\nClass.register(RejectMessage);\n","class SignalMessage extends Message {\n    /**\n     * @param {PeerId} senderId\n     * @param {PeerId} recipientId\n     * @param {number} nonce\n     * @param {number} ttl\n     * @param {SignalMessage.Flags|number} flags\n     * @param {Uint8Array} [payload]\n     * @param {PublicKey} [senderPubKey]\n     * @param {Signature} [signature]\n     */\n    constructor(senderId, recipientId, nonce, ttl, flags = 0, payload = new Uint8Array(0), senderPubKey, signature) {\n        super(Message.Type.SIGNAL);\n        if (!(senderId instanceof PeerId)) throw 'Malformed senderId';\n        if (!(recipientId instanceof PeerId)) throw 'Malformed recipientId';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n        if (!NumberUtils.isUint8(ttl)) throw 'Malformed ttl';\n        if (!NumberUtils.isUint8(flags)) throw 'Malformed flags';\n        if (!(payload instanceof Uint8Array) || !NumberUtils.isUint16(payload.byteLength)) throw 'Malformed payload';\n        const hasPayload = payload.byteLength > 0;\n        if (hasPayload && !(signature instanceof Signature)) throw 'Malformed signature';\n        if (hasPayload && !(senderPubKey instanceof PublicKey)) throw 'Malformed public key';\n\n        // Note that the signature is NOT verified here.\n        // Callers must explicitly invoke verifySignature() to check it.\n\n        /** @type {PeerId} */\n        this._senderId = senderId;\n        /** @type {PeerId} */\n        this._recipientId = recipientId;\n        /** @type {number} */\n        this._nonce = nonce;\n        /** @type {number} */\n        this._ttl = ttl;\n        /** @type {SignalMessage.Flags|number} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._payload = payload;\n        /** @type {PublicKey} */\n        this._senderPubKey = hasPayload ? senderPubKey : undefined;\n        /** @type {Signature} */\n        this._signature = hasPayload ? signature : undefined;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {SignalMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const senderId = PeerId.unserialize(buf);\n        const recipientId = PeerId.unserialize(buf);\n        const nonce = buf.readUint32();\n        const ttl = buf.readUint8();\n        const flags = buf.readUint8();\n        const length = buf.readUint16();\n        const payload = buf.read(length);\n        const senderPubKey = length > 0 ? PublicKey.unserialize(buf) : undefined;\n        const signature = length > 0 ? Signature.unserialize(buf) : undefined;\n        return new SignalMessage(senderId, recipientId, nonce, ttl, flags, payload, senderPubKey, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._senderId.serialize(buf);\n        this._recipientId.serialize(buf);\n        buf.writeUint32(this._nonce);\n        buf.writeUint8(this._ttl);\n        buf.writeUint8(this._flags);\n        buf.writeUint16(this._payload.byteLength);\n        buf.write(this._payload);\n        if (this._payload.byteLength > 0) {\n            this._senderPubKey.serialize(buf);\n            this._signature.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*senderId*/ this._senderId.serializedSize\n            + /*recipientId*/ this._recipientId.serializedSize\n            + /*nonce*/ 4\n            + /*ttl*/ 1\n            + /*flags*/ 1\n            + /*payloadLength*/ 2\n            + this._payload.byteLength\n            + (this._payload.byteLength > 0 ? this._senderPubKey.serializedSize : 0)\n            + (this._payload.byteLength > 0 ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @return {boolean}\n     */\n    verifySignature() {\n        if (!this._signature) {\n            return false;\n        }\n\n        return this._signature.verify(this._senderPubKey, this._payload)\n            && this._senderId.equals(this._senderPubKey.toPeerId());\n    }\n\n    /** @type {PeerId} */\n    get senderId() {\n        return this._senderId;\n    }\n\n    /** @type {PeerId} */\n    get recipientId() {\n        return this._recipientId;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    /** @type {number} */\n    get ttl() {\n        return this._ttl;\n    }\n\n    /** @type {SignalMessage.Flags|number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /** @type {Uint8Array} */\n    get payload() {\n        return this._payload;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {PublicKey} */\n    get senderPubKey() {\n        return this._senderPubKey;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    hasPayload() {\n        return this._payload.byteLength > 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isUnroutable() {\n        return (this._flags & SignalMessage.Flag.UNROUTABLE) !== 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTtlExceeded() {\n        return (this._flags & SignalMessage.Flag.TTL_EXCEEDED) !== 0;\n    }\n\n    toString() {\n        return `SignalMessage{sender=${this._senderId}, recipient=${this._recipientId}, nonce=${this._nonce}, ttl=${this._ttl}, flags=${this._flags}}`;\n    }\n}\n/**\n * @enum {number}\n */\nSignalMessage.Flag = {\n    UNROUTABLE: 0x1,\n    TTL_EXCEEDED: 0x2\n};\nClass.register(SignalMessage);\n","class SubscribeMessage extends Message {\n    constructor(subscription) {\n        super(Message.Type.SUBSCRIBE);\n        this._subscription = subscription;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {SubscribeMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const subscription = Subscription.unserialize(buf);\n        return new SubscribeMessage(subscription);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._subscription.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._subscription.serializedSize;\n    }\n\n    /** @type {Subscription} */\n    get subscription() {\n        return this._subscription;\n    }\n\n    toString() {\n        return `SubscribeMessage{${this._subscription}}`;\n    }\n}\nClass.register(SubscribeMessage);\n","class TxMessage extends Message {\n    /**\n     * @param {Transaction} transaction\n     * @param {?AccountsProof} [accountsProof]\n     */\n    constructor(transaction, accountsProof) {\n        super(Message.Type.TX);\n        /** @type {Transaction} */\n        this._transaction = transaction;\n        /** @type {AccountsProof} */\n        this._accountsProof = accountsProof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {TxMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const transaction = Transaction.unserialize(buf);\n        const hasAccountsProof = buf.readUint8();\n        if (hasAccountsProof === 1) {\n            const accountsProof = AccountsProof.unserialize(buf);\n            return new TxMessage(transaction, accountsProof);\n        }\n        return new TxMessage(transaction);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._transaction.serialize(buf);\n        buf.writeUint8(this._accountsProof ? 1 : 0);\n        if (this._accountsProof) {\n            this._accountsProof.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        let size = super.serializedSize\n            + this._transaction.serializedSize\n            + /*hasAccountsProof*/ 1;\n        if (this._accountsProof) {\n            size += this._accountsProof.serializedSize;\n        }\n        return size;\n    }\n\n    /** @type {Transaction} */\n    get transaction() {\n        return this._transaction;\n    }\n\n    /** @type {boolean} */\n    get hasAccountsProof() {\n        return !!this._accountsProof;\n    }\n\n    /** @type {AccountsProof} */\n    get accountsProof() {\n        return this._accountsProof;\n    }\n\n    toString() {\n        return `TxMessage{hash=${this._transaction.hash()}}`;\n    }\n}\nClass.register(TxMessage);\n","class VersionMessage extends Message {\n    /**\n     * @param {number} version\n     * @param {PeerAddress} peerAddress\n     * @param {Hash} genesisHash\n     * @param {Hash} headHash\n     * @param {Uint8Array} challengeNonce\n     */\n    constructor(version, peerAddress, genesisHash, headHash, challengeNonce) {\n        super(Message.Type.VERSION);\n        if (!NumberUtils.isUint32(version)) throw new Error('Malformed version');\n        if (!(peerAddress instanceof PeerAddress)) throw new Error('Malformed peerAddress');\n        if (!Hash.isHash(genesisHash)) throw new Error('Malformed genesisHash');\n        if (!Hash.isHash(headHash)) throw new Error('Malformed headHash');\n        if (!(challengeNonce instanceof Uint8Array) || challengeNonce.byteLength !== 32) throw new Error('Malformed challenge nonce');\n\n        /** @type {number} */\n        this._version = version;\n        /** @type {PeerAddress} */\n        this._peerAddress = peerAddress;\n        /** @type {Hash} */\n        this._genesisHash = genesisHash;\n        /** @type {Hash} */\n        this._headHash = headHash;\n        /** @type {Uint8Array} */\n        this._challengeNonce = challengeNonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {VersionMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const version = buf.readUint32();\n        const peerAddress = PeerAddress.unserialize(buf);\n        const genesisHash = Hash.unserialize(buf);\n        const headHash = Hash.unserialize(buf);\n        const challengeNonce = buf.read(VersionMessage.CHALLENGE_SIZE);\n        return new VersionMessage(version, peerAddress, genesisHash, headHash, challengeNonce);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._version);\n        this._peerAddress.serialize(buf);\n        this._genesisHash.serialize(buf);\n        this._headHash.serialize(buf);\n        buf.write(this._challengeNonce);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*version*/ 4\n            + this._peerAddress.serializedSize\n            + this._genesisHash.serializedSize\n            + this._headHash.serializedSize\n            + VersionMessage.CHALLENGE_SIZE;\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {PeerAddress} */\n    get peerAddress() {\n        return this._peerAddress;\n    }\n\n    /** @type {Hash} */\n    get genesisHash() {\n        return this._genesisHash;\n    }\n\n    /** @type {Hash} */\n    get headHash() {\n        return this._headHash;\n    }\n\n    /** @type {Uint8Array} */\n    get challengeNonce() {\n        return this._challengeNonce;\n    }\n\n    toString() {\n        return `VersionMessage{version=${this._version}, peer=${this._peerAddress}, genesis=${this._genesisHash}, head=${this._headHash}}`;\n    }\n}\n\nVersionMessage.CHALLENGE_SIZE = 32;\nClass.register(VersionMessage);\n","class VerAckMessage extends Message {\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     */\n    constructor(publicKey, signature) {\n        super(Message.Type.VERACK);\n        /** @type {PublicKey} */\n        this._publicKey = publicKey;\n        /** @type {Signature} */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {VerAckMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new VerAckMessage(publicKey, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this.publicKey.serialize(buf);\n        this.signature.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._publicKey.serializedSize\n            + this._signature.serializedSize;\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    toString() {\n        return 'VerAckMessage{}';\n    }\n}\nClass.register(VerAckMessage);\n","class AccountsProofMessage extends Message {\n    /**\n     * @param {Hash} blockHash\n     * @param {AccountsProof} [accountsProof]\n     */\n    constructor(blockHash, accountsProof=null) {\n        super(Message.Type.ACCOUNTS_PROOF);\n        if (!(blockHash instanceof Hash)) throw new Error('Malformed blockHash');\n        if (accountsProof && !(accountsProof instanceof AccountsProof)) throw new Error('Malformed proof');\n        /** @type {Hash} */\n        this._blockHash = blockHash;\n        /** @type {AccountsProof} */\n        this._accountsProof = accountsProof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {AccountsProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const hasProof = buf.readUint8();\n        let accountsProof = null;\n        if (hasProof !== 0) {\n            accountsProof = AccountsProof.unserialize(buf);\n        }\n        return new AccountsProofMessage(blockHash, accountsProof);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeUint8(this.hasProof() ? 1 : 0);\n        if (this.hasProof()) {\n            this._accountsProof.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*success bit*/ 1\n            + this._blockHash.serializedSize\n            + (this.hasProof() ? this._accountsProof.serializedSize : 0);\n    }\n\n    /**\n     * @return {boolean}\n     */\n    hasProof() {\n        return !!this._accountsProof;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n\n    /** @type {AccountsProof} */\n    get proof() {\n        return this._accountsProof;\n    }\n}\nClass.register(AccountsProofMessage);\n","class GetAccountsProofMessage extends Message {\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     */\n    constructor(blockHash, addresses) {\n        super(Message.Type.GET_ACCOUNTS_PROOF);\n        if (!blockHash || !(blockHash instanceof Hash)) throw new Error('Malformed block hash');\n        if (!addresses || !NumberUtils.isUint16(addresses.length)\n            || addresses.length < 1\n            || addresses.some(it => !(it instanceof Address))) throw new Error('Malformed addresses');\n        this._blockHash = blockHash;\n        /** @type {Array.<Address>} */\n        this._addresses = addresses;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetAccountsProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const count = buf.readUint16();\n        const addresses = [];\n        for (let i = 0; i < count; i++) {\n            addresses.push(Address.unserialize(buf));\n        }\n        return new GetAccountsProofMessage(blockHash, addresses);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeUint16(this._addresses.length);\n        for (const address of this._addresses) {\n            address.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._blockHash.serializedSize\n            + /*count*/ 2\n            + this._addresses.reduce((sum, address) => sum + address.serializedSize, 0);\n    }\n\n    /** @type {Array.<Address>} */\n    get addresses() {\n        return this._addresses;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n}\nClass.register(GetAccountsProofMessage);\n","class ChainProofMessage extends Message {\n    /**\n     * @param {ChainProof} proof\n     */\n    constructor(proof) {\n        super(Message.Type.CHAIN_PROOF);\n        if (!(proof instanceof ChainProof)) throw 'Malformed chainProof';\n\n        /** @type {ChainProof} */\n        this._proof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {ChainProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const proof = ChainProof.unserialize(buf);\n        return new ChainProofMessage(proof);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._proof.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._proof.serializedSize;\n    }\n\n    /** @type {ChainProof} */\n    get proof() {\n        return this._proof;\n    }\n}\nClass.register(ChainProofMessage);\n","class GetChainProofMessage extends Message {\n    constructor() {\n        super(Message.Type.GET_CHAIN_PROOF);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetChainProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        return new GetChainProofMessage();\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize;\n    }\n}\nClass.register(GetChainProofMessage);\n","class AccountsTreeChunkMessage extends Message {\n    /**\n     * @param {Hash} blockHash\n     * @param {AccountsTreeChunk} [accountsTreeChunk]\n     */\n    constructor(blockHash, accountsTreeChunk=null) {\n        super(Message.Type.ACCOUNTS_TREE_CHUNK);\n        if (!(blockHash instanceof Hash)) throw 'Malformed blockHash';\n        if (accountsTreeChunk && !(accountsTreeChunk instanceof AccountsTreeChunk)) throw 'Malformed chunk';\n        /** @type {Hash} */\n        this._blockHash = blockHash;\n        /** @type {AccountsTreeChunk} */\n        this._accountsTreeChunk = accountsTreeChunk;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {AccountsTreeChunkMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const hasChunk = buf.readUint8();\n        let accountsTreeChunk = null;\n        if (hasChunk !== 0) {\n            accountsTreeChunk = AccountsTreeChunk.unserialize(buf);\n        }\n        return new AccountsTreeChunkMessage(blockHash, accountsTreeChunk);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeUint8(this.hasChunk() ? 1 : 0);\n        if (this.hasChunk()) {\n            this._accountsTreeChunk.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*success bit*/ 1\n            + this._blockHash.serializedSize\n            + (this.hasChunk() ? this._accountsTreeChunk.serializedSize : 0);\n    }\n\n    /**\n     * @return {boolean}\n     */\n    hasChunk() {\n        return !!this._accountsTreeChunk;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n\n    /** @type {AccountsTreeChunk} */\n    get chunk() {\n        return this._accountsTreeChunk;\n    }\n}\nClass.register(AccountsTreeChunkMessage);\n","class GetAccountsTreeChunkMessage extends Message {\n    /**\n     * @param {Hash} blockHash\n     * @param {string} startPrefix\n     */\n    constructor(blockHash, startPrefix) {\n        super(Message.Type.GET_ACCOUNTS_TREE_CHUNK);\n        if (!blockHash || !(blockHash instanceof Hash)) throw 'Malformed block hash';\n        if (StringUtils.isMultibyte(startPrefix)\n            || !NumberUtils.isUint8(startPrefix.length)) throw 'Malformed start prefix';\n        /** @type {Hash} */\n        this._blockHash = blockHash;\n        this._startPrefix = startPrefix;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetAccountsTreeChunkMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const startPrefix = buf.readVarLengthString();\n        return new GetAccountsTreeChunkMessage(blockHash, startPrefix);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeVarLengthString(this._startPrefix);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._blockHash.serializedSize\n            + SerialBuffer.varLengthStringSize(this._startPrefix);\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n\n    /** @type {string} */\n    get startPrefix() {\n        return this._startPrefix;\n    }\n}\nClass.register(GetAccountsTreeChunkMessage);\n","class TransactionsProofMessage extends Message {\n    /**\n     * @param {Hash} blockHash\n     * @param {TransactionsProof} [proof]\n     */\n    constructor(blockHash, proof=null) {\n        super(Message.Type.TRANSACTIONS_PROOF);\n        if (!(blockHash instanceof Hash)) throw new Error('Malformed blockHash');\n        if (proof && !(proof instanceof TransactionsProof)) throw new Error('Malformed proof');\n        /** @type {Hash} */\n        this._blockHash = blockHash;\n        /** @type {TransactionsProof} */\n        this._proof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {TransactionsProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const hasProof = buf.readUint8();\n        let proof = null;\n        if (hasProof !== 0) {\n            proof = TransactionsProof.unserialize(buf);\n        }\n        return new TransactionsProofMessage(blockHash, proof);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeUint8(this.hasProof() ? 1 : 0);\n        if (this.hasProof()) {\n            this._proof.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*success bit*/ 1\n            + this._blockHash.serializedSize\n            + (this.hasProof() ? this._proof.serializedSize : 0);\n    }\n\n    /**\n     * @return {boolean}\n     */\n    hasProof() {\n        return !!this._proof;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n\n    /** @type {TransactionsProof} */\n    get proof() {\n        return this._proof;\n    }\n}\nClass.register(TransactionsProofMessage);\n","class GetTransactionsProofMessage extends Message {\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     */\n    constructor(blockHash, addresses) {\n        super(Message.Type.GET_TRANSACTIONS_PROOF);\n        if (!blockHash || !(blockHash instanceof Hash)) throw new Error('Malformed block hash');\n        if (!addresses || !NumberUtils.isUint16(addresses.length)\n            || addresses.some(it => !(it instanceof Address))) throw new Error('Malformed addresses');\n        this._blockHash = blockHash;\n        /** @type {Array.<Address>} */\n        this._addresses = addresses;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetTransactionsProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHash = Hash.unserialize(buf);\n        const count = buf.readUint16();\n        const addresses = [];\n        for (let i = 0; i < count; i++) {\n            addresses.push(Address.unserialize(buf));\n        }\n        return new GetTransactionsProofMessage(blockHash, addresses);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHash.serialize(buf);\n        buf.writeUint16(this._addresses.length);\n        for (const address of this._addresses) {\n            address.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._blockHash.serializedSize\n            + /*count*/ 2\n            + this._addresses.reduce((sum, address) => sum + address.serializedSize, 0);\n    }\n\n    /** @type {Array.<Address>} */\n    get addresses() {\n        return this._addresses;\n    }\n\n    /** @type {Hash} */\n    get blockHash() {\n        return this._blockHash;\n    }\n}\nClass.register(GetTransactionsProofMessage);\n","class GetTransactionReceiptsMessage extends Message {\n    /**\n     * @param {Address} address\n     */\n    constructor(address) {\n        super(Message.Type.GET_TRANSACTION_RECEIPTS);\n        if (!(address instanceof Address)) throw new Error('Malformed address');\n        /** @type {Address} */\n        this._address = address;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {GetTransactionReceiptsMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const address = Address.unserialize(buf);\n        return new GetTransactionReceiptsMessage(address);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._address.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._address.serializedSize;\n    }\n\n    /** @type {Address} */\n    get address() {\n        return this._address;\n    }\n}\nClass.register(GetTransactionReceiptsMessage);\n","class TransactionReceiptsMessage extends Message {\n    /**\n     * @param {Array.<TransactionReceipt>} transactionReceipts\n     */\n    constructor(transactionReceipts) {\n        super(Message.Type.TRANSACTION_RECEIPTS);\n        if (!Array.isArray(transactionReceipts) || !NumberUtils.isUint16(transactionReceipts.length)\n            || transactionReceipts.some(it => !(it instanceof TransactionReceipt))\n            || transactionReceipts.length > TransactionReceiptsMessage.RECEIPTS_MAX_COUNT) throw new Error('Malformed transactionReceipts');\n        /** @type {Array.<TransactionReceipt>} */\n        this._transactionReceipts = transactionReceipts;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {TransactionReceiptsMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const transactionReceipts = [];\n        for (let i = 0; i < count; ++i) {\n            transactionReceipts.push(TransactionReceipt.unserialize(buf));\n        }\n        return new TransactionReceiptsMessage(transactionReceipts);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._transactionReceipts.length);\n        for (const receipt of this._transactionReceipts) {\n            receipt.serialize(buf);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*count*/ 2\n            + this._transactionReceipts.reduce((sum, receipt) => sum + receipt.serializedSize, 0);\n    }\n\n    /** @type {Array.<TransactionReceipt>} */\n    get transactionReceipts() {\n        return this._transactionReceipts;\n    }\n}\nClass.register(TransactionReceiptsMessage);\nTransactionReceiptsMessage.RECEIPTS_MAX_COUNT = 500;\n","class GetBlockProofMessage extends Message {\n    /**\n     * @param {Hash} blockHashToProve\n     * @param {Hash} knownBlockHash\n     */\n    constructor(blockHashToProve, knownBlockHash) {\n        super(Message.Type.GET_BLOCK_PROOF);\n        if (!(blockHashToProve instanceof Hash)) throw new Error('Malformed blockHashToProve');\n        if (!(knownBlockHash instanceof Hash)) throw new Error('Malformed knownBlockHash');\n        /** @type {Hash} */\n        this._blockHashToProve = blockHashToProve;\n        /** @type {Hash} */\n        this._knownBlockHash = knownBlockHash;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {GetBlockProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const blockHashToProve = Hash.unserialize(buf);\n        const knownBlockHash = Hash.unserialize(buf);\n        return new GetBlockProofMessage(blockHashToProve, knownBlockHash);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._blockHashToProve.serialize(buf);\n        this._knownBlockHash.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._blockHashToProve.serializedSize\n            + this._knownBlockHash.serializedSize;\n    }\n\n    /** @type {Hash} */\n    get blockHashToProve() {\n        return this._blockHashToProve;\n    }\n\n    /** @type {Hash} */\n    get knownBlockHash() {\n        return this._knownBlockHash;\n    }\n}\nClass.register(GetBlockProofMessage);\n","class BlockProofMessage extends Message {\n    /**\n     * @param {BlockChain} [proof]\n     */\n    constructor(proof) {\n        super(Message.Type.BLOCK_PROOF);\n        if (proof && !(proof instanceof BlockChain)) throw new Error('Malformed proof');\n        /** @type {BlockChain} */\n        this._proof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockProofMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const hasProof = buf.readUint8() === 1;\n        if (hasProof) {\n            const proof = BlockChain.unserialize(buf);\n            return new BlockProofMessage(proof);\n        }\n        return new BlockProofMessage();\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        if (this._proof) {\n            buf.writeUint8(1);\n            this._proof.serialize(buf);\n        } else {\n            buf.writeUint8(0);\n        }\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + /*found*/ 1\n            + (this._proof ? this._proof.serializedSize : 0);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    hasProof() {\n        return !!this._proof;\n    }\n\n    /** @type {BlockChain} */\n    get proof() {\n        return this._proof;\n    }\n}\nClass.register(BlockProofMessage);\n","class GetHeadMessage extends Message {\n    constructor() {\n        super(Message.Type.GET_HEAD);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {GetHeadMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        return new GetHeadMessage();\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    toString() {\n        return 'GetHeadMessage{}';\n    }\n}\nClass.register(GetHeadMessage);\n","class HeadMessage extends Message {\n    /**\n     * @param {BlockHeader} header\n     */\n    constructor(header) {\n        super(Message.Type.HEAD);\n        /** @type {BlockHeader} */\n        this._header = header;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HeadMessage}\n     */\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const header = BlockHeader.unserialize(buf);\n        return new HeadMessage(header);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._header.serialize(buf);\n        super._setChecksum(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + this._header.serializedSize;\n    }\n\n    /** @type {BlockHeader} */\n    get header() {\n        return this._header;\n    }\n\n    toString() {\n        return `HeadMessage{height=${this._header.height}, hash=${this._header.hash()}}`;\n    }\n}\nClass.register(HeadMessage);\n","class MessageFactory {\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Message.Type}\n     */\n    static peekType(buf) {\n        return Message.peekType(buf);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Message}\n     */\n    static parse(buf) {\n        const type = Message.peekType(buf);\n        const clazz = MessageFactory.CLASSES[type];\n        if (!clazz || !clazz.unserialize) throw new Error(`Invalid message type: ${type}`);\n        return clazz.unserialize(buf);\n    }\n}\n/**\n * @dict \n * @type {object}\n */\nMessageFactory.CLASSES = {};\nMessageFactory.CLASSES[Message.Type.VERSION] = VersionMessage;\nMessageFactory.CLASSES[Message.Type.INV] = InvMessage;\nMessageFactory.CLASSES[Message.Type.GET_DATA] = GetDataMessage;\nMessageFactory.CLASSES[Message.Type.GET_HEADER] = GetHeaderMessage;\nMessageFactory.CLASSES[Message.Type.NOT_FOUND] = NotFoundMessage;\nMessageFactory.CLASSES[Message.Type.BLOCK] = BlockMessage;\nMessageFactory.CLASSES[Message.Type.HEADER] = HeaderMessage;\nMessageFactory.CLASSES[Message.Type.TX] = TxMessage;\nMessageFactory.CLASSES[Message.Type.GET_BLOCKS] = GetBlocksMessage;\nMessageFactory.CLASSES[Message.Type.MEMPOOL] = MempoolMessage;\nMessageFactory.CLASSES[Message.Type.REJECT] = RejectMessage;\nMessageFactory.CLASSES[Message.Type.SUBSCRIBE] = SubscribeMessage;\nMessageFactory.CLASSES[Message.Type.ADDR] = AddrMessage;\nMessageFactory.CLASSES[Message.Type.GET_ADDR] = GetAddrMessage;\nMessageFactory.CLASSES[Message.Type.PING] = PingMessage;\nMessageFactory.CLASSES[Message.Type.PONG] = PongMessage;\nMessageFactory.CLASSES[Message.Type.SIGNAL] = SignalMessage;\nMessageFactory.CLASSES[Message.Type.GET_CHAIN_PROOF] = GetChainProofMessage;\nMessageFactory.CLASSES[Message.Type.CHAIN_PROOF] = ChainProofMessage;\nMessageFactory.CLASSES[Message.Type.GET_ACCOUNTS_PROOF] = GetAccountsProofMessage;\nMessageFactory.CLASSES[Message.Type.ACCOUNTS_PROOF] = AccountsProofMessage;\nMessageFactory.CLASSES[Message.Type.GET_ACCOUNTS_TREE_CHUNK] = GetAccountsTreeChunkMessage;\nMessageFactory.CLASSES[Message.Type.ACCOUNTS_TREE_CHUNK] = AccountsTreeChunkMessage;\nMessageFactory.CLASSES[Message.Type.GET_TRANSACTIONS_PROOF] = GetTransactionsProofMessage;\nMessageFactory.CLASSES[Message.Type.TRANSACTIONS_PROOF] = TransactionsProofMessage;\nMessageFactory.CLASSES[Message.Type.GET_TRANSACTION_RECEIPTS] = GetTransactionReceiptsMessage;\nMessageFactory.CLASSES[Message.Type.TRANSACTION_RECEIPTS] = TransactionReceiptsMessage;\nMessageFactory.CLASSES[Message.Type.GET_BLOCK_PROOF] = GetBlockProofMessage;\nMessageFactory.CLASSES[Message.Type.BLOCK_PROOF] = BlockProofMessage;\nMessageFactory.CLASSES[Message.Type.GET_HEAD] = GetHeadMessage;\nMessageFactory.CLASSES[Message.Type.HEAD] = HeadMessage;\nMessageFactory.CLASSES[Message.Type.VERACK] = VerAckMessage;\nClass.register(MessageFactory);\n","class WebRtcConnector extends Observable {\n    /**\n     * @constructor\n     * @param {NetworkConfig} networkConfig\n     */\n    constructor(networkConfig) {\n        super();\n\n        /** @type {NetworkConfig} */\n        this._networkConfig = networkConfig;\n\n        /** @type {HashMap.<PeerId,PeerConnector>} */\n        this._connectors = new HashMap();\n\n        /** @type {Timers} */\n        this._timers = new Timers();\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @param {PeerChannel} signalChannel\n     * @returns {boolean}\n     */\n    connect(peerAddress, signalChannel) {\n        if (peerAddress.protocol !== Protocol.RTC) throw 'Malformed peerAddress';\n\n        const peerId = peerAddress.peerId;\n        if (this._connectors.contains(peerId)) {\n            return false;\n        }\n\n        const connector = new OutboundPeerConnector(this._networkConfig, peerAddress, signalChannel);\n        connector.on('connection', conn => this._onConnection(conn, peerId));\n        this._connectors.put(peerId, connector);\n\n        this._timers.setTimeout(`connect_${peerId}`, () => {\n            this._connectors.remove(peerId);\n            this._timers.clearTimeout(`connect_${peerId}`);\n\n            connector.rtcConnection.close();\n\n            this.fire('error', peerAddress, 'timeout');\n        }, WebRtcConnector.CONNECT_TIMEOUT);\n\n        return true;\n    }\n\n    isValidSignal(msg) {\n        return this._connectors.contains(msg.senderId) && this._connectors.get(msg.senderId).nonce === msg.nonce;\n    }\n\n    onSignal(channel, msg) {\n        // Check if we received an unroutable/ttl exceeded response from one of the signaling peers.\n        if (msg.isUnroutable() || msg.isTtlExceeded()) {\n            // Clear the timeout early if we initiated the connection.\n            if (this.isValidSignal(msg) && this._connectors.get(msg.senderId) instanceof OutboundPeerConnector) {\n                const connector = this._connectors.get(msg.senderId);\n                const peerAddress = connector.peerAddress;\n\n                this._connectors.remove(msg.senderId);\n                this._timers.clearTimeout(`connect_${msg.senderId}`);\n\n                connector.rtcConnection.close();\n\n                // XXX Reason needs to be adapted when more flags are added.\n                const reason = msg.isUnroutable() ? 'unroutable' : 'ttl exceeded';\n                this.fire('error', peerAddress, reason);\n            }\n\n            return;\n        }\n\n        let payload;\n        try {\n            payload = JSON.parse(BufferUtils.toAscii(msg.payload));\n        } catch (e) {\n            Log.e(WebRtcConnector, `Failed to parse signal payload from ${msg.senderId}`);\n            return;\n        }\n\n        if (!payload) {\n            Log.d(WebRtcConnector, `Discarding signal from ${msg.senderId} - empty payload`);\n            return;\n        }\n\n        if (payload.type === 'offer') {\n            // Check if we have received an offer on an ongoing connection.\n            // This can happen if two peers initiate connections to one another\n            // simultaneously. Resolve this by having the peer with the higher\n            // peerId discard the offer while the one with the lower peerId\n            // accepts it.\n            /** @type {PeerConnector} */\n            let connector = this._connectors.get(msg.senderId);\n            if (connector) {\n                if (msg.recipientId.compare(msg.senderId) > 0) {\n                    // Discard the offer.\n                    Log.d(WebRtcConnector, `Simultaneous connection, discarding offer from ${msg.senderId} (<${msg.recipientId})`);\n                    return;\n                } else if (connector instanceof InboundPeerConnector) {\n                    // We have already seen an offer from this peer. Forward it to the existing connector.\n                    Log.w(WebRtcConnector, `Duplicate offer received from ${msg.senderId}`);\n                    connector.onSignal(payload);\n                    return;\n                } else {\n                    // We are going to accept the offer. Clear the connect timeout\n                    // from our previous outbound connection attempt to this peer.\n                    Log.d(WebRtcConnector, `Simultaneous connection, accepting offer from ${msg.senderId} (>${msg.recipientId})`);\n                    this._timers.clearTimeout(`connect_${msg.senderId}`);\n\n                    // Abort the outbound connection attempt.\n                    connector.rtcConnection.close();\n\n                    // Let listeners know that the connection attempt was aborted.\n                    this.fire('error', connector.peerAddress, 'simultaneous inbound connection');\n                }\n            }\n\n            // Accept the offer.\n            connector = new InboundPeerConnector(this._networkConfig, channel, msg.senderId, payload);\n            connector.on('connection', conn => this._onConnection(conn, msg.senderId));\n            this._connectors.put(msg.senderId, connector);\n\n            this._timers.setTimeout(`connect_${msg.senderId}`, () => {\n                this._timers.clearTimeout(`connect_${msg.senderId}`);\n                this._connectors.remove(msg.senderId);\n            }, WebRtcConnector.CONNECT_TIMEOUT);\n        }\n\n        // If we are already establishing a connection with the sender of this\n        // signal, forward it to the corresponding connector.\n        else if (this._connectors.contains(msg.senderId)) {\n            this._connectors.get(msg.senderId).onSignal(payload);\n        }\n\n        // If none of the above conditions is met, the signal is invalid and we discard it.\n    }\n\n    _onConnection(conn, peerId) {\n        // Clear the connect timeout.\n        this._timers.clearTimeout(`connect_${peerId}`);\n\n        // Clean up when this connection closes.\n        conn.on('close', () => this._onClose(peerId));\n\n        // Tell listeners about the new connection.\n        this.fire('connection', conn);\n    }\n\n    _onClose(peerId) {\n        this._connectors.remove(peerId);\n        this._timers.clearTimeout(`connect_${peerId}`);\n    }\n}\nWebRtcConnector.CONNECT_TIMEOUT = 8000; // ms\nClass.register(WebRtcConnector);\n\nclass PeerConnector extends Observable {\n    /**\n     * @param {NetworkConfig} networkConfig\n     * @param {PeerChannel} signalChannel\n     * @param {PeerId} peerId\n     * @param {PeerAddress} peerAddress\n     */\n    constructor(networkConfig, signalChannel, peerId, peerAddress) {\n        super();\n        /** @type {NetworkConfig} */\n        this._networkConfig = networkConfig;\n        /** @type {PeerChannel} */\n        this._signalChannel = signalChannel;\n        /** @type {PeerId} */\n        this._peerId = peerId;\n        /** @type {PeerAddress} */\n        this._peerAddress = peerAddress; // null for inbound connections\n\n        /** @type {number} */\n        this._nonce = NumberUtils.randomUint32();\n\n        /** @type {RTCPeerConnection} */\n        this._rtcConnection = WebRtcFactory.newPeerConnection(this._networkConfig.rtcConfig);\n        this._rtcConnection.onicecandidate = e => this._onIceCandidate(e);\n\n        this._lastIceCandidate = null;\n        this._iceCandidateQueue = [];\n    }\n\n    onSignal(signal) {\n        if (signal.sdp) {\n            this._rtcConnection.setRemoteDescription(WebRtcFactory.newSessionDescription(signal))\n                .then(() => {\n                    if (signal.type === 'offer') {\n                        this._rtcConnection.createAnswer()\n                            .then(description => this._onDescription(description))\n                            .catch(Log.e.tag(PeerConnector));\n                    }\n\n                    this._handleCandidateQueue().catch(Log.w.tag(PeerConnector));\n                })\n                .catch(Log.e.tag(PeerConnector));\n        } else if (signal.candidate) {\n            this._addIceCandidate(signal).catch(Log.w.tag(PeerConnector));\n        }\n    }\n\n    /**\n     * @param {*} signal\n     * @returns {Promise}\n     * @private\n     */\n    _addIceCandidate(signal) {\n        this._lastIceCandidate = WebRtcFactory.newIceCandidate(signal);\n\n        // Do not try to add ICE candidates before the remote description is set.\n        if (!this._rtcConnection.remoteDescription || !this._rtcConnection.remoteDescription.type) {\n            this._iceCandidateQueue.push(signal);\n            return Promise.resolve();\n        }\n\n        return this._rtcConnection.addIceCandidate(this._lastIceCandidate)\n            .catch(Log.e.tag(PeerConnector));\n    }\n\n    async _handleCandidateQueue() {\n        // Handle ICE candidates if they already arrived.\n        for (const candidate of this._iceCandidateQueue) {\n            await this._addIceCandidate(candidate);\n        }\n        this._iceCandidateQueue = [];\n    }\n\n    _signal(signal) {\n        const payload = BufferUtils.fromAscii(JSON.stringify(signal));\n        const keyPair = this._networkConfig.keyPair;\n        const peerId = this._networkConfig.peerId;\n        this._signalChannel.signal(\n            peerId,\n            this._peerId,\n            this._nonce,\n            Network.SIGNAL_TTL_INITIAL,\n            0, /*flags*/\n            payload,\n            keyPair.publicKey,\n            Signature.create(keyPair.privateKey, keyPair.publicKey, payload)\n        );\n    }\n\n    _onIceCandidate(event) {\n        if (event.candidate !== null) {\n            this._signal(event.candidate);\n        }\n    }\n\n    _onDescription(description) {\n        this._rtcConnection.setLocalDescription(description)\n            .then(() => this._signal(this._rtcConnection.localDescription))\n            .catch(Log.e.tag(PeerConnector));\n    }\n\n    _onDataChannel(event) {\n        const channel = new WebRtcDataChannel(event.channel || event.target);\n\n        // Make sure to close the corresponding RTCPeerConnection when the RTCDataChannel is closed\n        channel.on('close', () => this._rtcConnection.close());\n\n        // There is no API to get the remote IP address. As a crude heuristic, we parse the IP address\n        // from the last ICE candidate seen before the connection was established.\n        // TODO Can we improve this?\n        let netAddress = null;\n        if (this._lastIceCandidate) {\n            try {\n                netAddress = WebRtcUtils.candidateToNetAddress(this._lastIceCandidate);\n            } catch (e) {\n                Log.w(PeerConnector, `Failed to parse IP from ICE candidate: ${this._lastIceCandidate}`);\n            }\n        } else {\n            // XXX Why does this happen?\n            Log.w(PeerConnector, 'No ICE candidate seen for inbound connection');\n        }\n\n        const conn = new NetworkConnection(channel, Protocol.RTC, netAddress, this._peerAddress);\n        this.fire('connection', conn);\n    }\n\n    get nonce() {\n        return this._nonce;\n    }\n\n    get peerAddress() {\n        return this._peerAddress;\n    }\n\n    get rtcConnection() {\n        return this._rtcConnection;\n    }\n}\nClass.register(PeerConnector);\n\nclass OutboundPeerConnector extends PeerConnector {\n    constructor(webRtcConfig, peerAddress, signalChannel) {\n        super(webRtcConfig, signalChannel, peerAddress.peerId, peerAddress);\n        this._peerAddress = peerAddress;\n\n        // Create offer.\n        const channel = this._rtcConnection.createDataChannel('data-channel');\n        channel.binaryType = 'arraybuffer';\n        channel.onopen = e => this._onDataChannel(e);\n        this._rtcConnection.createOffer()\n            .then(description => this._onDescription(description))\n            .catch(Log.e.tag(OutboundPeerConnector));\n    }\n}\nClass.register(OutboundPeerConnector);\n\nclass InboundPeerConnector extends PeerConnector {\n    constructor(webRtcConfig, signalChannel, peerId, offer) {\n        super(webRtcConfig, signalChannel, peerId, null);\n        this._rtcConnection.ondatachannel = event => {\n            event.channel.onopen = e => this._onDataChannel(e);\n        };\n        this.onSignal(offer);\n    }\n}\nClass.register(InboundPeerConnector);\n","class WebRtcDataChannel extends DataChannel {\n    /**\n     * @param {RTCDataChannel} nativeChannel\n     */\n    constructor(nativeChannel) {\n        super();\n        // We expect WebRtc data channels to be ordered.\n        Assert.that(nativeChannel.ordered, 'WebRtc data channel not ordered');\n        /** @type {RTCDataChannel} */\n        this._channel = nativeChannel;\n\n        this._channel.onmessage = msg => this._onMessage(msg.data || msg);\n        this._channel.onclose = () => this._onClose();\n        this._channel.onerror = e => this.fire('error', e, this);\n    }\n\n    /**\n     * @param {ArrayBuffer} msg\n     * @protected\n     * @override\n     */\n    _onMessage(msg) {\n        // FIXME It seems that Firefox still sometimes receives blobs instead of ArrayBuffers on RTC connections.\n        // FIXME FileReader is async and may RE-ORDER MESSAGES!\n        if (msg instanceof Blob) {\n            const reader = new FileReader();\n            reader.onloadend = () => super._onMessage(reader.result);\n            reader.readAsArrayBuffer(msg);\n        } else {\n            super._onMessage(msg);\n        }\n    }\n    /**\n     * @override\n     */\n    sendChunk(msg) {\n        this._channel.send(msg);\n    }\n\n    /**\n     * @override\n     */\n    close() {\n        this._channel.close();\n    }\n\n    /**\n     * @override\n     */\n    get readyState() {\n        return DataChannel.ReadyState.fromString(this._channel.readyState);\n    }\n}\n\nClass.register(WebRtcDataChannel);\n","class WebRtcUtils {\n    static candidateToNetAddress(candidate) {\n        // TODO XXX Ad-hoc parsing of candidates - Improve!\n        const parts = candidate.candidate.split(' ');\n        if (parts.length < 6) {\n            return null;\n        }\n        // XXX The IP obtained from the ice candidate is not really reliable.\n        // But for the time being, we treat it as such as it only affects browser clients,\n        // which cannot obtain a more reliable form of net addresses.\n        return NetAddress.fromIP(parts[4], true);\n    }\n}\nClass.register(WebRtcUtils);\n","class WebSocketConnector extends Observable {\n    /**\n     * @constructor\n     * @param {NetworkConfig} networkConfig\n     * @listens WebSocketServer#connection\n     */\n    constructor(networkConfig) {\n        super();\n        this._networkConfig = networkConfig;\n\n        if (networkConfig.peerAddress.protocol === Protocol.WS) {\n            this._wss = WebSocketFactory.newWebSocketServer(networkConfig);\n            this._wss.on('connection', ws => this._onConnection(ws));\n\n            Log.d(WebSocketConnector, `WebSocketConnector listening on port ${networkConfig.peerAddress.port}`);\n        }\n\n        /** @type {HashMap.<PeerAddress, WebSocket>} */\n        this._sockets = new HashMap();\n\n        /** @type {Timers} */\n        this._timers = new Timers();\n    }\n\n    /**\n     * @fires WebSocketConnector#connection\n     * @fires WebSocketConnector#error\n     * @param {PeerAddress} peerAddress\n     * @returns {boolean}\n     */\n    connect(peerAddress) {\n        if (peerAddress.protocol !== Protocol.WS) throw 'Malformed peerAddress';\n\n        const timeoutKey = `connect_${peerAddress}`;\n        if (this._timers.timeoutExists(timeoutKey)) {\n            Log.w(WebSocketConnector, `Already connecting to ${peerAddress}`);\n            return false;\n        }\n\n        const ws = WebSocketFactory.newWebSocket(`wss://${peerAddress.host}:${peerAddress.port}`, {\n            handshakeTimeout: WebSocketConnector.CONNECT_TIMEOUT\n        }, this._networkConfig);\n        ws.binaryType = 'arraybuffer';\n        ws.onopen = () => {\n            this._timers.clearTimeout(timeoutKey);\n            this._sockets.remove(peerAddress);\n\n            // Don't fire error events after the connection has been established.\n            ws.onerror = () => {};\n\n            // There is no way to determine the remote IP in the browser ... thanks for nothing, WebSocket API.\n            const netAddress = (ws._socket && ws._socket.remoteAddress) ? NetAddress.fromIP(ws._socket.remoteAddress, true) : null;\n            const conn = new NetworkConnection(new WebSocketDataChannel(ws), Protocol.WS, netAddress, peerAddress);\n            this.fire('connection', conn);\n        };\n        ws.onerror = e => {\n            this._timers.clearTimeout(timeoutKey);\n            this._sockets.remove(peerAddress);\n\n            /**\n             * Tell listeners that an error has ocurred.\n             * @event WebSocketConnector#error\n             */\n            this.fire('error', peerAddress, e);\n        };\n\n        this._sockets.put(peerAddress, ws);\n\n        this._timers.setTimeout(timeoutKey, () => {\n            this._timers.clearTimeout(timeoutKey);\n            this._sockets.remove(peerAddress);\n\n            // We don't want to fire the error event again if the websocket\n            // connect fails at a later time.\n            ws.onerror = () => {};\n\n            // If the connection succeeds after we have fired the error event,\n            // close it.\n            ws.onopen = () => {\n                Log.d(WebSocketConnector, () => `Connection to ${peerAddress} succeeded after timeout - closing it`);\n                ws.close();\n            };\n\n            /**\n             * Tell listeners that a timeout error has occurred.\n             * @event WebSocketConnector#error\n             */\n            this.fire('error', peerAddress, 'timeout');\n        }, WebSocketConnector.CONNECT_TIMEOUT);\n\n        return true;\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @fires WebSocketConnector#error\n     * @returns {void}\n     */\n    abort(peerAddress) {\n        const ws = this._sockets.get(peerAddress);\n        if (!ws) {\n            return;\n        }\n\n        this._timers.clearTimeout(`connect_${peerAddress}`);\n        this._sockets.remove(peerAddress);\n\n        ws.onerror = () => {};\n        ws.onopen = () => {\n            Log.d(WebSocketConnector, () => `Connection to ${peerAddress} succeeded after aborting - closing it`);\n            ws.close();\n        };\n        ws.close();\n\n        /**\n         * Tell listeners that the connection attempt has been aborted.\n         * @event WebSocketConnector#error\n         */\n        this.fire('error', peerAddress, 'aborted');\n    }\n\n    /**\n     * @fires WebSocketConnector#connection\n     * @param {WebSocket} ws\n     * @returns {void}\n     */\n    _onConnection(ws) {\n        const netAddress = NetAddress.fromIP(ws._socket.remoteAddress, true);\n        const conn = new NetworkConnection(new WebSocketDataChannel(ws), Protocol.WS, netAddress, /*peerAddress*/ null);\n\n        /**\n        * Tell listeners that an initial connection to a peer has been established.\n        * @event WebSocketConnector#connection\n        */\n        this.fire('connection', conn);\n    }\n}\nWebSocketConnector.CONNECT_TIMEOUT = 1000 * 5; // 5 seconds\nClass.register(WebSocketConnector);\n","class WebSocketDataChannel extends DataChannel {\n    /**\n     * @param {WebSocket} ws\n     */\n    constructor(ws) {\n        super();\n        /** @type {WebSocket} */\n        this._ws = ws;\n        this._ws.onmessage = msg => this._onMessage(msg.data || msg);\n        this._ws.onclose = () => this._onClose();\n        this._ws.onerror = e => this.fire('error', e);\n    }\n\n    /**\n     * @override\n     */\n    close() {\n        this._ws.close();\n    }\n\n    /**\n     * @override\n     * @param {Uint8Array} msg\n     */\n    sendChunk(msg) {\n        this._ws.send(msg);\n    }\n\n    /**\n     * @override\n     * @type {DataChannel.ReadyState}\n     */\n    get readyState() {\n        return /** @type {DataChannel.ReadyState} */ this._ws.readyState;\n    }\n}\n\nClass.register(WebSocketDataChannel);\n","class NetAddress {\n    /**\n     * @param {string} ip\n     * @param {boolean} reliable\n     * @return {NetAddress}\n     */\n    static fromIP(ip, reliable = false) {\n        const saneIp = NetUtils.ipToBytes(ip);\n        const type = NetUtils.isIPv4Address(saneIp) ? NetAddress.Type.IPv4 : NetAddress.Type.IPv6;\n        return new NetAddress(type, saneIp, reliable);\n    }\n\n    /**\n     * @param {NetAddress.Type} type\n     * @param {Uint8Array} ipArray\n     * @param {boolean} reliable\n     */\n    constructor(type, ipArray = null, reliable = false) {\n        switch (type) {\n            case NetAddress.Type.IPv4:\n                if (!(ipArray instanceof Uint8Array) || ipArray.length !== NetUtils.IPv4_LENGTH) throw new Error('Malformed ip');\n                break;\n            case NetAddress.Type.IPv6:\n                if (!(ipArray instanceof Uint8Array) || ipArray.length !== NetUtils.IPv6_LENGTH) throw new Error('Malformed ip');\n                break;\n            case NetAddress.Type.UNKNOWN:\n            case NetAddress.Type.UNSPECIFIED:\n                ipArray = null;\n                break;\n            default:\n                throw new Error('Malformed type');\n        }\n\n        /** @type {NetAddress.Type} */\n        this._type = type;\n        /** @type {Uint8Array} */\n        this._ip = ipArray;\n        /** @type {boolean} */\n        this._reliable = reliable;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {NetAddress}\n     */\n    static unserialize(buf) {\n        const type = /** @type {NetAddress.Type} */ buf.readUint8();\n\n        let ipArray = null;\n        switch (type) {\n            case NetAddress.Type.IPv4:\n                ipArray = buf.read(NetUtils.IPv4_LENGTH);\n                break;\n            case NetAddress.Type.IPv6:\n                ipArray = buf.read(NetUtils.IPv6_LENGTH);\n                break;\n        }\n\n        return new NetAddress(type, ipArray);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        if (this._ip) {\n            buf.write(this._ip);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + (this._ip ? this._ip.length : 0);\n    }\n\n    /**\n     * @param {NetAddress} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof NetAddress\n            && this._type === o._type\n            && BufferUtils.equals(this._ip, o.ip);\n    }\n\n    hashCode() {\n        return this.toString();\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        if (this._type === NetAddress.Type.UNKNOWN) return '<unknown>';\n        if (this._type === NetAddress.Type.UNSPECIFIED) return '';\n        return NetUtils.bytesToIp(this._ip);\n    }\n\n    /** @type {Uint8Array} */\n    get ip() {\n        return this._ip;\n    }\n\n    /** @type {NetAddress.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /** @type {boolean} */\n    get reliable() {\n        return this._reliable;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isPseudo() {\n        return !this._ip;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isPrivate() {\n        return this.isPseudo() || NetUtils.isPrivateIP(this._ip);\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isIPv6() {\n        return this._ip && NetUtils.isIPv6Address(this._ip);\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isIPv4() {\n        return this._ip && NetUtils.isIPv4Address(this._ip);\n    }\n\n    /**\n     * @param {number} bitCount\n     * @return {NetAddress}\n     */\n    subnet(bitCount) {\n        const ip = this._ip ? NetUtils.ipToSubnet(this._ip, bitCount) : null;\n        return new NetAddress(this._type, ip, this._reliable);\n    }\n}\n/** @enum {number} */\nNetAddress.Type = {\n    IPv4: 0,\n    IPv6: 1,\n    UNSPECIFIED: 2,\n    UNKNOWN: 3\n};\nNetAddress.UNSPECIFIED = new NetAddress(NetAddress.Type.UNSPECIFIED);\nNetAddress.UNKNOWN = new NetAddress(NetAddress.Type.UNKNOWN);\nClass.register(NetAddress);\n","class PeerId extends Serializable {\n    /**\n     * @param {PeerId} o\n     * @returns {PeerId}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new PeerId(obj);\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PeerId.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {PeerId} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new PeerId(buf.read(PeerId.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return PeerId.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PeerId\n            && super.equals(o);\n    }\n\n    /**\n     * @returns {string}\n     * @override\n     */\n    toString() {\n        return this.toHex();\n    }\n\n    /**\n     * @param {string} base64\n     * @return {PeerId}\n     */\n    static fromBase64(base64) {\n        return new PeerId(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {PeerId}\n     */\n    static fromHex(hex) {\n        return new PeerId(BufferUtils.fromHex(hex));\n    }\n}\n\nPeerId.SERIALIZED_SIZE = 16;\nClass.register(PeerId);\n","class PeerAddress {\n    /**\n     * @param {number} protocol\n     * @param {number} services\n     * @param {number} timestamp\n     * @param {NetAddress} netAddress\n     * @param {PublicKey} publicKey\n     * @param {number} distance\n     * @param {Signature} [signature]\n     */\n    constructor(protocol, services, timestamp, netAddress, publicKey, distance, signature) {\n        if (!NumberUtils.isUint8(distance)) throw new Error('Malformed distance');\n        if (publicKey !== null && !(publicKey instanceof PublicKey)) throw new Error('Malformed publicKey');\n\n        /** @type {number} */\n        this._protocol = protocol;\n        /** @type {number} */\n        this._services = services;\n        /** @type {number} */\n        this._timestamp = timestamp;\n        /** @type {NetAddress} */\n        this._netAddress = netAddress || NetAddress.UNSPECIFIED;\n        /** @type {PublicKey} */\n        this._publicKey = publicKey;\n        /** @type {number} */\n        this._distance = distance;\n        /** @type {?Signature} */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PeerAddress}\n     */\n    static unserialize(buf) {\n        const protocol = buf.readUint8();\n        switch (protocol) {\n            case Protocol.WS:\n                return WsPeerAddress.unserialize(buf);\n\n            case Protocol.RTC:\n                return RtcPeerAddress.unserialize(buf);\n\n            case Protocol.DUMB:\n                return DumbPeerAddress.unserialize(buf);\n\n            default:\n                throw `Malformed PeerAddress protocol ${protocol}`;\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        if (!this._publicKey) throw new Error('PeerAddress without publicKey may not be serialized.');\n        if (!this._signature) throw new Error('PeerAddress without signature may not be serialized.');\n\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._protocol);\n        buf.writeUint32(this._services);\n        buf.writeUint64(this._timestamp);\n\n        // Never serialize private netAddresses.\n        if (this._netAddress.isPrivate()) {\n            NetAddress.UNSPECIFIED.serialize(buf);\n        } else {\n            this._netAddress.serialize(buf);\n        }\n\n        this._publicKey.serialize(buf);\n        buf.writeUint8(this._distance);\n        this._signature.serialize(buf);\n\n        return buf;\n    }\n\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n\n        buf.writeUint8(this._protocol);\n        buf.writeUint32(this._services);\n        buf.writeUint64(this._timestamp);\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*protocol*/ 1\n            + /*services*/ 4\n            + /*timestamp*/ 8\n            + this._netAddress.serializedSize\n            + this._publicKey.serializedSize\n            + /*distance*/ 1\n            + this._signature.serializedSize;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*protocol*/ 1\n            + /*services*/ 4\n            + /*timestamp*/ 8;\n    }\n\n    /**\n     * @param {PeerAddress|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        // We consider peer addresses to be equal if the public key or peer id is not known on one of them:\n        // Peers from the network always contain a peer id and public key, peers without peer id or public key\n        // are always set by the user.\n        return o instanceof PeerAddress\n            && this.protocol === o.protocol\n            && (!this.publicKey || !o.publicKey || this.publicKey.equals(o.publicKey))\n            && (!this.peerId || !o.peerId || this.peerId.equals(o.peerId))\n            /* services is ignored */\n            /* timestamp is ignored */\n            /* netAddress is ignored */\n            /* distance is ignored */;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verifySignature() {\n        if (this._signatureVerified === undefined) {\n            this._signatureVerified = this.signature.verify(this.publicKey, this.serializeContent());\n        }\n        return this._signatureVerified;\n    }\n\n    /** @type {number} */\n    get protocol() {\n        return this._protocol;\n    }\n\n    /** @type {number} */\n    get services() {\n        return this._services;\n    }\n\n    /** @type {number} */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /** @type {NetAddress} */\n    get netAddress() {\n        return this._netAddress.isPseudo() ? null : this._netAddress;\n    }\n\n    /** @type {NetAddress} */\n    set netAddress(value) {\n        this._netAddress = value || NetAddress.UNSPECIFIED;\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {PeerId} */\n    get peerId() {\n        return this._publicKey ? this._publicKey.toPeerId() : null;\n    }\n\n    /** @type {number} */\n    get distance() {\n        return this._distance;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        // Never change the signature of a remote address.\n        if (this._distance !== 0) {\n            return;\n        }\n\n        this._signature = signature;\n        this._signatureVerified = undefined;\n    }\n\n    // Changed when passed on to other peers.\n    /** @type {number} */\n    set distance(value) {\n        this._distance = value;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSeed() {\n        return this._timestamp === 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    exceedsAge() {\n        // Seed addresses are never too old.\n        if (this.isSeed()) {\n            return false;\n        }\n\n        const age = Date.now() - this.timestamp;\n        switch (this.protocol) {\n            case Protocol.WS:\n                return age > PeerAddressBook.MAX_AGE_WEBSOCKET;\n\n            case Protocol.RTC:\n                return age > PeerAddressBook.MAX_AGE_WEBRTC;\n\n            case Protocol.DUMB:\n                return age > PeerAddressBook.MAX_AGE_DUMB;\n        }\n        return false;\n    }\n\n}\n\nClass.register(PeerAddress);\n\nclass WsPeerAddress extends PeerAddress {\n    /**\n     * @param {string} host\n     * @param {number} port\n     * @param {string} [publicKeyHex]\n     * @returns {WsPeerAddress}\n     */\n    static seed(host, port, publicKeyHex) {\n        const publicKey = publicKeyHex ? new PublicKey(BufferUtils.fromHex(publicKeyHex)) : null;\n        return new WsPeerAddress(Services.FULL, /*timestamp*/ 0, NetAddress.UNSPECIFIED, publicKey, 0, host, port);\n    }\n\n    /**\n     * @param {number} services\n     * @param {number} timestamp\n     * @param {NetAddress} netAddress\n     * @param {PublicKey} publicKey\n     * @param {number} distance\n     * @param {string} host\n     * @param {number} port\n     * @param {Signature} [signature]\n     */\n    constructor(services, timestamp, netAddress, publicKey, distance, host, port, signature) {\n        super(Protocol.WS, services, timestamp, netAddress, publicKey, distance, signature);\n        if (!host) throw new Error('Malformed host');\n        if (!NumberUtils.isUint16(port)) throw new Error('Malformed port');\n        this._host = host;\n        this._port = port;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {WsPeerAddress}\n     */\n    static unserialize(buf) {\n        const services = buf.readUint32();\n        const timestamp = buf.readUint64();\n        const netAddress = NetAddress.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        const distance = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        const host = buf.readVarLengthString();\n        const port = buf.readUint16();\n        return new WsPeerAddress(services, timestamp, netAddress, publicKey, distance, host, port, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeVarLengthString(this._host);\n        buf.writeUint16(this._port);\n        return buf;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        super.serializeContent(buf);\n        buf.writeVarLengthString(this._host);\n        buf.writeUint16(this._port);\n        return buf;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    globallyReachable() {\n        return NetUtils.hostGloballyReachable(this.host);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize\n            + SerialBuffer.varLengthStringSize(this._host)\n            + /*port*/ 2;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return super.serializedContentSize\n            + SerialBuffer.varLengthStringSize(this._host)\n            + /*port*/ 2;\n    }\n\n    /**\n     * @override\n     * @param {PeerAddress|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return super.equals(o)\n            && o instanceof WsPeerAddress\n            && ((!!this.peerId && !!o.peerId) || (this._host === o.host && this._port === o.port));\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this.peerId\n            ? `wss:///${this.peerId}`\n            : `wss://${this._host}:${this._port}/`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `wss://${this._host}:${this._port}/${this.peerId ? this.peerId : ''}`;\n    }\n\n    /**\n     * @returns {WsPeerAddress}\n     */\n    withoutId() {\n        return new WsPeerAddress(this.services, this.timestamp, this.netAddress, null, this.distance, this.host, this.port);\n    }\n\n    /** @type {string} */\n    get host() {\n        return this._host;\n    }\n\n    /** @type {number} */\n    get port() {\n        return this._port;\n    }\n}\n\nClass.register(WsPeerAddress);\n\nclass RtcPeerAddress extends PeerAddress {\n    /**\n     * @param {number} services\n     * @param {number} timestamp\n     * @param {NetAddress} netAddress\n     * @param {PublicKey} publicKey\n     * @param {number} distance\n     * @param {Signature} [signature]\n     */\n    constructor(services, timestamp, netAddress, publicKey, distance, signature) {\n        super(Protocol.RTC, services, timestamp, netAddress, publicKey, distance, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {RtcPeerAddress}\n     */\n    static unserialize(buf) {\n        const services = buf.readUint32();\n        const timestamp = buf.readUint64();\n        const netAddress = NetAddress.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        const distance = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new RtcPeerAddress(services, timestamp, netAddress, publicKey, distance, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize;\n    }\n\n    /**\n     * @override\n     * @param {PeerAddress|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return super.equals(o)\n            && o instanceof RtcPeerAddress;\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this.toString();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `rtc:///${this.peerId}`;\n    }\n}\n\nClass.register(RtcPeerAddress);\n\nclass DumbPeerAddress extends PeerAddress {\n    /**\n     * @param {number} services\n     * @param {number} timestamp\n     * @param {NetAddress} netAddress\n     * @param {PublicKey} publicKey\n     * @param {number} distance\n     * @param {Signature} [signature]\n     */\n    constructor(services, timestamp, netAddress, publicKey, distance, signature) {\n        super(Protocol.DUMB, services, timestamp, netAddress, publicKey, distance, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {DumbPeerAddress}\n     */\n    static unserialize(buf) {\n        const services = buf.readUint32();\n        const timestamp = buf.readUint64();\n        const netAddress = NetAddress.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        const distance = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new DumbPeerAddress(services, timestamp, netAddress, publicKey, distance, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return super.serializedSize;\n    }\n\n    /**\n     * @override\n     * @param {PeerAddress} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return super.equals(o)\n            && o instanceof DumbPeerAddress;\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this.toString();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `dumb:///${this.peerId}`;\n    }\n}\n\nClass.register(DumbPeerAddress);\n","class PeerAddressState {\n    /**\n     * @param {PeerAddress} peerAddress\n     */\n    constructor(peerAddress) {\n        /** @type {PeerAddress} */\n        this.peerAddress = peerAddress;\n\n        /** @type {number} */\n        this.state = PeerAddressState.NEW;\n        /** @type {number} */\n        this.lastConnected = -1;\n        /** @type {number} */\n        this.bannedUntil = -1;\n        /** @type {number} */\n        this.banBackoff = PeerAddressBook.INITIAL_FAILED_BACKOFF;\n\n        /** @type {SignalRouter} */\n        this._signalRouter = new SignalRouter(peerAddress);\n\n        /** @type {number} */\n        this._failedAttempts = 0;\n\n        /**\n         * Map from closeType to number of occurrences\n         * @type {Map.<number,number>}\n         * @private\n         */\n        this._closeTypes = new Map();\n\n        /**\n         * @type {HashSet.<NetAddress>}\n         * @private\n         */\n        this._addedBy = new HashSet();\n    }\n\n    /** @type {SignalRouter} */\n    get signalRouter() {\n        return this._signalRouter;\n    }\n\n    /** @type {number} */\n    get maxFailedAttempts() {\n        switch (this.peerAddress.protocol) {\n            case Protocol.RTC:\n                return PeerAddressBook.MAX_FAILED_ATTEMPTS_RTC;\n            case Protocol.WS:\n                return PeerAddressBook.MAX_FAILED_ATTEMPTS_WS;\n            default:\n                return 0;\n        }\n    }\n\n    /** @type {number} */\n    get failedAttempts() {\n        if (this._signalRouter.bestRoute) {\n            return this._signalRouter.bestRoute.failedAttempts;\n        } else {\n            return this._failedAttempts;\n        }\n    }\n\n    /** @type {number} */\n    set failedAttempts(value) {\n        if (this._signalRouter.bestRoute) {\n            this._signalRouter.bestRoute.failedAttempts = value;\n            this._signalRouter.updateBestRoute(); // scores may have changed\n        } else {\n            this._failedAttempts = value;\n        }\n    }\n\n    /**\n     * @param {number} type\n     */\n    close(type) {\n        if (!type) return;\n\n        if (this._closeTypes.has(type)) {\n            this._closeTypes.set(type, this._closeTypes.get(type) + 1);\n        } else {\n            this._closeTypes.set(type, 1);\n        }\n\n        if (this.state === PeerAddressState.BANNED) {\n            return;\n        }\n\n        if (CloseType.isBanningType(type)) {\n            this.state = PeerAddressState.BANNED;\n        } else if (CloseType.isFailingType(type)) {\n            this.state = PeerAddressState.FAILED;\n        } else {\n            this.state = PeerAddressState.TRIED;\n        }\n    }\n\n    /**\n     * @param {PeerAddressState|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof PeerAddressState\n            && this.peerAddress.equals(o.peerAddress);\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this.peerAddress.hashCode();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `PeerAddressState{peerAddress=${this.peerAddress}, state=${this.state}, `\n            + `lastConnected=${this.lastConnected}, failedAttempts=${this.failedAttempts}, `\n            + `bannedUntil=${this.bannedUntil}}`;\n    }\n\n    /** @type {HashSet.<NetAddress>} */\n    get addedBy() {\n        return this._addedBy;\n    }\n}\nPeerAddressState.NEW = 1;\nPeerAddressState.ESTABLISHED = 2;\nPeerAddressState.TRIED = 3;\nPeerAddressState.FAILED = 4;\nPeerAddressState.BANNED = 5;\nClass.register(PeerAddressState);\n\nclass SignalRouter {\n    /**\n     * @constructor\n     * @param {PeerAddress} peerAddress\n     */\n    constructor(peerAddress) {\n        /** @type {PeerAddress} */\n        this.peerAddress = peerAddress;\n\n        /** @type {SignalRoute} */\n        this._bestRoute = null;\n        /** @type {HashSet.<SignalRoute>} */\n        this._routes = new HashSet();\n    }\n\n    /** @type {SignalRoute} */\n    get bestRoute() {\n        return this._bestRoute;\n    }\n\n    /**\n     * @param {PeerChannel} signalChannel\n     * @param {number} distance\n     * @param {number} timestamp\n     * @returns {boolean} whether we have a new best route\n     */\n    addRoute(signalChannel, distance, timestamp) {\n        const oldRoute = this._routes.get(signalChannel);\n        const newRoute = new SignalRoute(signalChannel, distance, timestamp);\n\n        if (oldRoute) {\n            // Do not reset failed attempts.\n            newRoute.failedAttempts = oldRoute.failedAttempts;\n        }\n        this._routes.add(newRoute);\n\n        if (!this._bestRoute || newRoute.score > this._bestRoute.score\n            || (newRoute.score === this._bestRoute.score && timestamp > this._bestRoute.timestamp)) {\n\n            this._bestRoute = newRoute;\n            this.peerAddress.distance = this._bestRoute.distance;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @returns {void}\n     */\n    deleteBestRoute() {\n        if (this._bestRoute) {\n            this.deleteRoute(this._bestRoute.signalChannel);\n        }\n    }\n\n    /**\n     * @param {PeerChannel} signalChannel\n     * @returns {void}\n     */\n    deleteRoute(signalChannel) {\n        this._routes.remove(signalChannel); // maps to same hashCode\n        if (this._bestRoute && this._bestRoute.signalChannel.equals(signalChannel)) {\n            this.updateBestRoute();\n        }\n    }\n\n    /**\n     * @returns {void}\n     */\n    deleteAllRoutes() {\n        this._bestRoute = null;\n        this._routes = new HashSet();\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    hasRoute() {\n        return this._routes.length > 0;\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    updateBestRoute() {\n        let bestRoute = null;\n        // Choose the route with minimal distance and maximal timestamp.\n        for (const route of this._routes.values()) {\n            if (bestRoute === null || route.score > bestRoute.score\n                || (route.score === bestRoute.score && route.timestamp > bestRoute.timestamp)) {\n\n                bestRoute = route;\n            }\n        }\n        this._bestRoute = bestRoute;\n        if (this._bestRoute) {\n            this.peerAddress.distance = this._bestRoute.distance;\n        } else {\n            this.peerAddress.distance = PeerAddressBook.MAX_DISTANCE + 1;\n        }\n    }\n\n    /**\n     * @param {PeerAddressState|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof PeerAddressState\n            && this.peerAddress.equals(o.peerAddress);\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this.peerAddress.hashCode();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `PeerAddressState{peerAddress=${this.peerAddress}, state=${this.state}, `\n            + `lastConnected=${this.lastConnected}, failedAttempts=${this.failedAttempts}, `\n            + `bannedUntil=${this.bannedUntil}}`;\n    }\n}\nClass.register(SignalRouter);\n\nclass SignalRoute {\n    /**\n     * @param {PeerChannel} signalChannel\n     * @param {number} distance\n     * @param {number} timestamp\n     */\n    constructor(signalChannel, distance, timestamp) {\n        this.failedAttempts = 0;\n        this.timestamp = timestamp;\n        this._signalChannel = signalChannel;\n        this._distance = distance;\n    }\n\n    /** @type {PeerChannel} */\n    get signalChannel() {\n        return this._signalChannel;\n    }\n\n    /** @type {number} */\n    get distance() {\n        return this._distance;\n    }\n\n    /** @type {number} */\n    get score() {\n        return ((PeerAddressBook.MAX_DISTANCE - this._distance) / 2) * (1 - (this.failedAttempts / PeerAddressBook.MAX_FAILED_ATTEMPTS_RTC));\n    }\n\n    /**\n     * @param {SignalRoute} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof SignalRoute\n            && this._signalChannel.equals(o._signalChannel);\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this._signalChannel.hashCode();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `SignalRoute{signalChannel=${this._signalChannel}, distance=${this._distance}, timestamp=${this.timestamp}, failedAttempts=${this.failedAttempts}}`;\n    }\n}\nClass.register(SignalRoute);\n","class PeerAddressBook extends Observable {\n    /**\n     * @constructor\n     * @param {NetworkConfig} netconfig\n     */\n    constructor(netconfig) {\n        super();\n\n        /**\n         * @type {NetworkConfig}\n         * @private\n         */\n        this._networkConfig = netconfig;\n\n        /**\n         * Set of PeerAddressStates of all peerAddresses we know.\n         * @type {HashSet.<PeerAddressState>}\n         * @private\n         */\n        this._store = new HashSet();\n\n        /**\n         * Map from peerIds to RTC peerAddresses.\n         * @type {HashMap.<PeerId,PeerAddressState>}\n         * @private\n         */\n        this._stateByPeerId = new HashMap();\n\n        /**\n         * @type {HashMap.<NetAddress,Set.<PeerAddressState>>}\n         * @private\n         */\n        this._statesByNetAddress = new HashMap();\n\n        // Init seed peers.\n        this.add(/*channel*/ null, GenesisConfig.SEED_PEERS);\n\n        // Setup housekeeping interval.\n        setInterval(() => this._housekeeping(), PeerAddressBook.HOUSEKEEPING_INTERVAL);\n    }\n\n    /**\n     * @returns {Array.<PeerAddressState>}\n     */\n    values() {\n        return this._store.values();\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {?PeerAddressState}\n     * @private\n     */\n    _get(peerAddress) {\n        if (peerAddress instanceof WsPeerAddress) {\n            const localPeerAddress = this._store.get(peerAddress.withoutId());\n            if (localPeerAddress) return localPeerAddress;\n        }\n        return this._store.get(peerAddress);\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {?PeerAddressState}\n     */\n    getState(peerAddress) {\n        return this._get(peerAddress);\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {PeerAddress|null}\n     */\n    get(peerAddress) {\n        /** @type {PeerAddressState} */\n        const peerAddressState = this._get(peerAddress);\n        return peerAddressState ? peerAddressState.peerAddress : null;\n    }\n\n    /**\n     * @param {PeerId} peerId\n     * @returns {PeerAddress|null}\n     */\n    getByPeerId(peerId) {\n        /** @type {PeerAddressState} */\n        const peerAddressState = this._stateByPeerId.get(peerId);\n        return peerAddressState ? peerAddressState.peerAddress : null;\n    }\n\n    /**\n     * @param {PeerId} peerId\n     * @returns {PeerChannel}\n     */\n    getChannelByPeerId(peerId) {\n        const peerAddressState = this._stateByPeerId.get(peerId);\n        if (peerAddressState && peerAddressState.signalRouter.bestRoute) {\n            return peerAddressState.signalRouter.bestRoute.signalChannel;\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} protocolMask\n     * @param {number} serviceMask\n     * @param {number} maxAddresses\n     * @returns {Array.<PeerAddress>}\n     */\n    query(protocolMask, serviceMask, maxAddresses = 1000) {\n        const addressStates = this._store.values();\n        const numAddresses = addressStates.length;\n\n        // Pick a random start index.\n        const index = Math.floor(Math.random() * numAddresses);\n\n        // XXX inefficient linear scan\n        const now = Date.now();\n        const addresses = [];\n        for (let i = 0; i < numAddresses; i++) {\n            const idx = (index + i) % numAddresses;\n            const peerAddressState = addressStates[idx];\n\n            // Never return banned or failed addresses.\n            if (peerAddressState.state === PeerAddressState.BANNED\n                    || peerAddressState.state === PeerAddressState.FAILED) {\n                continue;\n            }\n\n            // Never return seed peers.\n            const address = peerAddressState.peerAddress;\n            if (address.isSeed()) {\n                continue;\n            }\n\n            // Only return addresses matching the protocol mask.\n            if ((address.protocol & protocolMask) === 0) {\n                continue;\n            }\n\n            // Only return addresses matching the service mask.\n            if ((address.services & serviceMask) === 0) {\n                continue;\n            }\n\n            // Update timestamp for connected peers.\n            if (peerAddressState.state === PeerAddressState.ESTABLISHED) {\n                // Also update timestamp for RTC connections\n                if (peerAddressState.signalRouter.bestRoute) {\n                    peerAddressState.signalRouter.bestRoute.timestamp = now;\n                }\n            }\n\n            // Never return addresses that are too old.\n            if (address.exceedsAge()) {\n                continue;\n            }\n\n            // Return this address.\n            addresses.push(address);\n\n            // Stop if we have collected maxAddresses.\n            if (addresses.length >= maxAddresses) {\n                break;\n            }\n        }\n        return addresses;\n    }\n\n    /**\n     * @param {PeerChannel} channel\n     * @param {PeerAddress|Array.<PeerAddress>} arg\n     * @fires PeerAddressBook#added\n     */\n    add(channel, arg) {\n        const peerAddresses = Array.isArray(arg) ? arg : [arg];\n        const newAddresses = [];\n\n        for (const addr of peerAddresses) {\n            if (this._add(channel, addr)) {\n                newAddresses.push(addr);\n            }\n        }\n\n        // Tell listeners that we learned new addresses.\n        if (newAddresses.length) {\n            this.fire('added', newAddresses, this);\n        }\n    }\n\n    /**\n     * @param {PeerChannel} channel\n     * @param {PeerAddress|RtcPeerAddress} peerAddress\n     * @returns {boolean}\n     * @private\n     */\n    _add(channel, peerAddress) {\n        // Max book size reached\n        if (this._store.length >= PeerAddressBook.MAX_SIZE) {\n            return false;\n        }\n\n        // Ignore our own address.\n        if (this._networkConfig.peerAddress.equals(peerAddress)) {\n            return false;\n        }\n\n        // Ignore address if it is too old.\n        // Special case: allow seed addresses (timestamp == 0) via null channel.\n        if (channel && peerAddress.exceedsAge()) {\n            Log.d(PeerAddressBook, `Ignoring address ${peerAddress} - too old (${new Date(peerAddress.timestamp)})`);\n            return false;\n        }\n\n        // Ignore address if its timestamp is too far in the future.\n        if (peerAddress.timestamp > Date.now() + PeerAddressBook.MAX_TIMESTAMP_DRIFT) {\n            Log.d(PeerAddressBook, `Ignoring addresses ${peerAddress} - timestamp in the future`);\n            return false;\n        }\n\n        // Increment distance values of RTC addresses.\n        if (peerAddress.protocol === Protocol.RTC) {\n            peerAddress.distance++;\n\n            // Ignore address if it exceeds max distance.\n            if (peerAddress.distance > PeerAddressBook.MAX_DISTANCE) {\n                Log.d(PeerAddressBook, `Ignoring address ${peerAddress} - max distance exceeded`);\n                // Drop any route to this peer over the current channel. This may prevent loops.\n                const peerAddressState = this._get(peerAddress);\n                if (peerAddressState) {\n                    peerAddressState.signalRouter.deleteRoute(channel);\n                }\n                return false;\n            }\n        }\n\n        // Get the (reliable) netAddress of the peer that sent us this address.\n        const netAddress = channel && channel.netAddress && channel.netAddress.reliable ? channel.netAddress : null;\n\n        // Check if we already know this address.\n        let peerAddressState = this._get(peerAddress);\n        let knownAddress = null;\n        let changed = false;\n        if (peerAddressState) {\n            knownAddress = peerAddressState.peerAddress;\n\n            // Ignore address if it is banned.\n            if (peerAddressState.state === PeerAddressState.BANNED) {\n                return false;\n            }\n\n            // Never update seed peers.\n            if (knownAddress.isSeed()) {\n                return false;\n            }\n\n            // Never erase NetAddresses and never overwrite reliable addresses.\n            if (knownAddress.netAddress && (!peerAddress.netAddress || knownAddress.netAddress.reliable)) {\n                peerAddress.netAddress = knownAddress.netAddress;\n            }\n        } else {\n            // If we know the IP address of the sender, check that we don't exceed the maximum number of addresses per IP.\n            if (netAddress) {\n                const states = this._statesByNetAddress.get(netAddress);\n                if (states && states.size >= PeerAddressBook.MAX_SIZE_PER_IP) {\n                    Log.d(PeerAddressBook, `Ignoring address ${peerAddress} - max count per IP ${netAddress} reached`);\n                    return false;\n                }\n            }\n\n            // Add new peerAddressState.\n            peerAddressState = new PeerAddressState(peerAddress);\n            this._store.add(peerAddressState);\n            if (peerAddress.peerId) {\n                // Index by peerId.\n                this._stateByPeerId.put(peerAddress.peerId, peerAddressState);\n            }\n            changed = true;\n        }\n\n        // Update address if we do not know this address or it has a more recent timestamp.\n        if (!knownAddress || knownAddress.timestamp < peerAddress.timestamp) {\n            peerAddressState.peerAddress = peerAddress;\n            changed = true;\n        }\n\n        // Add route.\n        if (peerAddress.protocol === Protocol.RTC) {\n            changed = peerAddressState.signalRouter.addRoute(channel, peerAddress.distance, peerAddress.timestamp) || changed;\n        }\n\n        // Track which IP address send us this address.\n        if (netAddress) {\n            peerAddressState.addedBy.add(channel.netAddress);\n\n            let states = this._statesByNetAddress.get(channel.netAddress);\n            if (!states) {\n                states = new Set();\n                this._statesByNetAddress.put(channel.netAddress, states);\n            }\n            states.add(peerAddressState);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Called when a connection to this peerAddress has been established.\n     * The connection might have been initiated by the other peer, so address\n     * may not be known previously.\n     * If it is already known, it has been updated by a previous version message.\n     * @param {PeerChannel} channel\n     * @param {PeerAddress|RtcPeerAddress} peerAddress\n     * @returns {void}\n     */\n    established(channel, peerAddress) {\n        let peerAddressState = this._get(peerAddress);\n        \n        if (!peerAddressState) {\n            peerAddressState = new PeerAddressState(peerAddress);\n\n            this._store.add(peerAddressState);\n        }\n\n        if (peerAddress.peerId) {\n            this._stateByPeerId.put(peerAddress.peerId, peerAddressState);\n        }\n\n        peerAddressState.state = PeerAddressState.ESTABLISHED;\n        peerAddressState.lastConnected = Date.now();\n        peerAddressState.failedAttempts = 0;\n        peerAddressState.bannedUntil = -1;\n        peerAddressState.banBackoff = PeerAddressBook.INITIAL_FAILED_BACKOFF;\n\n        if (!peerAddressState.peerAddress.isSeed()) {\n            peerAddressState.peerAddress = peerAddress;\n        }\n\n        // Add route.\n        if (peerAddress.protocol === Protocol.RTC) {\n            peerAddressState.signalRouter.addRoute(channel, peerAddress.distance, peerAddress.timestamp);\n        }\n    }\n\n    /**\n     * Called when a connection to this peerAddress is closed.\n     * @param {PeerChannel} channel\n     * @param {PeerAddress} peerAddress\n     * @param {number|null} type\n     * @returns {void}\n     */\n    close(channel, peerAddress, type = null) {\n        const peerAddressState = this._get(peerAddress);\n        if (!peerAddressState) {\n            return;\n        }\n\n        // register the type of disconnection\n        peerAddressState.close(type);\n\n        // Delete all addresses that were signalable over the disconnected peer.\n        if (channel) {\n            this._removeBySignalChannel(channel);\n        }\n\n        if (CloseType.isBanningType(type)){\n            this._ban(peerAddress);\n        }\n        else if (CloseType.isFailingType(type)) {\n            peerAddressState.failedAttempts++;\n\n            if (peerAddressState.failedAttempts >= peerAddressState.maxFailedAttempts) {\n                // Remove address only if we have tried the maximum number of backoffs.\n                if (peerAddressState.banBackoff >= PeerAddressBook.MAX_FAILED_BACKOFF) {\n                    this._remove(peerAddress);\n                } else {\n                    peerAddressState.bannedUntil = Date.now() + peerAddressState.banBackoff;\n                    peerAddressState.banBackoff = Math.min(PeerAddressBook.MAX_FAILED_BACKOFF, peerAddressState.banBackoff * 2);\n                }\n            }\n        }\n\n        // Immediately delete dumb addresses, since we cannot connect to those anyway.\n        if (peerAddress.protocol === Protocol.DUMB) {\n            this._remove(peerAddress);\n        }\n    }\n\n    /**\n     * Called when a message has been returned as unroutable.\n     * @param {PeerChannel} channel\n     * @param {PeerAddress} peerAddress\n     * @returns {void}\n     */\n    unroutable(channel, peerAddress) {\n        if (!peerAddress) {\n            return;\n        }\n\n        const peerAddressState = this._get(peerAddress);\n        if (!peerAddressState) {\n            return;\n        }\n\n        if (!peerAddressState.signalRouter.bestRoute || !peerAddressState.signalRouter.bestRoute.signalChannel.equals(channel)) {\n            Log.w(PeerAddressBook, `Got unroutable for ${peerAddress} on a channel other than the best route.`);\n            return;\n        }\n\n        peerAddressState.signalRouter.deleteBestRoute();\n        if (!peerAddressState.signalRouter.hasRoute()) {\n            this._remove(peerAddressState.peerAddress);\n        }\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @param {number} [duration] in milliseconds\n     * @returns {void}\n     * @private\n     */\n    _ban(peerAddress, duration = PeerAddressBook.DEFAULT_BAN_TIME) {\n        let peerAddressState = this._get(peerAddress);\n        if (!peerAddressState) {\n            peerAddressState = new PeerAddressState(peerAddress);\n            this._store.add(peerAddressState);\n        }\n\n        peerAddressState.state = PeerAddressState.BANNED;\n        peerAddressState.bannedUntil = Date.now() + duration;\n\n        // Drop all routes to this peer.\n        peerAddressState.signalRouter.deleteAllRoutes();\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {boolean}\n     */\n    isBanned(peerAddress) {\n        const peerAddressState = this._get(peerAddress);\n        return peerAddressState\n            && peerAddressState.state === PeerAddressState.BANNED\n            // XXX Never consider seed peers to be banned. This allows us to use\n            // the banning mechanism to prevent seed peers from being picked when\n            // they are down, but still allows recovering seed peers' inbound\n            // connections to succeed.\n            && !peerAddressState.peerAddress.isSeed();\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {void}\n     * @private\n     */\n    _remove(peerAddress) {\n        const peerAddressState = this._get(peerAddress);\n        if (!peerAddressState) {\n            return;\n        }\n\n        // Never delete seed addresses, ban them instead for a couple of minutes.\n        if (peerAddressState.peerAddress.isSeed()) {\n            this._ban(peerAddress, peerAddressState.banBackoff);\n            return;\n        }\n\n        // Delete from peerId index.\n        if (peerAddress.peerId) {\n            this._stateByPeerId.remove(peerAddress.peerId);\n        }\n\n        // Delete from netAddress index.\n        for (const netAddress of peerAddressState.addedBy) {\n            const states = this._statesByNetAddress.get(netAddress);\n            if (states) {\n                states.delete(peerAddressState);\n                if (states.size === 0) {\n                    this._statesByNetAddress.remove(netAddress);\n                }\n            }\n        }\n\n        // Don't delete bans.\n        if (peerAddressState.state === PeerAddressState.BANNED) {\n            return;\n        }\n\n        // Delete the address.\n        this._store.remove(peerAddress);\n    }\n\n    /**\n     * Delete all RTC-only routes that are signalable over the given peer.\n     * @param {PeerChannel} channel\n     * @returns {void}\n     * @private\n     */\n    _removeBySignalChannel(channel) {\n        // XXX inefficient linear scan\n        for (const peerAddressState of this._store.values()) {\n            if (peerAddressState.peerAddress.protocol === Protocol.RTC) {\n                peerAddressState.signalRouter.deleteRoute(channel);\n                if (!peerAddressState.signalRouter.hasRoute()) {\n                    this._remove(peerAddressState.peerAddress);\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _housekeeping() {\n        const now = Date.now();\n        const unbannedAddresses = [];\n\n        for (/** @type {PeerAddressState} */ const peerAddressState of this._store.values()) {\n            const addr = peerAddressState.peerAddress;\n\n            switch (peerAddressState.state) {\n                case PeerAddressState.NEW:\n                case PeerAddressState.TRIED:\n                case PeerAddressState.FAILED:\n                    // Delete all new peer addresses that are older than MAX_AGE.\n                    if (addr.exceedsAge()) {\n                        this._remove(addr);\n                        continue;\n                    }\n\n                    // Reset failed attempts after bannedUntil has expired.\n                    if (peerAddressState.state === PeerAddressState.FAILED\n                        && peerAddressState.failedAttempts >= peerAddressState.maxFailedAttempts\n                        && peerAddressState.bannedUntil > 0 && peerAddressState.bannedUntil <= now) {\n\n                        peerAddressState.bannedUntil = -1;\n                        peerAddressState.failedAttempts = 0;\n                        unbannedAddresses.push(addr);\n                    }\n\n                    break;\n\n                case PeerAddressState.BANNED:\n                    if (peerAddressState.bannedUntil <= now) {\n                        // Don't remove seed addresses, unban them.\n                        if (addr.isSeed()) {\n                            // Restore banned seed addresses to the NEW state.\n                            peerAddressState.state = PeerAddressState.NEW;\n                            peerAddressState.failedAttempts = 0;\n                            peerAddressState.bannedUntil = -1;\n                            unbannedAddresses.push(addr);\n                        } else {\n                            // Delete expires bans.\n                            this._store.remove(addr);\n                        }\n                    }\n                    break;\n\n                case PeerAddressState.ESTABLISHED:\n                    // Also update timestamp for RTC connections\n                    if (peerAddressState.signalRouter.bestRoute) {\n                        peerAddressState.signalRouter.bestRoute.timestamp = now;\n                    }\n                    break;\n\n                default:\n                    // TODO What about peers who are stuck connecting? Can this happen?\n                    // Do nothing for CONNECTING peers.\n            }\n        }\n\n        if (unbannedAddresses.length) {\n            this.fire('added', unbannedAddresses, this);\n        }\n    }\n\n    /** @type {number} */\n    get knownAddressesCount() {\n        return this._store.length;\n    }\n}\nPeerAddressBook.MAX_AGE_WEBSOCKET = 1000 * 60 * 30; // 30 minutes\nPeerAddressBook.MAX_AGE_WEBRTC = 1000 * 60 * 10; // 10 minutes\nPeerAddressBook.MAX_AGE_DUMB = 1000 * 60; // 1 minute\nPeerAddressBook.MAX_DISTANCE = 4;\nPeerAddressBook.MAX_FAILED_ATTEMPTS_WS = 3;\nPeerAddressBook.MAX_FAILED_ATTEMPTS_RTC = 2;\nPeerAddressBook.MAX_TIMESTAMP_DRIFT = 1000 * 60 * 10; // 10 minutes\nPeerAddressBook.HOUSEKEEPING_INTERVAL = 1000 * 60; // 1 minute\nPeerAddressBook.DEFAULT_BAN_TIME = 1000 * 60 * 10; // 10 minutes\nPeerAddressBook.INITIAL_FAILED_BACKOFF = 1000 * 30; // 30 seconds\nPeerAddressBook.MAX_FAILED_BACKOFF = 1000 * 60 * 10; // 10 minutes\nPeerAddressBook.MAX_SIZE = PlatformUtils.isBrowser() ? 15000 : 100000;\nPeerAddressBook.MAX_SIZE_PER_IP = 250;\nClass.register(PeerAddressBook);\n","class GenesisConfig {\n    static main() {\n        // TODO\n        GenesisConfig.init(GenesisConfig.CONFIGS['bounty']);\n    }\n\n    static test() {\n        // TODO\n        GenesisConfig.init(GenesisConfig.CONFIGS['bounty']);\n    }\n\n    static dev() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['dev']);\n    }\n\n    static bounty() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['bounty']);\n    }\n\n    /**\n     * @param {{NETWORK_ID:number,NETWORK_NAME:string,GENESIS_BLOCK:Block,GENESIS_ACCOUNTS:string,SEED_PEERS:Array.<PeerAddress>}} config\n     */\n    static init(config) {\n        if (GenesisConfig._config) throw new Error('GenesisConfig already initialized');\n        if (!config.NETWORK_ID) throw new Error('Config is missing network id');\n        if (!config.NETWORK_NAME) throw new Error('Config is missing database prefix');\n        if (!config.GENESIS_BLOCK) throw new Error('Config is missing genesis block');\n        if (!config.GENESIS_ACCOUNTS) throw new Error('Config is missing genesis accounts');\n        if (!config.SEED_PEERS) throw new Error('Config is missing seed peers');\n\n        GenesisConfig._config = config;\n    }\n\n    /**\n     * @type {number}\n     */\n    static get NETWORK_ID() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_ID;\n    }\n\n    /**\n     * @type {string}\n     */\n    static get NETWORK_NAME() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_NAME;\n    }\n\n    /**\n     * @type {Block}\n     */\n    static get GENESIS_BLOCK() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.GENESIS_BLOCK;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    static get GENESIS_HASH() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        if (!GenesisConfig._config.GENESIS_HASH) {\n            GenesisConfig._config.GENESIS_HASH = GenesisConfig._config.GENESIS_BLOCK.hash();\n        }\n        return GenesisConfig._config.GENESIS_HASH;\n    }\n\n    /**\n     * @type {string}\n     */\n    static get GENESIS_ACCOUNTS() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.GENESIS_ACCOUNTS;\n    }\n\n    /**\n     * @type {Array.<PeerAddress>}\n     */\n    static get SEED_PEERS() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.SEED_PEERS;\n    }\n}\nClass.register(GenesisConfig);\n\nGenesisConfig.CONFIGS = {\n    // TODO 'main': { }\n    // TODO 'test': { }\n\n    'dev': {\n        NETWORK_ID: 2,\n        NETWORK_NAME: 'dev',\n        SEED_PEERS: [\n            WsPeerAddress.seed('dev.nimiq-network.com', 8080, 'e65e39616662f2c16d62dc08915e5a1d104619db8c2b9cf9b389f96c8dce9837')\n        ],\n        GENESIS_BLOCK: new Block(\n            new BlockHeader(\n                new Hash(null),\n                new Hash(null),\n                Hash.fromBase64('JvMr9c9l2m8HWNdFAGTEastKH+aDZvln9EopXelhVIg='),\n                Hash.fromBase64('1t/Zm91tN0p178+ePcxyR5bPxvC6jFLskqiidFFO3wY='),\n                BlockUtils.difficultyToCompact(1),\n                1,\n                1522338300,\n                12432,\n                BlockHeader.Version.V1),\n            new BlockInterlink([], new Hash(null)),\n            new BlockBody(Address.fromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA='), [], BufferUtils.fromBase64('RGV2TmV0'))\n        ),\n        GENESIS_ACCOUNTS:\n            'AGTHyaGKKYtMW9zm81Nw2UYCIWr2bQAAAAOO9hgWyh/5Ezv+1Ldw9Oid2zwaY+LjRXAjAQAAAdpxepGo' +\n            'TVTy25Dj9WOZXg1SAyoCtCmEkgYAAAABAAAWgAAAAdpxepGoAAAB2nF6kagxFAXrnWawCibXmNIocpEN' +\n            'bY2M4QAAAACPgR32bdaFsm6G5Bg4H96UDFtJMFclfA8rAQAAA+Z8YTcn7eJ7xhfBV9k79a2bDLpb0SWE' +\n            'gSIAAAABAAALQAAAAKZqEDPcAAAD5nxhNyfiENwK3NNQGB6fxKS62kvoApoe4gEAAAKLbf59cM8P40JX' +\n            'yIKzSkr749mOqp5n1/ruAAAAAQAAC0AAAABsklUU6AAAAott/n1wZs9N9eWbNeUSLDy5qbhe6CW7Q94B' +\n            'AAADLsSIL0WLcA6Nt5Ji+Pu2j2p4wJgN8lpIVwAAAAEAABaAAAADLsSIL0UAAAMuxIgvRXGosRRWBkji' +\n            'IyWOFAzp3WZYGhQvAAAAAN+ByO6LKclRKAD8iueyAPGY/ZnTIbM5CbUBAAAAMXEUVZ+h9Kb5BH+lzQTK' +\n            'HdVMiFfmRsJBWAAAAAEAAAtAAAAACD2DY5sAAAAxcRRVn+hB476I0A6qQDjCSzzvumwsQHf9AQAAA03B' +\n            '6LO6vHPfpZtbnDWtPlN7WlO0l+aw1KIAAAABAAALQAAAAIz1psifAAADTcHos7qSQrji3cQRvdhZEyJa' +\n            'a9OF/pUTGwEAAAEJawwO04GTmnyPT2hcnepKTWwqUe3rBlVwAAAAAQAAC0AAAAAsPIICeQAAAQlrDA7T' +\n            'Kd6Wv+nDz7vTAMDCu39sALbKiawBAAABJAr6aFtkUf/rcih9aUVHVigY+8UIy2/+QQAAAAEAAAtAAAAA' +\n            'MKx/EWUAAAEkCvpoW4oaIYhRvV3BULo9azzYYyKeeCxrAQAAA03cDnJSDjUiPbhnHIY/7aooMW/Y0Epe' +\n            'T58AAAABAAAWgAAAA03cDnJSAAADTdwOclKFF7HkvjRHt0g5nwPzP59X9Uge9wEAAAGGEgl7kg2aSBjn' +\n            '4A5Od5+0Lh5sBpm6dar7AAAAAQAAFoAAAAGGEgl7kgAAAYYSCXuSk87IwlS6e4YT+koCY6/lL28D3sYB' +\n            'AAACjIEYqGyFuGHIpbQDcibbuM8kkiHguhEKAwAAAAEAABaAAAACjIEYqGwAAAKMgRiobCUh+XSo0plb' +\n            '6NrVoCXHLwt7XzNZAAAAA1fLvw67icCbQBBXoglPtPMRkeln1StoiSYAAAACFc2B9ywrb3evyXkRn2lI' +\n            'r99+cUgwAipdwwEAAAPxDMrFsmKBEu04Bg6LEqHvrJj2ewKnZ3qmAAAAAQAAFoAAAAPxDMrFsgAAA/EM' +\n            'ysWyc3iG9qZDzL/uCLJEdhmwKaAHgIMBAAACPUMNm/Uu1vSoi1gBseNjIp1mp154Sw79UAAAAAEAABaA' +\n            'AAACPUMNm/UAAAI9Qw2b9YcCc88Iyrx0NUbMZOK3rJdc/ggmAQAAAnsptOZZhrhJa+5Z89rK+wkxjzUt' +\n            'hAHVfDoAAAABAAAWgAAAAnsptOZZAAACeym05lkhopvGoZgAsJ38XeT+KI6VFZ6HVQEAAAKZNR0cZ3N/' +\n            'V/VlAJ1g1vBkidPGJBfIBQZcAAAAAQAAC0AAAABu3i+EvAAAApk1HRxnwWGEqi7rwr6bZ9df8Uhr5cG3' +\n            'nAUAAAAB+ett5xJRyHYmu80aIhgssCKeD9KYKNlI+gEAAAHcmaAZJKAMxD+5u1O+u5ALn65VT4HGDIxw' +\n            'AAAAAQAAC0AAAABPbvAEMQAAAdyZoBkkTOyyimPzT9JghHBHVSBRqHTY6qMBAAABMiMv3v3Fqy0Rq/yO' +\n            'BHu3RlPy/l121QrKAwAAAAEAABaAAAABMiMv3v0AAAEyIy/e/TyTgfm1ATlfv11vqgZ2mGgLp5I3AAAA' +\n            'BB6+ivcGqPmcXVPR6jFzANQ/oHcfYAbWLCAAAAACEUzY24RQtw7fskPYnAuOCrVYvYWjy/Sq2QEAAAA1' +\n            'ejIu8T103OAjQ6dOO7R1qdl9voiJTyMzAAAAAQAAC0AAAAAI6bMH0wAAADV6Mi7xMF78LO+AmQt47Q2F' +\n            '8lJOtFmP+8sBAAADIrN3lvTLTPW10LenULSqINB8dhRMCjZoqgAAAAEAAAtAAAAAhciT7n4AAAMis3eW' +\n            '9PfpWIeCkAqinftTYf+jyT/iAxE2AAAAACtXQrrG1ENyC6MF0IZJhxjw1atz1xqHhPwBAAAAvi3c14rV' +\n            'Vkylvnz2LXDSnAd0Ap9o6EcHkwAAAAEAAAtAAAAAH7JPeUIAAAC+LdzXityvfksBfLlWNu3IzdEXOAKK' +\n            'juLqAAAAAWKGyagmDA2tPlgh/4bnCAHEUTy6X43XlxYAAAABpZApuaLoMq3LP2zjV1NWvIyyZ9WXhbjK' +\n            'rgAAAAOSnw31GpWdLCHuiuqqRiU+c6/7QpNNu415AQAAA/PO43ur9pEsqZCx+ctQ0uLZPiPcQtZ4AtoA' +\n            'AAABAAALQAAAAKiiez9IAAAD887je6ty7kyqfDlYpexa6zO61+OPc7PemgEAAAFVhN0jTzdIVM9Xza9g' +\n            'EHJEU/NTXLDe1iXFAAAAAQAAC0AAAAA463owjgAAAVWE3SNP895JOb/wZK4ieF/UWFZvxGiH5yMAAAAB' +\n            'WtMtyhV1iFBda1GZC0OkOSwt9AADUTkavAEAAAGLTWokGsi+QGXG5VciJh0XKhgY2Ffw3nFhAAAAAQAA' +\n            'C0AAAABB4jxbWgAAAYtNaiQaxyj4UkPRXmdB4RUJOmY0/+DGi2sAAAABmtptM00N3PW8TiZSDGq75w65' +\n            'ENAqIvV17gEAAAPVauIkr0eeRNW8s9uvLImxBON8OZc+nrJLAAAAAQAAC0AAAACjkdBbcwAAA9Vq4iSv' +\n            'LMTqFpsInyV7LXX07AVlLB4LwK8AAAACVOJQdF94lWhUD0pOtwPsSpOcOfVM4c3lYAEAAAJZhQlPED5v' +\n            'd70C9VJcR9E0/6kVRjND3chpAAAAAQAAC0AAAABkQNbigwAAAlmFCU8Q5+bT5k92M+EdyU87fjVCIOHg' +\n            'JvQBAAABLAh445G4HY/gCBp8Ww86DjZzqu2656S1WwAAAAEAABaAAAABLAh445EAAAEsCHjjkfGu/x1G' +\n            'ALyflu5s6H/RjA0uF2FJAQAAAfUQ1yISxqLt9R+tekR4gPOI6gjm8GCCewkAAAABAAAWgAAAAfUQ1yIS' +\n            'AAAB9RDXIhLmoPJPmFOfClWZtRtz8SIHZV+RYgEAAAGb6NZw6ik9LhWvYkCsjo753C4xml4yhuLkAAAA' +\n            'AQAAFoAAAAGb6NZw6gAAAZvo1nDq0lWfSarsXeQhGik+Wy00hFQPYNIBAAAC4wlfg1nMx6ncdUeIXQp/' +\n            'MHyEH0Q1GZoNiAAAAAEAAAtAAAAAeyw6leUAAALjCV+DWRJzvcMi6fQ+RMgH4p3thxoZkT3KAQAAAplo' +\n            'xifaQHmEokpWgPZUy2JkLz0fIsjxIz4AAAABAAALQAAAAG7my7FPAAACmWjGJ9ojMPo7C9y8Ib/ncXPh' +\n            'wUC60bh5vwAAAACNnQv2v4inBpnu2xVZInd7VAlMXKKdYgukAQAAApBN6CyLt+TdIz09e58DxUKFW4PK' +\n            '6+lckmcAAAABAAALQAAAAG1iUVzCAAACkE3oLIs/W2vCON/csGZ+BrXXzOfPf3+nwgAAAABdcEFzteZa' +\n            'aSm87wyRZwS2rvearhLJb0wSAQAAA5l3BvfWMZXszk+sOGOzYCH6Scso0530ACEAAAABAAAWgAAAA5l3' +\n            'BvfWAAADmXcG99Yn1+CSxVm0b9VEmdXSPU9MLZ6euQEAAACc7CZPBZWabWnc3dRvBQIYMyDgLCyx2AtM' +\n            'AAAAAQAAC0AAAAAaJ1u31wAAAJzsJk8FMsv+RNrEAeMhkxQQ7swlQm/MWcsBAAAEFqz9ZzfxBC8ZD/h5' +\n            'XbP5/TW158EyNFjtDwAAAAEAAAtAAAAArnIqO98AAAQWrP1nN9WW44AbwcH3rC9B0LDZEGH/6LGWAAAA' +\n            'A0/mTvNyq+e4MxN7UI6LWMDrHl4bIjVbRqkBAAAADwRE4OfGbkb1M4LvJTsug5Guwv4UipUglQAAAAEA' +\n            'AAtAAAAAAoC2JXwAAAAPBETg5xXn4XxmjRL8H7qyrMKtPOQ68d9gAQAAA+kpJjZRO8ds5r5Z15bsaAvU' +\n            'z1Hi+igym+wAAAABAAALQAAAAKbcMQkOAAAD6SkmNlFtNRkkOze3mxqbEGn8LmugDYG9AAEAAAIeKgo/' +\n            '6Q3VK9Fh4+5mvtU/qnCGKcL5eZe6AAAAAQAAC0AAAABaXFcKpwAAAh4qCj/pVkOr82XeobTRYSqMwBit' +\n            '+DK26L0AAAADExdE1KGweTGwMNtOUr0mkTMuJZPdUx/lFgEAAAIYnmRDO5Us7NZLbPKbfSqFz9Qcz12x' +\n            'p7EIAAAAAQAAC0AAAABZb7tgigAAAhieZEM7QJBbpsW5TySU3AOaRq0w6StqDbkBAAAAQYtUtY+neTkG' +\n            'p0FX3yBWlI9VfXL9rY2T0AAAAAEAABaAAAAAQYtUtY8AAABBi1S1j6CfjxyppAST/5j+yNsnpZ4mb+LM' +\n            'AQAAAwd7a4MeZabvmCauqJUxc/dnJt9Qdbu0C+sAAAABAAALQAAAAIE/PJXbAAADB3trgx6XwCRFCATy' +\n            '6PT5xzl/tTynPq+pVwEAAAP3RVI223cMsae0V7OPJkgsuqVbHiDuSfwpAAAAAQAAFoAAAAP3RVI22wAA' +\n            'A/dFUjbbqciNZ2beiMn+kVcprmWvCo0qNNYAAAAAp/x8AiuP0gOSmGXc+PyW+ma3l4h07YsKpAEAAAKh' +\n            'uMUSlEiZItBpeLfj6hIFvBR6t0/1Zyh2AAAAAQAAFoAAAAKhuMUSlAAAAqG4xRKUMbR0l40dlxXJiTEF' +\n            'uHD29zmRDB8BAAAC0qDOUYnujJP0QRa7dQ2AJ0h1cIE0IkEehgAAAAEAABaAAAAC0qDOUYkAAALSoM5R' +\n            'iepA5phgkMYQo9vghvEMs6W2EXiXAQAAAsKfyTSX6ZAOU+orXNxOz0wdBuAqVHbOiV0AAAABAAAWgAAA' +\n            'AsKfyTSXAAACwp/JNJcBVoZ5gIarGpvmG5G4a1OXW3821QEAAANETmvLWBcBCeyCAd6ZLaV8GnQ8Da54' +\n            'gAyrAAAAAQAAFoAAAANETmvLWAAAA0ROa8tY+JrQTn9k06PB7If9N0CfYchk/C0BAAACrhSVuS2ezk3S' +\n            'ZrOTLlI6dWuGTC76mwagfAAAAAEAAAtAAAAAcljDnt0AAAKuFJW5LYlQAlhiQPsfkWnHfepiRbygaVcw' +\n            'AQAAAbh/Gb8NJqE45Cy7l+FzX6ekgF3R/5Mtr+4AAAABAAAWgAAAAbh/Gb8NAAABuH8Zvw0P094GHr/6' +\n            'AsV1AwxF7c61Qq2RSAAAAAJQwqsff2pLw8MLHSdj/TYI/vua9S1qFloyAQAAAZMy1gvR0p1S/3oRAOZ8' +\n            'nDanLv73M3Fv150AAAABAAAWgAAAAZMy1gvRAAABkzLWC9F4DlJe82PbL79kI4++HW6Glhr8OAEAAAAc' +\n            'Kk11+SFNxI4R9S/ebQHQO2V5jHpCMS1hAAAAAQAAC0AAAAAEsbeTqgAAABwqTXX5sSvBMuNoUTbS19Um' +\n            'etiaDp8t/vsBAAABkaKnSL2M6hWXx8/DUkVUtGxAV3Xd9gtcfAAAAAEAABaAAAABkaKnSL0AAAGRoqdI' +\n            'vTi9K8WL24O90wK1LIuwvNvkRR9iAQAAAQ5MDkLw77e4PHxSapULV3EHaCWnRV0ELfQAAAABAAAWgAAA' +\n            'AQ5MDkLwAAABDkwOQvB45gZiCw5zStBMXeShepM6iLltkgAAAAHfl0LN8u7wC1h8uhyRIY5s1I1gZPfF' +\n            '1qn+AAAAA8xCKTupigAMUEItvNB1XfJi5d20TA4oijkBAAABheDAya/Vr7/+aeXTjjrLIAY/8G9+ps7j' +\n            'DAAAAAEAAAtAAAAAQPrKzEgAAAGF4MDJrySGgRI77yf0Ksrs7U5YU1v43lFrAAAAAkrmY2OrF77xscYd' +\n            'oQqK/Kr8Sc5nR/w91goBAAADoIlPx03C0gM7wMgvzaUglns4BJzvq8fWUQAAAAEAABaAAAADoIlPx00A' +\n            'AAOgiU/HTR059QJNJ6egySnjQ5ssU/g987fwAQAAAOSjwgS4txd+4xsScIOZ2jJ8gm6PFGb4IPcAAAAB' +\n            'AAALQAAAACYbSwDKAAAA5KPCBLgEEiPQ5L80JKvaQkZUqVTQVFocRQEAAAAgrZivoOKiOJFwOp94dsp2' +\n            'dceiRnJRp2BDAAAAAQAAC0AAAAAFckQdRgAAACCtmK+gCouuvquET79GQpJvlDjxodZmWlIBAAADdflm' +\n            'IVtOxwzhUy9DP2U/1dg443ziW+44fAAAAAEAAAtAAAAAk6mRBZAAAAN1+WYhW7W78iEqRWPDm9L0+nV1' +\n            'sgxvC7aAAAAAAnjT5GbwylWQC2KwtxExw7D10y49vKcooJ0AAAADf6VG1QRSW6oEqsV40bK3bkmqzoXd' +\n            'ot6i4gEAAAEy6r22pwWExn95sjo6xoCdI0e/eYKD/GftAAAAAQAAFoAAAAEy6r22pwAAATLqvbanD5Iv' +\n            '+2lMo8wGu38cLQnhQWGpZEoBAAAB3Wk4Pnb/keSDfMbiKmBGXEB/R75Sm81yZQAAAAEAABaAAAAB3Wk4' +\n            'PnYAAAHdaTg+dlD3NG/nQX9YueouG07G0GevJx2cAQAAASDQ25ZqoHTmauLeC1uxbbJc9puYK7ibUGQA' +\n            'AAABAAAWgAAAASDQ25ZqAAABINDblmrDxe/R9ACThqXry6xBd28gwzmBbAAAAAA3JtwFy7gOad2nnAuf' +\n            '4c9a2JDr8h65bBqxAQAAApIfgNiYaB9nad26DD093xiYPxcQq2fLUB0AAAABAAALQAAAAG2v6s7EAAAC' +\n            'kh+A2JhP0wpVAIQo7aaYGJz1q+BQ/JvaAQEAAAELaF0K71KfkeqRPM7T8QipPJ8FVXyve5YUAAAAAQAA' +\n            'FoAAAAELaF0K7wAAAQtoXQrvJ/jj56GUsaHxN9mDMXP5RsX08l8AAAADE1QMtlVNL/Tr3lfTfZGZ4SRd' +\n            '7Ko1EbsleAEAAAKN3l0bwt3bQiKYf+QXt0o8YjRC4DeZwDgRAAAAAQAAC0AAAABs+mTZ9gAAAo3eXRvC' +\n            'VJEHZ0qy+F1pvTVulg0P1CdMCToAAAACfGL6o0cNbRO/RL5C/tljM1b4X9GibgKJhgEAAAPEPtTYFS70' +\n            'hIR9vGG5Bss2KK0fyL/Q7ZfwAAAAAQAAFoAAAAPEPtTYFQAAA8Q+1NgVjxMxbNwbSqmxFnDEgA2J2Io6' +\n            'Q14AAAAB0Fl8OgAV2mEYfjb3jRucPYtRg9szNOY5LAEAAADjj9fBEDJIdjKxmX0e1aiPEla5rtes80Lh' +\n            'AAAAAQAAC0AAAAAl7U6gLgAAAOOP18EQBkYuU4gvkHTrVpgVrymqlmeIV3cBAAAA2NjC3v910c484H8c' +\n            'iZmr9lYIo66SCeFyQwAAAAEAAAtAAAAAJCQgeoAAAADY2MLe/1PF67K3QcuQJ+m4P7tOiIrVmdFhAQAA' +\n            'AukCHDJUZrnHmLoVULR6r8HDBaygNH/gNE8AAAABAAAWgAAAAukCHDJUAAAC6QIcMlS4diPveIAR8ciq' +\n            'f6WfLVCvxGQ1MQAAAAJlQHbfixmoGC8hAefMDjnblFS989zLCxhKAQAAA+519/AhViOdiXDAAdtc5/ue' +\n            'TM0syon8VYoAAAABAAAWgAAAA+519/AhAAAD7nX38CH0clyiOijE/jV+sOwm6ZB5i5GvYQEAAAGy/GNM' +\n            'TQyzah076TeqMT+jyMJhGgese8vbAAAAAQAAC0AAAABIf2XiDQAAAbL8Y0xNr/JNzMvTszgQcqMcDBEz' +\n            'tfKONfgAAAARpIlShW0='\n    },\n\n    'bounty': {\n        NETWORK_ID: 3,\n        NETWORK_NAME: 'bounty',\n        SEED_PEERS: [\n            WsPeerAddress.seed('bug-bounty1.nimiq-network.com', 8080, '7e825872ee12a71bda50cba9f230c760c84ee50eef0a3e435467e8d5307c0b4e'),\n            WsPeerAddress.seed('bug-bounty2.nimiq-network.com', 8080, 'ea876175c8b693c0db38b7c17d66e9c510020fceb4634f04e281af30438f8787'),\n            WsPeerAddress.seed('bug-bounty3.nimiq-network.com', 8080, '5c0d5d801e85ebd42f25a45b2cb7f3b39b9ce14002d4662f5ed0cd79ce25165a')\n        ],\n        GENESIS_BLOCK: new Block(\n            new BlockHeader(\n                new Hash(null),\n                new Hash(null),\n                Hash.fromBase64('nPcJa/7i0KYsiPQ8FPOgvLYgpP3m05UMwPfIPJAdAvI='),\n                Hash.fromBase64('sXZsIZDV40vD7NDdrnSk2tOsPMKKit/vH0xvz1RXmQo='),\n                BlockUtils.difficultyToCompact(1),\n                1,\n                1522338300,\n                67058,\n                BlockHeader.Version.V1),\n            new BlockInterlink([], new Hash(null)),\n            new BlockBody(Address.fromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA='), [], BufferUtils.fromBase64('Qm91bnR5TmV0'))\n        ),\n        GENESIS_ACCOUNTS:\n            'AGROsO8mYpEUdwzEGQ0O6vnlpVKChwEAAAPgjSSR4LB4qqj8ygd5C6xKRfXafhN7T5fmAAAAAQAAC0AA' +\n            'AAClbNttpgAAA+CNJJHgvj7dWIwWkgYczXTXDMe9WDwe7PIAAAABuvV0Xzr7uF1SMm0j0okevxuwhMCF' +\n            'RbOerwEAAAAzj75naNS5u7vg6bLNCTc+tc++nDMzSMxcAAAAAQAAFoAAAAAzj75naAAAADOPvmdoLCur' +\n            'wI3RXio3O082uOONNCaOL5EAAAAArvAV+ORfFg1aBKGWGk19uDxpWkV+fiIkWwEAAAJR5PbT4MvZdtuH' +\n            'jLiimcdnhbNI6TKH2m4GAAAAAQAAC0AAAABi+354pgAAAlHk9tPgpgOUfVePZWnuO69XlvZf8BzHjTsA' +\n            'AAACuA/6/UZ+myPLTv0rQR48yVjdYBj+xnx0gQEAAAH38jLPmHhUCPYh7IdSdeq5grLJ7N3/9k7oAAAA' +\n            'AQAAC0AAAABT/bMimgAAAffyMs+YTpbsTx+qRTynShhe/OncI3F8UJUBAAACY7QNrF0kaFoknkqcBjWI' +\n            'NhgkiICcLaGFqQAAAAEAABaAAAACY7QNrF0AAAJjtA2sXYy5yceBWd2UZHzOlLJ8bJT3XnkiAQAAAet+' +\n            'mSFo/V6xEWOKhdqqy8rbsGtb0IpSTjsAAAABAAAWgAAAAet+mSFoAAAB636ZIWisTPQqBlMhdavdoB1d' +\n            'Jg4hNeIzSQAAAAM9NgN2R9lbltBpK4dHZ0tyJFuWFqFXycS6AQAAABDdCzYOg7v1ZL/YGtYz6n/pqZ7k' +\n            'BscS9EAAAAABAAALQAAAAALPgd5YAAAAEN0LNg4jeClst35OziQr18E8ongjqdUwkAAAAACSi46KoSGZ' +\n            'ZZgRFEG1UmNVvuGnXlr/p8tLAAAAAo2Y+VdN6KsTS3g0BfG/5A2WO23wvPTR1wQBAAAABjp3o4OXWcPN' +\n            'eS7zgUtJ1ZtdWMlPrUCjQQAAAAEAABaAAAAABjp3o4MAAAAGOnejg0HbqTyPwzbBbmZKac+AJldb1K8S' +\n            'AQAAA2xCJZEUiCvMiRHOWl0TPvfiopaGoWuy/1MAAAABAAAWgAAAA2xCJZEUAAADbEIlkRSW5uOyFaGB' +\n            'eE9iLFclv4dkn0b8hAEAAAAaof6tJK4CoBvPyIm5zYNslaFa0I0DAXdNAAAAAQAAC0AAAAAEcFUc3AAA' +\n            'ABqh/q0k7md7N7SMnce8u1qZ7zza/iG1Tn4AAAAC2fbY76DyEhIrSQASeAudDPtSCBr5cZuxUwEAAADk' +\n            '0kARBJH5qFOo09UHXzNlMp6yjMHoBVicAAAAAQAAFoAAAADk0kARBAAAAOTSQBEEBGm9ERoB+XwvUDmC' +\n            'og0GIMYSA/0BAAACzQJNz/Z6A5yDJeNdyNSW1L+irfZN+NpYRQAAAAEAABaAAAACzQJNz/YAAALNAk3P' +\n            '9grte35IRZZFznMf1gpDH0fsbgh6AAAAANIlCqNKBUnIybVhKsuJHiMrgaeH+72CipcAAAAArp3v7lub' +\n            'ymFcF+x8X6sQer1ayMp1jrlWiwEAAAQQfjLXJ7IS3Zq3na6MsYcufha2Tm5gvr2xAAAAAQAAFoAAAAQQ' +\n            'fjLXJwAABBB+Mtcn5XPFpovekv8bgRGTV2LSeiZleJUAAAACXoxQT4M7+VL2b5FDeiL8Y1dHlO1boy19' +\n            '6AEAAAOcBs1QJwsPNgV1uujn9YRrWXf23JR0QKsvAAAAAQAAC0AAAACaASI4BwAAA5wGzVAnhdNFqitT' +\n            '85qR1j+u1sme41jJRfkAAAAC6ttvlJrkUQTtZt4IVpXGMPPbiOARbrgajgAAAAHVpCh2w6PvV+HiS5PL' +\n            '5s4wdjHd6qKO6i8PAAAAA2qxFnjjJl5FHtoCQxEJfO0uyXaCj9MG+OkBAAADFiD2hCtcPDqv69GPrUF7' +\n            'J1ufmM68/Ru99gAAAAEAAAtAAAAAg7ApFggAAAMWIPaEK5BnIwlb6NRmmDQzimYNOTKOVNPjAAAAAY1F' +\n            'x02zSd3uF8Vj4S/TaoBuM///DSp0gSwAAAADZ5wnyoHktQhKTfw0OpLTgiwg53rMarO+LQEAAAJflxqP' +\n            'fHUakyXzvQFuqMGCr6xa8pbx1MG2AAAAAQAAFoAAAAJflxqPfAAAAl+XGo98TtdEztipo0zyipnMocYl' +\n            'e2VSHzsAAAAB8OIqY4ZJ40Xz0UiBI4UHWjeUanUuMMH5qwEAAAIKm7AwSvDbPaXscFKMfNoshmPOuji4' +\n            'FyTgAAAAAQAAFoAAAAIKm7AwSgAAAgqbsDBKluoH0jINLWuByiQ+CAG3gMo+8JgAAAAA1uRP/GEF1BOx' +\n            '7I2paX5fa/wEkQDcMJcCTQEAAAH5Z+cQz7kBi6Rgajd3MHk58AA3NwBGMyJiAAAAAQAAC0AAAABUO/vY' +\n            'IwAAAfln5xDP/3+ug/4aXTjAo5YwpNMt+nZ+lB0AAAAC4xiGzk8p0EDsMgk7BZ2Lp/Ipqs/8QkvT6wEA' +\n            'AAGe+TeyjXZtAVYZPw0/Wm+gH1sTuonDC+zdAAAAAQAAFoAAAAGe+TeyjQAAAZ75N7KNxcAvQyI0dTnE' +\n            'OU4b5XGOOLIXrOYBAAADvPpJRzblSEO08l6xF6oGQvBQPB7VBBg0cwAAAAEAAAtAAAAAn38MNokAAAO8' +\n            '+klHNocR7UAAXunjaoZ8raL1kqQqMhaBAQAAA8avedwClf/LVcuz9RkrElWM+SyAjp8k+1sAAAABAAAL' +\n            'QAAAAKEdPvoBAAADxq953ALOttlrLzsnbOrQj8LjeGNjY8MCmAEAAAEeregRRXA2d50cqQgJcXF4rsQ1' +\n            'Iy0wCdkPAAAAAQAAC0AAAAAvx6atjAAAAR6t6BFF5pw0DA0RHO6/7cAqKwohgusbMJ4BAAABnR1KdPep' +\n            'yuvGAvBWqAB0Mij3qHXgmM3pQgAAAAEAABaAAAABnR1KdPcAAAGdHUp092IPe5Uo8L6bEBfIcBszCCaU' +\n            '3ZCFAQAAAlApip6i7sSV9Xf/cZOWcSnR3lvQ6qnjYiEAAAABAAALQAAAAGKxlxpxAAACUCmKnqLHZ87+' +\n            '742b7VCY+mdcXgUivnErUQEAAAJc6SBPCXsPV1cyJmrWJbyix0y0MGvNdAxnAAAAAQAAC0AAAABk0YVi' +\n            'ggAAAlzpIE8JJhdSTzJWBddPXWISNCnXKQbdSOEAAAAAshscJDuUrLmff96PmMXSHjv6iLnuakcuEQEA' +\n            'AAF3oHpkI8BjHIpOQcNWshd7j/h9mICI5myBAAAAAQAAC0AAAAA+mr8QsQAAAXegemQjbgkIzm9ttUga' +\n            'Xm481y+qKRjSeqwBAAAB7DzablqAf2gbs+/9SYhcADbIRJbS7G3c+QAAAAEAABaAAAAB7DzabloAAAHs' +\n            'PNpuWtJEhwUaSZ9Tg+yvkFZ242oTVaxrAQAAA8zovmmlJrUqvQ9XKD75Ql3t/wHtYw/hqi4AAAABAAAL' +\n            'QAAAAKImymbxAAADzOi+aaUscN6LWAC41YIiEiyUFT4nl8DbwwEAAAJrqfvqURra+7HArgPHeoZuZGfB' +\n            'nZxo4oZcAAAAAQAAC0AAAABnRv9RuQAAAmup++pRZ77cbnKDpVQw4BL39bEWeOSwHw0AAAACC47Ibf40' +\n            'xdAvwpS6spKJEDfGUOP0dfLvNgEAAADExu0Of/wIe/ktutHQJVsqBotvETusEBk8AAAAAQAAFoAAAADE' +\n            'xu0OfwAAAMTG7Q5/npgGH2YQ5O69Zb8InpcJ+3Xb3hMAAAABGivkj2P3t+w3wcJlDbqHHLeZjaGprCzm' +\n            'FwAAAAFfg6V+9IxjkTpCkTZ2heqwjjcQb3GjCEZTAQAAAZIMcUVqJ0k1ifmmNQt79Rs1dX0L2Mq+MloA' +\n            'AAABAAAWgAAAAZIMcUVqAAABkgxxRWp9VLAV2l/GjEWTAZzpxeDaUsxNkgEAAAN2uVrw4g9W2DDeukSz' +\n            'TyLxYqm5KFcw72fJAAAAAQAAFoAAAAN2uVrw4gAAA3a5WvDii7RScEJSU1x6ZmCL5M3F50xRHfQAAAAC' +\n            '+CK5BiiMrHZJ7TrhEFQ8n0YRfoLMUczX2QAAAAJNvBcYruLQJ2TltxpinmOSf13f+cXn3J3jAAAAA5w4' +\n            'C/BjVTkfE0Phx+Rb2fsm3J8RI3wFwTsBAAAAC+MMUH8dzPNaHQGQKnjqTKs7aWbbdH7dEwAAAAEAAAtA' +\n            'AAAAAfssuBYAAAAL4wxQf4FwpwRoMuHItz9YGBRc6x1o3amtAQAAACwQMTvDUlbrOHxQG5guU3iG0q9/' +\n            '+CrDFXMAAAABAAALQAAAAAdYCDShAAAALBAxO8MhD4gQOrLQfWJGyCsI5ZUmVdh8pQAAAADdRRBrv3G4' +\n            'F2Tq3ImF+xUVZz2gqjVpGdAaAQAAAZYf2OJvN1smnhwcM8c/aZznmfFtvxDRU9gAAAABAAAWgAAAAZYf' +\n            '2OJvAAABlh/Y4m8eR91nBeBI9qdg1mlPf8ZIzFLPmQEAAAI3vx7Pa5ty9e+2jB6gL+lO95IuG4TdDN1v' +\n            'AAAAAQAAFoAAAAI3vx7PawAAAje/Hs9rgCRUm9RKMk+J4Mqy1pCGgnExdFcAAAAAUWefBW7kQ4xPetD+' +\n            '/je2JzS83YLr60juHAEAAAGA5ARRy0KuCQ/K40H+qr7fyuDRlNACqSihAAAAAQAAC0AAAABAJgC4TQAA' +\n            'AYDkBFHLlRXf6DznkAPPYQG5bSgjCxCB6WIBAAAB0PAwzsvj1VjB3iefUVXm0uENgye1iH8GWgAAAAEA' +\n            'ABaAAAAB0PAwzssAAAHQ8DDOy2SmQ0XvARmN17wy1azFVYOFl8LmAAAAAuymvWJbap1uaBnvqo22bGoC' +\n            'cg9XRK1olasAAAAA/lMYYTxyjHLVR/Pxkp4el+dp5sGYw2CyNwAAAANzjeaeP6Vn5Qo6zPTuJbEby9W8' +\n            'yGOUlpj0AAAAAGJvsBrGU9LXiImw0pNsAfYsGPpChDfzxqUAAAACnha01XkWHT3K98ZVf4qFZ+eVZk69' +\n            'HXgTZAAAAADG+hJMiXbLXYotByvgurHAZkCIfeoD4j/GAQAAAnwS195BXMR4RF6S2HEut98KOu46WyAn' +\n            'MgUAAAABAAAWgAAAAnwS195BAAACfBLX3kGB7YYZXaVHVYpvlS5pPB0rTmAdhgEAAAOw7V2WAkTXOeZB' +\n            'hAQ3gO4hKDzaPoI/obIIAAAAAQAAFoAAAAOw7V2WAgAAA7DtXZYCexCLXdJmUo3et6zTrM4JHLAHvHcB' +\n            'AAAAo52G7qeniYMBQPn2IGmF4SyZvtqO5T3j8QAAAAEAAAtAAAAAG0Tr0nIAAACjnYbup/82u4K2pI3Z' +\n            'h8SrLR0y1SaJZ5l2AQAAAM0wkaKTtJYt5lBGk9KdUOfTPfmHPMJYvIwAAAABAAAWgAAAAM0wkaKTAAAA' +\n            'zTCRopP8K2cAplRi+V/cwUxuZsSR4QZlJQEAAAFrnAUfbjFv4oFVJrnxAqoTAfT+ir0cddG8AAAAAQAA' +\n            'C0AAAAA8mgDakwAAAWucBR9uS6QEmO4u5Y4uSMXTZDH8ysKkgeUAAAABJql00I3a+i/3sQxVGNO8jvSH' +\n            'NvKIDDwpCAAAAAG5PG0zfZL63kNtVx8yC/1rU/YJ+beMCq/MAQAAAfyrrlYeV08n7pDCSKBTHhoQtuof' +\n            'LbLc5vIAAAABAAAWgAAAAfyrrlYeAAAB/KuuVh6t32k0jFALkuXmJTd3CVbsSVqr9gAAAAJGVwd4qfoE' +\n            '4hQZ0AIEtzoGqvhfroylPD7hAAAAATCkdqWwldyF7Ow6kOLADIO7fufoY/2MCtwBAAADn+uup3jSsj0K' +\n            '3MSzvXONYK4E0E+ydYu0MQAAAAEAABaAAAADn+uup3gAAAOf666neJlIQtZB2w+EQBPHLR9hU4c7Pc8p' +\n            'AQAAAHrMSxVGaFi1A/Bg67LMchAQLHHATlbxJ1oAAAABAAALQAAAABR3YdjhAAAAesxLFUaL9KQCAqp4' +\n            'Q5SOagEaGjf7lDpynQAAAABBumWs5OROJv8K/JWHN97QVURIoPj96+bXAQAAAzOvVCYV6OmPb3ZVZhDT' +\n            'huOTXPAGcUPCMUAAAAABAAAWgAAAAzOvVCYVAAADM69UJhWOjYkDOqh2GLtyhACzalkqt6i5GAAAAABk' +\n            'HOEzHn2NueFUN/i1nufAJm5Ac7Whv/IvAQAAAnaJFcF5fLjdbjLqfgEZqSxvEzn1UcW6XekAAAABAAAL' +\n            'QAAAAGkW2PWVAAACdokVwXmQSClXUuSIAuzoqKB4jFwZAJuMdgEAAAHsD0/gGtLI0Rhf68pXNo8w6tke' +\n            'Dbl7/leEAAAAAQAAFoAAAAHsD0/gGgAAAewPT+AaCOUy0dRimkU3sK1J9IqLyEwVekoBAAAD1asYkCaI' +\n            'LiY2H+HviJLKv8bvJpZp3yEU5AAAAAEAAAtAAAAAo5yEGAcAAAPVqxiQJviZYUNe7PwjCxRRwmdn2qbL' +\n            'ShqZAQAAAj7b2zm/blSYRSUbnvVCJTGqqdqvIGdeXlIAAAABAAAWgAAAAj7b2zm/AAACPtvbOb9X+fT7' +\n            '4TMZImyXLXIuIgWFUyD5uAEAAAIPegL2Y5UScwJ9ZTWVekf09n4XUKQhwkvjAAAAAQAAC0AAAABX6asp' +\n            'EQAAAg96AvZjv7BLmwd9zQiXxIRalCtzU+r8G3wBAAAEBj9a7W52WYLujJxZpIibUJZrq7ka4SDDEQAA' +\n            'AAEAABaAAAAEBj9a7W4AAAQGP1rtbvPLOoPC9Vea1GXBedP3t7MHPoMsAQAAAgBURMd+ePmpTRjQCgCi' +\n            '5pVFGkD2qs/bOPIAAAABAAAWgAAAAgBURMd+AAACAFREx35sf7kDiNf4hPKBPARdgY4/AAtsaAEAAAEI' +\n            'I2jMolR1W14pluv9x/6myqzxn3ZUEenzAAAAAQAAFoAAAAEII2jMogAAAQgjaMyiEIZJWfKO8Y1GoDU9' +\n            'rEsVumVGFgEAAAABDnO2+5f7Yo9xYe4kL5omlRWQaOFVp1fkRwEAAABQ82mtvY9XMFguE8guQcqN7PcZ' +\n            'aP59u73nAAAAAQAAFoAAAABQ82mtvQAAAFDzaa29HbkxrjlvrxypwVCKBXGLscWZxBsBAAACbbcPl4DZ' +\n            'q3f07ciGYXAPXG+EQbptqwEXgAAAAAEAAAtAAAAAZ56CmUAAAAJttw+XgKh3+qgc1B4nsn6iKBWKH8/1' +\n            'k3DaAQAAAygH/3wfau3GDF2ltpK1zQVT/YbUHG1O6BUAAAABAAAWgAAAAygH/3wfAAADKAf/fB8SWgnh' +\n            'KY7eEBq1dn7EdblSHhwwiAEAAAMiqJ4ySyyTQbUeHOhqhls8J6pSa9FOTdORAAAAAQAAC0AAAACFxsUI' +\n            'YgAAAyKonjJL13wA6mHCW2/OQD28IMlARXIpkYABAAAiUPS1kYdh8z8IT9HgqMC1auELaAZIShQtEgAA' +\n            'AAEAAAtAAAAFuCjI7ZcAACJQ9LWRhw=='\n    }\n};\n","class CloseType {\n    /**\n     * @param {number} closeType\n     * @return {boolean}\n     */\n    static isBanningType(closeType){\n        return closeType >= 100 && closeType < 200;\n    }\n\n    /**\n     * @param {number} closeType\n     * @return {boolean}\n     */\n    static isFailingType(closeType){\n        return closeType >= 200;\n    }\n}\n\n// Regular Close Types\n\nCloseType.GET_BLOCKS_TIMEOUT = 1;\nCloseType.GET_CHAIN_PROOF_TIMEOUT = 2;\nCloseType.GET_ACCOUNTS_TREE_CHUNK_TIMEOUT = 3;\nCloseType.GET_HEADER_TIMEOUT = 4;\nCloseType.INVALID_ACCOUNTS_TREE_CHUNK = 5;\nCloseType.ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH = 6;\nCloseType.INVALID_CHAIN_PROOF = 7;\nCloseType.RECEIVED_WRONG_HEADER = 8;\nCloseType.DID_NOT_GET_REQUESTED_HEADER = 9;\n\nCloseType.GET_ACCOUNTS_PROOF_TIMEOUT = 11;\nCloseType.GET_TRANSACTIONS_PROOF_TIMEOUT = 12;\nCloseType.GET_TRANSACTION_RECEIPTS_TIMEOUT = 13;\nCloseType.INVALID_ACCOUNTS_PROOF = 14;\nCloseType.ACCOUNTS_PROOF_ROOT_HASH_MISMATCH = 15;\nCloseType.INCOMPLETE_ACCOUNTS_PROOF = 16;\nCloseType.INVALID_BLOCK = 17;\nCloseType.INVALID_CHAIN_PROOF = 18;\nCloseType.INVALID_TRANSACTION_PROOF = 19;\nCloseType.INVALID_BLOCK_PROOF = 20;\n\nCloseType.SENDING_PING_MESSAGE_FAILED = 22;\nCloseType.SENDING_OF_VERSION_MESSAGE_FAILED = 23;\n\nCloseType.SIMULTANEOUS_CONNECTION = 29;\nCloseType.DUPLICATE_CONNECTION = 30;\nCloseType.PEER_IS_BANNED = 31;\nCloseType.MANUAL_NETWORK_DISCONNECT = 33;\nCloseType.MANUAL_WEBSOCKET_DISCONNECT = 34;\nCloseType.MAX_PEER_COUNT_REACHED = 35;\n\nCloseType.PEER_CONNECTION_RECYCLED = 36;\nCloseType.PEER_CONNECTION_RECYCLED_INBOUND_EXCHANGE = 37;\nCloseType.INBOUND_CONNECTIONS_BLOCKED = 38;\n\nCloseType.MANUAL_PEER_DISCONNECT = 90;\n\n// Ban Close Types\n\nCloseType.RECEIVED_INVALID_BLOCK = 100;\nCloseType.BLOCKCHAIN_SYNC_FAILED = 101;\nCloseType.RECEIVED_INVALID_HEADER = 102;\nCloseType.RECEIVED_TRANSACTION_NOT_MATCHING_OUR_SUBSCRIPTION = 103;\nCloseType.ADDR_MESSAGE_TOO_LARGE = 104;\nCloseType.INVALID_ADDR = 105;\nCloseType.ADDR_NOT_GLOBALLY_REACHABLE = 106;\nCloseType.INVALID_SIGNAL_TTL = 107;\nCloseType.INVALID_SIGNATURE = 108;\nCloseType.RECEIVED_BLOCK_NOT_MATCHING_OUR_SUBSCRIPTION = 109;\n\nCloseType.INCOMPATIBLE_VERSION = 110;\nCloseType.DIFFERENT_GENESIS_BLOCK = 111;\nCloseType.INVALID_PEER_ADDRESS_IN_VERSION_MESSAGE = 112;\nCloseType.UNEXPECTED_PEER_ADDRESS_IN_VERSION_MESSAGE = 113;\nCloseType.INVALID_PUBLIC_KEY_IN_VERACK_MESSAGE = 114;\nCloseType.INVALID_SIGNATURE_IN_VERACK_MESSAGE = 115;\nCloseType.BANNED_IP = 116;\n\nCloseType.RATE_LIMIT_EXCEEDED = 120;\n\nCloseType.MANUAL_PEER_BAN = 190;\n\n// Fail Close Types\n\nCloseType.CLOSED_BY_REMOTE = 200;\nCloseType.PING_TIMEOUT = 201;\nCloseType.CONNECTION_FAILED = 202;\nCloseType.NETWORK_ERROR = 203;\nCloseType.VERSION_TIMEOUT = 204;\nCloseType.VERACK_TIMEOUT = 205;\nCloseType.ABORTED_SYNC = 206;\nCloseType.FAILED_TO_PARSE_MESSAGE_TYPE = 207;\nCloseType.CONNECTION_LIMIT_PER_IP = 208;\nCloseType.CHANNEL_CLOSING = 209;\n\nCloseType.MANUAL_PEER_FAIL = 290;\n\nClass.register(CloseType);\n","class NetworkConnection extends Observable {\n    /**\n     * @param {DataChannel} channel\n     * @param {number} protocol\n     * @param {NetAddress} netAddress\n     * @param {PeerAddress} peerAddress\n     */\n    constructor(channel, protocol, netAddress, peerAddress) {\n        super();\n        /** @type {DataChannel} */\n        this._channel = channel;\n\n        /** @type {number} */\n        this._protocol = protocol;\n        /** @type {NetAddress} */\n        this._netAddress = netAddress;\n        /** @type {PeerAddress} */\n        this._peerAddress = peerAddress;\n\n        /** @type {number} */\n        this._bytesSent = 0;\n        /** @type {number} */\n        this._bytesReceived = 0;\n\n        /** @type {boolean} */\n        this._inbound = !peerAddress;\n\n        /** @type {boolean} */\n        this._closed = false;\n\n        /** @type {*} */\n        this._lastError = null;\n\n        // Unique id for this connection.\n        /** @type {number} */\n        this._id = NetworkConnection._instanceCount++;\n\n        this._channel.on('message', msg => this._onMessage(msg));\n        this._channel.on('close', () => this._onClose(CloseType.CLOSED_BY_REMOTE, 'Closed by remote'));\n        this._channel.on('error', e => this._onError(e));\n    }\n\n    /**\n     * @param {Uint8Array} msg\n     * @private\n     */\n    _onMessage(msg) {\n        // Don't emit messages if this channel is closed.\n        if (this._closed) {\n            return;\n        }\n\n        this._bytesReceived += msg.byteLength || msg.length;\n        this.fire('message', msg, this);\n    }\n\n    /**\n     * @param {*} e\n     * @private\n     */\n    _onError(e) {\n        this._lastError = e;\n        this.fire('error', e, this);\n    }\n\n    /**\n     * @param {number} [type]\n     * @param {string} [reason]\n     * @private\n     */\n    _onClose(type, reason) {\n        // Don't fire close event again when already closed.\n        if (this._closed) {\n            return;\n        }\n\n        // Mark this connection as closed.\n        this._closed = true;\n\n        // Propagate last network error.\n        if (type === CloseType.CLOSED_BY_REMOTE && this._lastError) {\n            type = CloseType.NETWORK_ERROR;\n            reason = this._lastError;\n        }\n\n        // Tell listeners that this connection has closed.\n        this.fire('close', type, reason, this);\n    }\n\n    /**\n     * @param {number} [type]\n     * @param {string} [reason]\n     * @private\n     */\n    _close(type, reason) {\n        // Don't wait for the native close event to fire.\n        this._onClose(type, reason);\n\n        // Close the native channel.\n        this._channel.close();\n    }\n\n    /**\n     * @return {boolean}\n     * @private\n     */\n    _isChannelOpen() {\n        return this._channel.readyState === DataChannel.ReadyState.OPEN;\n    }\n\n    /**\n     * @return {boolean}\n     * @private\n     */\n    _isChannelClosing() {\n        return this._channel.readyState === DataChannel.ReadyState.CLOSING;\n    }\n\n    /**\n     * @return {boolean}\n     * @private\n     */\n    _isChannelClosed() {\n        return this._channel.readyState === DataChannel.ReadyState.CLOSED;\n    }\n\n    /**\n     * @param {Uint8Array} msg\n     * @return {boolean}\n     */\n    send(msg) {\n        const logAddress = this._peerAddress || this._netAddress;\n        if (this._closed) {\n            return false;\n        }\n\n        // Fire close event (early) if channel is closing/closed.\n        if (this._isChannelClosing() || this._isChannelClosed()) {\n            Log.w(NetworkConnection, `Not sending data to ${logAddress} - channel closing/closed (${this._channel.readyState})`);\n            this._onClose(CloseType.CHANNEL_CLOSING, 'channel closing');\n            return false;\n        }\n\n        // Don't attempt to send if channel is not (yet) open.\n        if (!this._isChannelOpen()) {\n            Log.w(NetworkConnection, `Not sending data to ${logAddress} - channel not open (${this._channel.readyState})`);\n            return false;\n        }\n\n        try {\n            this._channel.send(msg);\n            this._bytesSent += msg.byteLength || msg.length;\n            return true;\n        } catch (e) {\n            Log.e(NetworkConnection, `Failed to send data to ${logAddress}: ${e.message || e}`);\n            return false;\n        }\n    }\n\n    /**\n     * @param {Message.Type|Array.<Message.Type>} types\n     * @param {function()} timeoutCallback\n     * @param {number} [msgTimeout]\n     * @param {number} [chunkTimeout]\n     */\n    expectMessage(types, timeoutCallback, msgTimeout, chunkTimeout) {\n        this._channel.expectMessage(types, timeoutCallback, msgTimeout, chunkTimeout);\n    }\n\n    /**\n     * @param {Message.Type} type\n     * @returns {boolean}\n     */\n    isExpectingMessage(type) {\n        return this._channel.isExpectingMessage(type);\n    }\n\n    /**\n     * @param {Message.Type} type\n     * @param {boolean} success\n     */\n    confirmExpectedMessage(type, success) {\n        this._channel.confirmExpectedMessage(type, success);\n    }\n\n    /**\n     * @param {number} [type]\n     * @param {string} [reason]\n     */\n    close(type, reason) {\n        if (!this._closed) {\n            const connType = this._inbound ? 'inbound' : 'outbound';\n            Log.d(NetworkConnection, `Closing ${connType} connection #${this._id} ${this._peerAddress || this._netAddress}` + (reason ? ` - ${reason}` : '') + ` (${type})`);\n        }\n        this._close(type, reason);\n    }\n\n    /**\n     * @param {NetworkConnection} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof NetworkConnection\n            && this._id === o.id;\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this._id.toString();\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `NetworkConnection{id=${this._id}, protocol=${this._protocol}, peerAddress=${this._peerAddress}, netAddress=${this._netAddress}}`;\n    }\n\n    /** @type {number} */\n    get id() {\n        return this._id;\n    }\n\n    /** @type {number} */\n    get protocol() {\n        return this._protocol;\n    }\n\n    /** @type {PeerAddress} */\n    get peerAddress() {\n        return this._peerAddress;\n    }\n\n    /** @type {PeerAddress} */\n    set peerAddress(value) {\n        this._peerAddress = value;\n    }\n\n    /** @type {NetAddress} */\n    get netAddress() {\n        return this._netAddress;\n    }\n\n    /** @type {NetAddress} */\n    set netAddress(value) {\n        this._netAddress = value;\n    }\n\n    /** @type {number} */\n    get bytesSent() {\n        return this._bytesSent;\n    }\n\n    /** @type {number} */\n    get bytesReceived() {\n        return this._bytesReceived;\n    }\n\n    /** @type {boolean} */\n    get inbound() {\n        return this._inbound;\n    }\n\n    /** @type {boolean} */\n    get outbound() {\n        return !this._inbound;\n    }\n\n    /** @type {boolean} */\n    get closed() {\n        return this._closed;\n    }\n\n    /** @type {number} */\n    get lastMessageReceivedAt() {\n        return this._channel.lastMessageReceivedAt;\n    }\n}\n// Used to generate unique NetworkConnection ids.\nNetworkConnection._instanceCount = 0;\nClass.register(NetworkConnection);\n","class PeerChannel extends Observable {\n    /**\n     * @listens NetworkConnection#message\n     * @param {NetworkConnection} connection\n     */\n    constructor(connection) {\n        super();\n        this._conn = connection;\n        this._conn.on('message', msg => this._onMessage(msg));\n\n        // Forward specified events on the connection to listeners of this Observable.\n        this.bubble(this._conn, 'close', 'error');\n    }\n\n    /**\n     * @param {Uint8Array} rawMsg\n     * @private\n     */\n    async _onMessage(rawMsg) {\n        const start = Date.now();\n        let msg = null, type = null;\n\n        try {\n            const buf = new SerialBuffer(rawMsg);\n            type = MessageFactory.peekType(buf);\n            msg = MessageFactory.parse(buf);\n        } catch(e) {\n            Log.w(PeerChannel, `Failed to parse '${PeerChannel.Event[type]}' message from ${this.peerAddress || this.netAddress}`, e.message || e);\n\n            // Confirm that message arrived but could not be parsed successfully.\n            this._conn.confirmExpectedMessage(type, false);\n\n            // From the Bitcoin Reference:\n            //  \"Be careful of reject message feedback loops where two peers\n            //   each don’t understand each other’s reject messages and so keep\n            //   sending them back and forth forever.\"\n\n            // If the message does not make sense at a whole or we fear to get into a reject loop,\n            // we ban the peer instead.\n            if (type === null || type === Message.Type.REJECT) {\n                this.close(CloseType.FAILED_TO_PARSE_MESSAGE_TYPE, 'Failed to parse message type');\n                return;\n            }\n\n            // Otherwise inform other node and ignore message.\n            this.reject(type, RejectMessage.Code.REJECT_MALFORMED, e.message || e);\n            return;\n        }\n\n        if (!msg) return;\n\n        // Confirm that message was successfully parsed.\n        this._conn.confirmExpectedMessage(type, true);\n\n        try {\n            await this.fire(PeerChannel.Event[msg.type], msg, this);\n            this.fire('message-log', msg, this, Date.now() - start);\n        } catch (e) {\n            Log.w(PeerChannel, `Error while processing '${PeerChannel.Event[msg.type]}' message from ${this.peerAddress || this.netAddress}: ${e}`);\n        }\n    }\n\n    /**\n     * @param {Message.Type|Array.<Message.Type>} types\n     * @param {function()} timeoutCallback\n     * @param {number} [msgTimeout]\n     * @param {number} [chunkTimeout]\n     */\n    expectMessage(types, timeoutCallback, msgTimeout, chunkTimeout) {\n        this._conn.expectMessage(types, timeoutCallback, msgTimeout, chunkTimeout);\n    }\n\n    /**\n     * @param {Message.Type} type\n     * @returns {boolean}\n     */\n    isExpectingMessage(type) {\n        return this._conn.isExpectingMessage(type);\n    }\n\n    /**\n     * @param {Message} msg\n     * @return {boolean}\n     * @private\n     */\n    _send(msg) {\n        return this._conn.send(msg.serialize());\n    }\n\n    /**\n     * @param {number} [type]\n     * @param {string} [reason]\n     */\n    close(type, reason) {\n        this._conn.close(type, reason);\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @param {Hash} headHash\n     * @param {Uint8Array} challengeNonce\n     * @return {boolean}\n     */\n    version(peerAddress, headHash, challengeNonce) {\n        return this._send(new VersionMessage(Version.CODE, peerAddress, GenesisConfig.GENESIS_HASH, headHash, challengeNonce));\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {boolean}\n     */\n    verack(publicKey, signature) {\n        return this._send(new VerAckMessage(publicKey, signature));\n    }\n\n    /**\n     * @param {Array.<InvVector>} vectors\n     * @return {boolean}\n     */\n    inv(vectors) {\n        return this._send(new InvMessage(vectors));\n    }\n\n    /**\n     * @param {Array.<InvVector>} vectors\n     * @return {boolean}\n     */\n    notFound(vectors) {\n        return this._send(new NotFoundMessage(vectors));\n    }\n\n    /**\n     * @param {Array.<InvVector>} vectors\n     * @return {boolean}\n     */\n    getData(vectors) {\n        return this._send(new GetDataMessage(vectors));\n    }\n\n    /**\n     * @param {Array.<InvVector>} vectors\n     * @return {boolean}\n     */\n    getHeader(vectors) {\n        return this._send(new GetHeaderMessage(vectors));\n    }\n\n    /**\n     * @param {Block} block\n     * @return {boolean}\n     */\n    block(block) {\n        return this._send(new BlockMessage(block));\n    }\n\n    /**\n     * @param {Uint8Array} block\n     * @return {boolean}\n     */\n    rawBlock(block) {\n        return this._send(new RawBlockMessage(block));\n    }\n\n    /**\n     * @param {BlockHeader} header\n     * @return {boolean}\n     */\n    header(header) {\n        return this._send(new HeaderMessage(header));\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {?AccountsProof} [accountsProof]\n     * @return {boolean}\n     */\n    tx(transaction, accountsProof) {\n        return this._send(new TxMessage(transaction, accountsProof));\n    }\n\n    /**\n     * @param {Array.<Hash>} locators\n     * @param {number} maxInvSize\n     * @param {boolean} [ascending]\n     * @return {boolean}\n     */\n    getBlocks(locators, maxInvSize=BaseInventoryMessage.VECTORS_MAX_COUNT, ascending=true) {\n        return this._send(new GetBlocksMessage(locators, maxInvSize, ascending ? GetBlocksMessage.Direction.FORWARD : GetBlocksMessage.Direction.BACKWARD));\n    }\n\n    /**\n     * @return {boolean}\n     */\n    mempool() {\n        return this._send(new MempoolMessage());\n    }\n\n    /**\n     * @param {Message.Type} messageType\n     * @param {RejectMessage.Code} code\n     * @param {string} reason\n     * @param {Uint8Array} [extraData]\n     * @return {boolean}\n     */\n    reject(messageType, code, reason, extraData) {\n        return this._send(new RejectMessage(messageType, code, reason, extraData));\n    }\n\n    /**\n     * @param {Subscription} subscription\n     * @returns {boolean}\n     */\n    subscribe(subscription) {\n        return this._send(new SubscribeMessage(subscription));\n    }\n\n    /**\n     * @param {Array.<PeerAddress>} addresses\n     * @return {boolean}\n     */\n    addr(addresses) {\n        return this._send(new AddrMessage(addresses));\n    }\n\n    /**\n     * @param {number} protocolMask\n     * @param {number} serviceMask\n     * @return {boolean}\n     */\n    getAddr(protocolMask, serviceMask) {\n        return this._send(new GetAddrMessage(protocolMask, serviceMask));\n    }\n\n    /**\n     * @param {number} nonce\n     * @return {boolean}\n     */\n    ping(nonce) {\n        return this._send(new PingMessage(nonce));\n    }\n\n    /**\n     * @param {number} nonce\n     * @return {boolean}\n     */\n    pong(nonce) {\n        return this._send(new PongMessage(nonce));\n    }\n\n    /**\n     * @param {PeerId} senderId\n     * @param {PeerId} recipientId\n     * @param {number} nonce\n     * @param {number} ttl\n     * @param {SignalMessage.Flags|number} flags\n     * @param {Uint8Array} [payload]\n     * @param {PublicKey} [senderPubKey]\n     * @param {Signature} [signature]\n     * @return {boolean}\n     */\n    signal(senderId, recipientId, nonce, ttl, flags, payload, senderPubKey, signature) {\n        return this._send(new SignalMessage(senderId, recipientId, nonce, ttl, flags, payload, senderPubKey, signature));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     * @return {boolean}\n     */\n    getAccountsProof(blockHash, addresses) {\n        return this._send(new GetAccountsProofMessage(blockHash, addresses));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {AccountsProof} [proof]\n     * @return {boolean}\n     */\n    accountsProof(blockHash, proof) {\n        return this._send(new AccountsProofMessage(blockHash, proof));\n    }\n\n    /**\n     * @return {boolean}\n     */\n    getChainProof() {\n        return this._send(new GetChainProofMessage());\n    }\n\n    /**\n     * @param {ChainProof} proof\n     * @return {boolean}\n     */\n    chainProof(proof) {\n        return this._send(new ChainProofMessage(proof));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {string} startPrefix\n     * @return {boolean}\n     */\n    getAccountsTreeChunk(blockHash, startPrefix) {\n        return this._send(new GetAccountsTreeChunkMessage(blockHash, startPrefix));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {AccountsTreeChunk} [chunk]\n     * @return {boolean}\n     */\n    accountsTreeChunk(blockHash, chunk) {\n        return this._send(new AccountsTreeChunkMessage(blockHash, chunk));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {Array.<Address>} addresses\n     * @return {boolean}\n     */\n    getTransactionsProof(blockHash, addresses) {\n        return this._send(new GetTransactionsProofMessage(blockHash, addresses));\n    }\n\n    /**\n     * @param {Hash} blockHash\n     * @param {TransactionsProof} [proof]\n     * @return {boolean}\n     */\n    transactionsProof(blockHash, proof) {\n        return this._send(new TransactionsProofMessage(blockHash, proof));\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {boolean}\n     */\n    getTransactionReceipts(address) {\n        return this._send(new GetTransactionReceiptsMessage(address));\n    }\n\n    /**\n     * @param {Array.<TransactionReceipt>} transactionReceipts\n     * @returns {boolean}\n     */\n    transactionReceipts(transactionReceipts) {\n        return this._send(new TransactionReceiptsMessage(transactionReceipts));\n    }\n\n    /**\n     * @param {Hash} blockHashToProve\n     * @param {Hash} knownBlockHash\n     * @returns {boolean}\n     */\n    getBlockProof(blockHashToProve, knownBlockHash) {\n        return this._send(new GetBlockProofMessage(blockHashToProve, knownBlockHash));\n    }\n\n    /**\n     * @param {BlockChain} [proof]\n     * @returns {boolean}\n     */\n    blockProof(proof) {\n        return this._send(new BlockProofMessage(proof));\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    getHead() {\n        return this._send(new GetHeadMessage());\n    }\n\n    /**\n     * @param {BlockHeader} header\n     * @returns {boolean}\n     */\n    head(header) {\n        return this._send(new HeadMessage(header));\n    }\n\n    /**\n     * @param {PeerChannel} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PeerChannel\n            && this._conn.equals(o.connection);\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this._conn.hashCode();\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `PeerChannel{conn=${this._conn}}`;\n    }\n\n    /** @type {NetworkConnection} */\n    get connection() {\n        return this._conn;\n    }\n\n    /** @type {number} */\n    get id() {\n        return this._conn.id;\n    }\n\n    /** @type {number} */\n    get protocol() {\n        return this._conn.protocol;\n    }\n\n    /** @type {PeerAddress} */\n    get peerAddress() {\n        return this._conn.peerAddress;\n    }\n\n    /** @type {PeerAddress} */\n    set peerAddress(value) {\n        this._conn.peerAddress = value;\n    }\n\n    /** @type {NetAddress} */\n    get netAddress() {\n        return this._conn.netAddress;\n    }\n\n    /** @type {NetAddress} */\n    set netAddress(value) {\n        this._conn.netAddress = value;\n    }\n\n    /** @type {boolean} */\n    get closed() {\n        return this._conn.closed;\n    }\n\n    /** @type {number} */\n    get lastMessageReceivedAt() {\n        return this._conn.lastMessageReceivedAt;\n    }\n}\nClass.register(PeerChannel);\n\nPeerChannel.Event = {};\nPeerChannel.Event[Message.Type.VERSION] = 'version';\nPeerChannel.Event[Message.Type.INV] = 'inv';\nPeerChannel.Event[Message.Type.GET_DATA] = 'get-data';\nPeerChannel.Event[Message.Type.GET_HEADER] = 'get-header';\nPeerChannel.Event[Message.Type.NOT_FOUND] = 'not-found';\nPeerChannel.Event[Message.Type.GET_BLOCKS] = 'get-blocks';\nPeerChannel.Event[Message.Type.BLOCK] = 'block';\nPeerChannel.Event[Message.Type.HEADER] = 'header';\nPeerChannel.Event[Message.Type.TX] = 'tx';\nPeerChannel.Event[Message.Type.MEMPOOL] = 'mempool';\nPeerChannel.Event[Message.Type.REJECT] = 'reject';\nPeerChannel.Event[Message.Type.SUBSCRIBE] = 'subscribe';\nPeerChannel.Event[Message.Type.ADDR] = 'addr';\nPeerChannel.Event[Message.Type.GET_ADDR] = 'get-addr';\nPeerChannel.Event[Message.Type.PING] = 'ping';\nPeerChannel.Event[Message.Type.PONG] = 'pong';\nPeerChannel.Event[Message.Type.SIGNAL] = 'signal';\nPeerChannel.Event[Message.Type.GET_CHAIN_PROOF] = 'get-chain-proof';\nPeerChannel.Event[Message.Type.CHAIN_PROOF] = 'chain-proof';\nPeerChannel.Event[Message.Type.GET_ACCOUNTS_PROOF] = 'get-accounts-proof';\nPeerChannel.Event[Message.Type.ACCOUNTS_PROOF] = 'accounts-proof';\nPeerChannel.Event[Message.Type.GET_ACCOUNTS_TREE_CHUNK] = 'get-accounts-tree-chunk';\nPeerChannel.Event[Message.Type.ACCOUNTS_TREE_CHUNK] = 'accounts-tree-chunk';\nPeerChannel.Event[Message.Type.GET_TRANSACTIONS_PROOF] = 'get-transactions-proof';\nPeerChannel.Event[Message.Type.TRANSACTIONS_PROOF] = 'transactions-proof';\nPeerChannel.Event[Message.Type.GET_TRANSACTION_RECEIPTS] = 'get-transaction-receipts';\nPeerChannel.Event[Message.Type.TRANSACTION_RECEIPTS] = 'transaction-receipts';\nPeerChannel.Event[Message.Type.GET_BLOCK_PROOF] = 'get-block-proof';\nPeerChannel.Event[Message.Type.BLOCK_PROOF] = 'block-proof';\nPeerChannel.Event[Message.Type.GET_HEAD] = 'get-head';\nPeerChannel.Event[Message.Type.HEAD] = 'head';\nPeerChannel.Event[Message.Type.VERACK] = 'verack';\n","class NetworkAgent extends Observable {\n    /**\n     * @param {IBlockchain} blockchain\n     * @param {PeerAddressBook} addresses\n     * @param {NetworkConfig} networkConfig\n     * @param {PeerChannel} channel\n     *\n     * @listens PeerChannel#version\n     * @listens PeerChannel#verack\n     * @listens PeerChannel#addr\n     * @listens PeerChannel#getAddr\n     * @listens PeerChannel#ping\n     * @listens PeerChannel#pong\n     * @listens PeerChannel#close\n     */\n    constructor(blockchain, addresses, networkConfig, channel) {\n        super();\n        /** @type {IBlockchain} */\n        this._blockchain = blockchain;\n        /** @type {PeerAddressBook} */\n        this._addresses = addresses;\n        /** @type {NetworkConfig} */\n        this._networkConfig = networkConfig;\n        /** @type {PeerChannel} */\n        this._channel = channel;\n\n        /**\n         * The peer object we create after the handshake completes.\n         * @type {Peer}\n         * @private\n         */\n        this._peer = null;\n\n        /**\n         * All peerAddresses that we think the remote peer knows.\n         * @type {HashSet.<PeerAddress>}\n         * @private\n         */\n        this._knownAddresses = new HashSet();\n\n        /**\n         * Helper object to keep track of timeouts & intervals.\n         * @type {Timers}\n         * @private\n         */\n        this._timers = new Timers();\n\n        /**\n         * True if we have received the peer's version message.\n         * @type {boolean}\n         * @private\n         */\n        this._versionReceived = false;\n\n        /**\n         * True if we have received the peer's verack message.\n         * @type {boolean}\n         * @private\n         */\n        this._verackReceived = false;\n\n        /**\n         * True if we have successfully sent our version message.\n         * @type {boolean}\n         * @private\n         */\n        this._versionSent = false;\n\n        /**\n         * True if we have successfully sent our verack message.\n         * @type {boolean}\n         * @private\n         */\n        this._verackSent = false;\n\n        /**\n         * Number of times we have tried to send out the version message.\n         * @type {number}\n         * @private\n         */\n        this._versionAttempts = 0;\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._peerAddressVerified = false;\n\n        /**\n         * @type {Uint8Array}\n         * @private\n         */\n        this._peerChallengeNonce = null;\n\n        /**\n         * @type {Map.<number, number>}\n         * @private\n         */\n        this._pingTimes = new Map();\n\n        /** @type {Uint8Array} */\n        this._challengeNonce = new Uint8Array(VersionMessage.CHALLENGE_SIZE);\n        CryptoWorker.lib.getRandomValues(this._challengeNonce);\n\n        /** @type {ThrottledQueue} */\n        this._addrQueue = new ThrottledQueue(\n            NetworkAgent.MAX_ADDR_RELAY_PER_MESSAGE,\n            NetworkAgent.MAX_ADDR_RELAY_PER_MESSAGE,\n            NetworkAgent.ADDR_QUEUE_INTERVAL,\n            NetworkAgent.ADDR_RATE_LIMIT,\n            () => this._relayNow());\n\n        this._addrLimit = new RateLimit(NetworkAgent.ADDR_RATE_LIMIT);\n\n        // Listen to network/control messages from the peer.\n        channel.on('version', msg => this._onVersion(msg));\n        channel.on('verack', msg => this._onVerAck(msg));\n        channel.on('addr', msg => this._onAddr(msg));\n        channel.on('get-addr', msg => this._onGetAddr(msg));\n        channel.on('ping', msg => this._onPing(msg));\n        channel.on('pong', msg => this._onPong(msg));\n\n        // Clean up when the peer disconnects.\n        channel.on('close', () => this._onClose());\n    }\n\n    /**\n     * @param {Array.<PeerAddress|RtcPeerAddress>} addresses\n     */\n    relayAddresses(addresses) {\n        // Don't relay if the handshake hasn't finished yet.\n        if (!this._verackReceived || !this._versionSent) {\n            return;\n        }\n\n        for (const address of addresses) {\n            this._addrQueue.enqueue(address);\n        }\n    }\n\n    _relayNow() {\n        const addresses = this._addrQueue.dequeueMulti(NetworkAgent.MAX_ADDR_RELAY_PER_MESSAGE);\n        if (addresses.length === 0) return;\n\n        // Only relay addresses that the peer doesn't know yet or that have improved.\n        // If the address the peer knows is older than RELAY_THROTTLE, relay the address again.\n        const filteredAddresses = addresses.filter(addr => {\n            // Exclude RTC addresses that are already at MAX_DISTANCE.\n            if (addr.protocol === Protocol.RTC && addr.distance >= PeerAddressBook.MAX_DISTANCE) {\n                return false;\n            }\n\n            // Exclude DumbPeerAddresses.\n            if (addr.protocol === Protocol.DUMB) {\n                return false;\n            }\n\n            const knownAddress = this._knownAddresses.get(addr);\n            return !addr.isSeed() // Never relay seed addresses.\n                && (!knownAddress // New address.\n                    || (addr.protocol === Protocol.RTC && knownAddress.distance > addr.distance) // Better distance.\n                    || knownAddress.timestamp < Date.now() - NetworkAgent.RELAY_THROTTLE); // Relay throttle.\n        });\n\n        if (filteredAddresses.length) {\n            this._channel.addr(filteredAddresses);\n\n            // We assume that the peer knows these addresses now.\n            for (const address of filteredAddresses) {\n                this._knownAddresses.add(address);\n            }\n        }\n    }\n\n\n    /* Handshake */\n\n    handshake() {\n        if (this._versionSent) {\n            // Version already sent, no need to handshake again.\n            return;\n        }\n\n        // Kick off the handshake by telling the peer our version, network address & blockchain head hash.\n        // Firefox sends the data-channel-open event too early, so sending the version message might fail.\n        // Try again in this case.\n        if (!this._channel.version(this._networkConfig.peerAddress, this._blockchain.headHash, this._challengeNonce)) {\n            this._versionAttempts++;\n            if (this._versionAttempts >= NetworkAgent.VERSION_ATTEMPTS_MAX || this._channel.closed) {\n                this._channel.close(CloseType.SENDING_OF_VERSION_MESSAGE_FAILED, 'sending of version message failed');\n                return;\n            }\n\n            setTimeout(this.handshake.bind(this), NetworkAgent.VERSION_RETRY_DELAY);\n            return;\n        }\n\n        this._versionSent = true;\n\n        // Drop the peer if it doesn't send us a version message.\n        // Only do this if we haven't received the peer's version message already.\n        if (!this._versionReceived) {\n            // TODO Should we ban instead?\n            this._timers.setTimeout('version', () => {\n                this._timers.clearTimeout('version');\n                this._channel.close(CloseType.VERSION_TIMEOUT, 'version timeout');\n            }, NetworkAgent.HANDSHAKE_TIMEOUT);\n        } else if (this._peerAddressVerified) {\n            this._sendVerAck();\n        }\n\n        this._timers.setTimeout('verack', () => {\n            this._timers.clearTimeout('verack');\n            this._channel.close(CloseType.VERACK_TIMEOUT, 'verack timeout');\n        }, NetworkAgent.HANDSHAKE_TIMEOUT * 2);\n    }\n\n    /**\n     * @param {VersionMessage} msg\n     * @private\n     */\n    _onVersion(msg) {\n        Log.d(NetworkAgent, () => `[VERSION] ${msg.peerAddress} ${msg.headHash.toBase64()}`);\n\n        const now = Date.now();\n\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) {\n            return;\n        }\n\n        // Ignore duplicate version messages.\n        if (this._versionReceived) {\n            Log.d(NetworkAgent, () => `Ignoring duplicate version message from ${this._channel.peerAddress}`);\n            return;\n        }\n\n        // Clear the version timeout.\n        this._timers.clearTimeout('version');\n\n        // Check if the peer is running a compatible version.\n        if (!Version.isCompatible(msg.version)) {\n            this._channel.reject(Message.Type.VERSION, RejectMessage.Code.REJECT_OBSOLETE, `incompatible version (ours=${Version.CODE}, theirs=${msg.version})`);\n            this._channel.close(CloseType.INCOMPATIBLE_VERSION, `incompatible version (ours=${Version.CODE}, theirs=${msg.version})`);\n            return;\n        }\n\n        // Check if the peer is working on the same genesis block.\n        if (!GenesisConfig.GENESIS_HASH.equals(msg.genesisHash)) {\n            this._channel.close(CloseType.DIFFERENT_GENESIS_BLOCK, `different genesis block (${msg.genesisHash})`);\n            return;\n        }\n\n        // Check that the given peerAddress is correctly signed.\n        if (!msg.peerAddress.verifySignature()) {\n            this._channel.close(CloseType.INVALID_PEER_ADDRESS_IN_VERSION_MESSAGE, 'invalid peerAddress in version message');\n            return;\n        }\n\n        // TODO check services?\n\n        // Check that the given peerAddress matches the one we expect.\n        // In case of inbound WebSocket connections, this is the first time we\n        // see the remote peer's peerAddress.\n        const peerAddress = msg.peerAddress;\n        if (this._channel.peerAddress) {\n            if (!this._channel.peerAddress.equals(peerAddress)) {\n                this._channel.close(CloseType.UNEXPECTED_PEER_ADDRESS_IN_VERSION_MESSAGE, 'unexpected peerAddress in version message');\n                return;\n            }\n            this._peerAddressVerified = true;\n        }\n\n        // The client might not send its netAddress. Set it from our address database if we have it.\n        if (!peerAddress.netAddress) {\n            /** @type {PeerAddress} */\n            const storedAddress = this._addresses.get(peerAddress);\n            if (storedAddress && storedAddress.netAddress) {\n                peerAddress.netAddress = storedAddress.netAddress;\n            }\n        }\n\n        // Set/update the channel's peer address.\n        this._channel.peerAddress = peerAddress;\n\n        // Create peer object. Since the initial version message received from the\n        // peer contains their local timestamp, we can use it to calculate their\n        // offset to our local timestamp and store it for later (last argument).\n        this._peer = new Peer(\n            this._channel,\n            msg.version,\n            msg.headHash,\n            peerAddress.timestamp - now\n        );\n\n        this._peerChallengeNonce = msg.challengeNonce;\n        this._versionReceived = true;\n\n        // Tell listeners that we received this peer's version information.\n        // Listeners registered to this event might close the connection to this peer.\n        this.fire('version', this._peer, this);\n\n        // Abort handshake if the connection was closed.\n        if (this._channel.closed) {\n            return;\n        }\n\n        if (!this._versionSent) {\n            this.handshake();\n            return;\n        }\n\n        if (this._peerAddressVerified) {\n            this._sendVerAck();\n        }\n\n        if (this._verackReceived) {\n            this._finishHandshake();\n        }\n    }\n\n    _sendVerAck() {\n        Assert.that(this._peerAddressVerified);\n\n        const data = BufferUtils.concatTypedArrays(this._channel.peerAddress.peerId.serialize(), this._peerChallengeNonce);\n        const signature = Signature.create(this._networkConfig.keyPair.privateKey, this._networkConfig.keyPair.publicKey, data);\n        this._channel.verack(this._networkConfig.keyPair.publicKey, signature);\n\n        this._verackSent = true;\n    }\n\n    /**\n     * @param {VerAckMessage} msg\n     * @private\n     */\n    _onVerAck(msg) {\n        Log.d(NetworkAgent, () => `[VERACK] from ${this._channel.peerAddress}`);\n\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) {\n            return;\n        }\n\n        // Ignore duplicate verack messages.\n        if (this._verackReceived) {\n            Log.d(NetworkAgent, () => `Ignoring duplicate verack message from ${this._channel.peerAddress}`);\n            return;\n        }\n\n        // Clear the verack timeout.\n        this._timers.clearTimeout('verack');\n\n        // Verify public key\n        if (!msg.publicKey.toPeerId().equals(this._channel.peerAddress.peerId)) {\n            this._channel.close(CloseType.INVALID_PUBLIC_KEY_IN_VERACK_MESSAGE, 'Invalid public key in verack message');\n            return;\n        }\n\n        // Verify signature\n        const data = BufferUtils.concatTypedArrays(this._networkConfig.peerAddress.peerId.serialize(), this._challengeNonce);\n        if (!msg.signature.verify(msg.publicKey, data)) {\n            this._channel.close(CloseType.INVALID_SIGNATURE_IN_VERACK_MESSAGE, 'Invalid signature in verack message');\n            return;\n        }\n\n        if (!this._peerAddressVerified) {\n            this._peerAddressVerified = true;\n            this._sendVerAck();\n        }\n\n        // Remember that the peer has sent us this address.\n        this._knownAddresses.add(this._channel.peerAddress);\n\n        this._verackReceived = true;\n\n        if (this._verackSent) {\n            this._finishHandshake();\n        }\n    }\n\n    _finishHandshake() {\n        // Setup regular connectivity check.\n        // TODO randomize interval?\n        this._timers.setInterval('connectivity',\n            () => this._checkConnectivity(),\n            NetworkAgent.CONNECTIVITY_CHECK_INTERVAL);\n\n        // Regularly announce our address.\n        this._timers.setInterval('announce-addr',\n            () => this._channel.addr([this._networkConfig.peerAddress]),\n            NetworkAgent.ANNOUNCE_ADDR_INTERVAL);\n\n        // Tell listeners that the handshake with this peer succeeded.\n        this.fire('handshake', this._peer, this);\n\n        // Request new network addresses from the peer.\n        this._requestAddresses();\n    }\n\n\n    /* Addresses */\n\n    _requestAddresses() {\n        // Request addresses from peer.\n        this._channel.getAddr(this._networkConfig.protocolMask, this._networkConfig.services.accepted);\n\n        // We don't use a timeout here. The peer will not respond with an addr message if\n        // it doesn't have any new addresses.\n    }\n\n    /**\n     * @param {AddrMessage} msg\n     * @private\n     */\n    async _onAddr(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) {\n            return;\n        }\n\n        // Reject messages that contain more than 1000 addresses, ban peer (bitcoin).\n        if (msg.addresses.length > NetworkAgent.MAX_ADDR_PER_MESSAGE) {\n            Log.w(NetworkAgent, 'Rejecting addr message - too many addresses');\n            this._channel.close(CloseType.ADDR_MESSAGE_TOO_LARGE, 'addr message too large');\n            return;\n        }\n\n        if (!this._addrLimit.note(msg.addresses.length)) {\n            Log.w(NetworkAgent, 'Rejecting addr message - rate-limit exceeded');\n            this._channel.close(CloseType.RATE_LIMIT_EXCEEDED, 'rate-limit exceeded');\n            return;\n        }\n\n        // Check the addresses the peer send us.\n        for (const addr of msg.addresses) {\n            if (!addr.verifySignature()) {\n                this._channel.close(CloseType.INVALID_ADDR, 'invalid addr');\n                return;\n            }\n\n            if (addr.protocol === Protocol.WS && !addr.globallyReachable()) {\n                this._channel.close(CloseType.ADDR_NOT_GLOBALLY_REACHABLE, 'addr not globally reachable');\n                return;\n            }\n\n            this._knownAddresses.add(addr);\n        }\n\n        // Put the new addresses in the address pool.\n        this._addresses.add(this._channel, msg.addresses);\n\n        // Tell listeners that we have received new addresses.\n        this.fire('addr', msg.addresses, this);\n    }\n\n    /**\n     * @private\n     * @param {GetAddrMessage} msg\n     * @return {void}\n     */\n    _onGetAddr(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) {\n            return;\n        }\n\n        // Find addresses that match the given serviceMask.\n        const addresses = this._addresses.query(msg.protocolMask, msg.serviceMask, NetworkAgent.MAX_ADDR_PER_MESSAGE);\n\n        const filteredAddresses = addresses.filter(addr => {\n            // Exclude RTC addresses that are already at MAX_DISTANCE.\n            if (addr.protocol === Protocol.RTC && addr.distance >= PeerAddressBook.MAX_DISTANCE) {\n                return false;\n            }\n\n            // Exclude known addresses from the response unless they are older than RELAY_THROTTLE.\n            const knownAddress = this._knownAddresses.get(addr);\n            return !knownAddress || knownAddress.timestamp < Date.now() - NetworkAgent.RELAY_THROTTLE;\n        });\n\n        // Send the addresses back to the peer.\n        // If we don't have any new addresses, don't send the message at all.\n        if (filteredAddresses.length) {\n            this._channel.addr(filteredAddresses);\n        }\n    }\n\n    /* Connectivity Check */\n\n    _checkConnectivity() {\n        // Generate random nonce.\n        const nonce = NumberUtils.randomUint32();\n\n        // Send ping message to peer.\n        // If sending the ping message fails, assume the connection has died.\n        if (!this._channel.ping(nonce)) {\n            this._channel.close(CloseType.SENDING_PING_MESSAGE_FAILED, 'sending ping message failed');\n            return;\n        }\n\n        // Save ping timestamp to detect the speed of the connection.\n        const startTime = Date.now();\n        this._pingTimes.set(nonce, startTime);\n\n        // Expect the peer to answer with a pong message if we haven't heard anything from it\n        // within the last CONNECTIVITY_CHECK_INTERVAL. Drop the peer otherwise.\n        if (this._channel.lastMessageReceivedAt < startTime - NetworkAgent.CONNECTIVITY_CHECK_INTERVAL) {\n            this._timers.setTimeout(`ping_${nonce}`, () => {\n                this._timers.clearTimeout(`ping_${nonce}`);\n                this._pingTimes.delete(nonce);\n                this._channel.close(CloseType.PING_TIMEOUT, 'ping timeout');\n            }, NetworkAgent.PING_TIMEOUT);\n        }\n    }\n\n    /**\n     * @param {PingMessage} msg\n     * @private\n     */\n    _onPing(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) {\n            return;\n        }\n\n        // Respond with a pong message\n        this._channel.pong(msg.nonce);\n    }\n\n    /**\n     * @param {PongMessage} msg\n     * @fires NetworkAgent#ping-pong\n     * @private\n     */\n    _onPong(msg) {\n        // Clear the ping timeout for this nonce.\n        this._timers.clearTimeout(`ping_${msg.nonce}`);\n\n        /** @type {number} */\n        const startTime = this._pingTimes.get(msg.nonce);\n        if (startTime) {\n            const delta = Date.now() - startTime;\n            if (delta > 0) {\n                this.fire('ping-pong', delta);\n            }\n            this._pingTimes.delete(msg.nonce);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _onClose() {\n        // Clear all timers and intervals when the peer disconnects.\n        this._timers.clearAll();\n        this._addrQueue.stop();\n    }\n\n    /**\n     * @param {Message} msg\n     * @return {boolean}\n     * @private\n     */\n    _canAcceptMessage(msg) {\n        // The first message must be the version message.\n        if (!this._versionReceived && msg.type !== Message.Type.VERSION) {\n            Log.w(NetworkAgent, `Discarding '${PeerChannel.Event[msg.type] || msg.type}' message from ${this._channel}`\n                + ' - no version message received previously');\n            return false;\n        }\n        if (this._versionReceived && !this._verackReceived && msg.type !== Message.Type.VERACK) {\n            Log.w(NetworkAgent, `Discarding '${PeerChannel.Event[msg.type] || msg.type}' message from ${this._channel}`\n                + ' - no verack message received previously');\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {PeerChannel} */\n    get channel() {\n        return this._channel;\n    }\n\n    /** @type {Peer} */\n    get peer() {\n        return this._peer;\n    }\n}\n\nNetworkAgent.HANDSHAKE_TIMEOUT = 1000 * 4; // 4 seconds\nNetworkAgent.PING_TIMEOUT = 1000 * 10; // 10 seconds\nNetworkAgent.CONNECTIVITY_CHECK_INTERVAL = 1000 * 60; // 1 minute\nNetworkAgent.ANNOUNCE_ADDR_INTERVAL = 1000 * 60 * 5; // 5 minutes\nNetworkAgent.RELAY_THROTTLE = 1000 * 60 * 2; // 2 minutes\nNetworkAgent.VERSION_ATTEMPTS_MAX = 10;\nNetworkAgent.VERSION_RETRY_DELAY = 500; // 500 ms\nNetworkAgent.ADDR_RATE_LIMIT = 2000;\nNetworkAgent.ADDR_QUEUE_INTERVAL = 5000;\nNetworkAgent.MAX_ADDR_PER_MESSAGE = 1000;\nNetworkAgent.MAX_ADDR_RELAY_PER_MESSAGE = 10;\nClass.register(NetworkAgent);\n","class PeerConnectionStatistics {\n    /**\n     * @constructor\n     */\n    constructor() {\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        this._latencies = [];\n\n        /**\n         * @type {HashMap<number, number>}\n         * @private\n         */\n        this._messages = new HashMap();\n    }\n\n    /**\n     * @returns {void}\n     */\n    reset() {\n        this._latencies = [];\n        this._messages = new HashMap();\n    }\n\n    /**\n     * @param {number} latency\n     * @returns {void}\n     */\n    addLatency(latency) {\n        this._latencies.push(latency);\n    }\n\n    /**\n     * @param {Message} msg\n     * @returns {void}\n     */\n    addMessage(msg) {\n        this._messages.put(msg.type, this._messages.contains(msg.type) ? this._messages.get(msg.type) + 1 : 1);\n    }\n\n    /**\n     * @param {number} msgType\n     * @returns {number}\n     */\n    getMessageCount(msgType) {\n        return this._messages.contains(msgType) ? this._messages.get(msgType) : 0;\n    }\n\n    /** @type {number} */\n    get latencyMedian() {\n        const length = this._latencies.length;\n\n        if (length === 0) {\n            return 0;\n        }\n\n        this._latencies.sort((a, b) => a - b);\n        let median;\n        if ((length % 2) === 0) {\n            median = Math.round((this._latencies[(length / 2) - 1] + this._latencies[length / 2]) / 2);\n        } else {\n            median = this._latencies[(length - 1) / 2];\n        }\n        return median;\n    }\n\n}\nClass.register(PeerConnectionStatistics);\n","class PeerConnection {\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {PeerConnection}\n     */\n    static getOutbound(peerAddress) {\n        const peerConnection = new PeerConnection();\n        peerConnection._peerAddress = peerAddress;\n        peerConnection._state = PeerConnectionState.CONNECTING;\n        return peerConnection;\n    }\n\n    /**\n     * @param {NetworkConnection} networkConnection\n     * @returns {PeerConnection}\n     */\n    static getInbound(networkConnection) {\n        const peerConnection = new PeerConnection();\n        peerConnection._networkConnection = networkConnection;\n        return peerConnection;\n    }\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        // Unique id for this connection.\n        /** @type {number} */\n        this._id = PeerConnection._instanceCount++;\n\n        /**\n         * @type {PeerAddress}\n         * @private\n         */\n        this._peerAddress = null;\n\n        // Helper Objects are added during lifecycle\n        /**\n         * @type {NetworkConnection}\n         * @private\n         */\n        this._networkConnection = null;\n \n        /**\n         * @type {PeerChannel}\n         * @private\n         */\n        this._peerChannel = null;\n\n        /**\n         * @type {NetworkAgent}\n         * @private\n         */\n        this._networkAgent = null;\n\n        /**\n         * @type {Peer}\n         * @private\n         */\n        this._peer = null;\n\n        /**\n         * Lifecycle state of connection\n         * @type {number}\n         * @private\n         */\n        this._state = PeerConnectionState.NEW;\n\n        /**\n         * Latest score given, computed by PeerScorer\n         * @type {number}\n         * @private\n         */\n        this._score = null;\n\n        /**\n         * @type {number}\n         * @private\n         */\n        this._establishedSince = null;\n\n        /**\n         * @type {PeerConnectionStatistics}\n         * @private\n         */\n        this._statistics = new PeerConnectionStatistics();\n    }\n\n    /** @type {number} */\n    get id() {\n        return this._id;\n    }\n\n    /** @type {number} */\n    get state() {\n        return this._state;\n    }\n\n    /** @type {PeerAddress} */\n    get peerAddress() {\n        return this._peerAddress;\n    }\n\n    /** @param {PeerAddress} value */\n    set peerAddress(value) {\n        this._peerAddress = value;\n    }\n\n    /** @type {NetworkConnection} */\n    get networkConnection() {\n        return this._networkConnection;\n    }\n\n    /** @param {NetworkConnection} value */\n    set networkConnection(value) {\n        this._networkConnection = value;\n        this._state = PeerConnectionState.CONNECTED;\n    }\n\n    /** @type {PeerChannel} */\n    get peerChannel() {\n        return this._peerChannel;\n    }\n\n    /** @param {PeerChannel} value */\n    set peerChannel(value) {\n        this._peerChannel = value;\n    }\n\n    /** @type {NetworkAgent} */\n    get networkAgent() {\n        return this._networkAgent;\n    }\n\n    /** @param {NetworkAgent} value */\n    set networkAgent(value) {\n        this._networkAgent = value;\n    }\n\n    /**\n     * @returns {void}\n     */\n    negotiating() {\n        Assert.that(this._state === PeerConnectionState.CONNECTED);\n        this._state = PeerConnectionState.NEGOTIATING;\n    }\n\n    /** @type {Peer} */\n    get peer() {\n        return this._peer;\n    }\n\n    /** @param {Peer} value */\n    set peer(value) {\n        this._peer = value;\n        this._state = PeerConnectionState.ESTABLISHED;\n        this._establishedSince = Date.now();\n\n        // start statistics\n        this._networkAgent.on('ping-pong', (latency) => this._statistics.addLatency(latency));\n        this._peerChannel.on('message-log', (msg) => this._statistics.addMessage(msg));\n    }\n\n    /** @type {number} */\n    get score() {\n        return this._score;\n    }\n\n    /** @param {number} value */\n    set score(value) {\n        this._score = value;\n    }\n\n    /** @type {number} */\n    get establishedSince() {\n        return this._establishedSince;\n    }\n\n    /** @type {number} */\n    get ageEstablished() {\n        return Date.now() - this.establishedSince;\n    }\n\n    /** @type {PeerConnectionStatistics} */\n    get statistics() {\n        return this._statistics;\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._state = PeerConnectionState.CLOSED;\n        this._networkConnection = null;\n        this._networkAgent = null;\n        this._peerChannel = null;\n        this._peer = null;\n    }\n}\n// Used to generate unique PeerConnection ids.\nPeerConnection._instanceCount = 0;\nClass.register(PeerConnection);\n\nclass PeerConnectionState {\n}\nPeerConnectionState.NEW = 1;\nPeerConnectionState.CONNECTING = 2;\nPeerConnectionState.CONNECTED = 3;\nPeerConnectionState.NEGOTIATING = 4;\nPeerConnectionState.ESTABLISHED = 5;\nPeerConnectionState.CLOSED = 6;\nClass.register(PeerConnectionState);\n","class SignalProcessor {\n    /**\n     * @constructor\n     * @param {PeerAddressBook} peerAddresses\n     * @param {NetworkConfig} networkConfig\n     * @param {WebRtcConnector} rtcConnector\n     */\n    constructor(peerAddresses, networkConfig, rtcConnector) {\n        /**\n         * @type {PeerAddressBook}\n         * @private\n         */\n        this._addresses = peerAddresses;\n\n        /**\n         * @type {NetworkConfig}\n         * @private\n         */\n        this._networkConfig = networkConfig;\n\n        /**\n         * @type {WebRtcConnector}\n         * @private\n         */\n        this._rtcConnector = rtcConnector;\n\n        /**\n         * @type {SignalStore}\n         * @private\n         */\n        this._forwards = new SignalStore();\n    }\n\n    /**\n     * @param {PeerChannel} channel\n     * @param {SignalMessage} msg\n     * @returns {void}\n     */\n    onSignal(channel, msg) {\n        // Discard signals with invalid TTL.\n        if (msg.ttl > Network.SIGNAL_TTL_INITIAL) {\n            channel.close(CloseType.INVALID_SIGNAL_TTL, 'invalid signal ttl');\n            return;\n        }\n\n        // Discard signals that have a payload, which is not properly signed.\n        if (msg.hasPayload() && !msg.verifySignature()) {\n            channel.close(CloseType.INVALID_SIGNATURE, 'invalid signature');\n            return;\n        }\n\n        // Can be undefined for non-rtc nodes.\n        const myPeerId = this._networkConfig.peerAddress.peerId;\n\n        // Discard signals from myself.\n        if (msg.senderId.equals(myPeerId)) {\n            Log.w(SignalProcessor, `Received signal from myself to ${msg.recipientId} from ${channel.peerAddress} (myId: ${myPeerId})`);\n            return;\n        }\n\n        // If the signal has the unroutable flag set and we previously forwarded a matching signal,\n        // mark the route as unusable.\n        if (msg.isUnroutable() && this._forwards.signalForwarded(/*senderId*/ msg.recipientId, /*recipientId*/ msg.senderId, /*nonce*/ msg.nonce)) {\n            const senderAddr = this._addresses.getByPeerId(msg.senderId);\n            this._addresses.unroutable(channel, senderAddr);\n        }\n\n        // If the signal is intended for us, pass it on to our WebRTC connector.\n        if (msg.recipientId.equals(myPeerId)) {\n            // If we sent out a signal that did not reach the recipient because of TTL\n            // or it was unroutable, delete this route.\n            if (this._rtcConnector.isValidSignal(msg) && (msg.isUnroutable() || msg.isTtlExceeded())) {\n                const senderAddr = this._addresses.getByPeerId(msg.senderId);\n                this._addresses.unroutable(channel, senderAddr);\n            }\n            this._rtcConnector.onSignal(channel, msg);\n            return;\n        }\n\n        // Discard signals that have reached their TTL.\n        if (msg.ttl <= 0) {\n            Log.d(SignalProcessor, `Discarding signal from ${msg.senderId} to ${msg.recipientId} - TTL reached`);\n            // Send signal containing TTL_EXCEEDED flag back in reverse direction.\n            if (msg.flags === 0) {\n                channel.signal(/*senderId*/ msg.recipientId, /*recipientId*/ msg.senderId, msg.nonce, Network.SIGNAL_TTL_INITIAL, SignalMessage.Flag.TTL_EXCEEDED);\n            }\n            return;\n        }\n\n        // Otherwise, try to forward the signal to the intended recipient.\n        const signalChannel = this._addresses.getChannelByPeerId(msg.recipientId);\n        if (!signalChannel) {\n            Log.d(SignalProcessor, `Failed to forward signal from ${msg.senderId} to ${msg.recipientId} - no route found`);\n            // If we don't know a route to the intended recipient, return signal to sender with unroutable flag set and payload removed.\n            // Only do this if the signal is not already a unroutable response.\n            if (msg.flags === 0) {\n                channel.signal(/*senderId*/ msg.recipientId, /*recipientId*/ msg.senderId, msg.nonce, Network.SIGNAL_TTL_INITIAL, SignalMessage.Flag.UNROUTABLE);\n            }\n            return;\n        }\n\n        // Discard signal if our shortest route to the target is via the sending peer.\n        // XXX Why does this happen?\n        if (signalChannel.peerAddress.equals(channel.peerAddress)) {\n            Log.w(SignalProcessor, `Discarding signal from ${msg.senderId} to ${msg.recipientId} - shortest route via sending peer`);\n            // If our best route is via the sending peer, return signal to sender with unroutable flag set and payload removed.\n            // Only do this if the signal is not already a unroutable response.\n            if (msg.flags === 0) {\n                channel.signal(/*senderId*/ msg.recipientId, /*recipientId*/ msg.senderId, msg.nonce, Network.SIGNAL_TTL_INITIAL, SignalMessage.Flag.UNROUTABLE);\n            }\n            return;\n        }\n\n        // Decrement ttl and forward signal.\n        signalChannel.signal(msg.senderId, msg.recipientId, msg.nonce, msg.ttl - 1, msg.flags, msg.payload, msg.senderPubKey, msg.signature);\n\n        // We store forwarded messages if there are no special flags set.\n        if (msg.flags === 0) {\n            this._forwards.add(msg.senderId, msg.recipientId, msg.nonce);\n        }\n\n        // XXX This is very spammy!!!\n        // Log.v(Network, `Forwarding signal (ttl=${msg.ttl}) from ${msg.senderId} `\n        //     + `(received from ${channel.peerAddress}) to ${msg.recipientId} `\n        //     + `(via ${signalChannel.peerAddress})`);\n    }\n}\nClass.register(SignalProcessor);\n\nclass SignalStore {\n    /**\n     * @param {number} maxSize maximum number of entries\n     */\n    constructor(maxSize = 1000) {\n        /** @type {number} */\n        this._maxSize = maxSize;\n        /** @type {Queue.<ForwardedSignal>} */\n        this._queue = new Queue();\n        /** @type {HashMap.<ForwardedSignal, number>} */\n        this._store = new HashMap();\n    }\n\n    /** @type {number} */\n    get length() {\n        return this._queue.length;\n    }\n\n    /**\n     * @param {PeerId} senderId\n     * @param {PeerId} recipientId\n     * @param {number} nonce\n     */\n    add(senderId, recipientId, nonce) {\n        // If we already forwarded such a message, just update timestamp.\n        if (this.contains(senderId, recipientId, nonce)) {\n            const signal = new ForwardedSignal(senderId, recipientId, nonce);\n            this._store.put(signal, Date.now());\n            this._queue.remove(signal);\n            this._queue.enqueue(signal);\n            return;\n        }\n\n        // Delete oldest if needed.\n        if (this.length >= this._maxSize) {\n            const oldest = this._queue.dequeue();\n            this._store.remove(oldest);\n        }\n        const signal = new ForwardedSignal(senderId, recipientId, nonce);\n        this._queue.enqueue(signal);\n        this._store.put(signal, Date.now());\n    }\n\n    /**\n     * @param {PeerId} senderId\n     * @param {PeerId} recipientId\n     * @param {number} nonce\n     * @return {boolean}\n     */\n    contains(senderId, recipientId, nonce) {\n        const signal = new ForwardedSignal(senderId, recipientId, nonce);\n        return this._store.contains(signal);\n    }\n\n    /**\n     * @param {PeerId} senderId\n     * @param {PeerId} recipientId\n     * @param {number} nonce\n     * @return {boolean}\n     */\n    signalForwarded(senderId, recipientId, nonce) {\n        const signal = new ForwardedSignal(senderId, recipientId, nonce);\n        const lastSeen = this._store.get(signal);\n        if (!lastSeen) {\n            return false;\n        }\n        const valid = lastSeen + ForwardedSignal.SIGNAL_MAX_AGE > Date.now();\n        if (!valid) {\n            // Because of the ordering, we know that everything after that is invalid too.\n            const toDelete = this._queue.dequeueUntil(signal);\n            for (const dSignal of toDelete) {\n                this._store.remove(dSignal);\n            }\n        }\n        return valid;\n    }\n}\nSignalStore.SIGNAL_MAX_AGE = 10 /* seconds */;\nClass.register(SignalStore);\n\nclass ForwardedSignal {\n    /**\n     * @param {PeerId} senderId\n     * @param {PeerId} recipientId\n     * @param {number} nonce\n     */\n    constructor(senderId, recipientId, nonce) {\n        /** @type {PeerId} */\n        this._senderId = senderId;\n        /** @type {PeerId} */\n        this._recipientId = recipientId;\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {ForwardedSignal} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof ForwardedSignal\n            && this._senderId.equals(o._senderId)\n            && this._recipientId.equals(o._recipientId)\n            && this._nonce === o._nonce;\n    }\n\n    hashCode() {\n        return this.toString();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `ForwardedSignal{senderId=${this._senderId}, recipientId=${this._recipientId}, nonce=${this._nonce}}`;\n    }\n}\nClass.register(ForwardedSignal);\n","class ConnectionPool extends Observable {\n    /**\n     * @constructor\n     * @param {PeerAddressBook} peerAddresses\n     * @param {NetworkConfig} networkConfig\n     * @param {IBlockchain} blockchain\n     * @param {Time} time\n     * @listens WebSocketConnector#connection\n     * @listens WebSocketConnector#error\n     * @listens WebRtcConnector#connection\n     * @listens WebRtcConnector#error\n     */\n    constructor(peerAddresses, networkConfig, blockchain, time) {\n        super();\n\n        /**\n         * @type {PeerAddressBook}\n         * @private\n         */\n        this._addresses = peerAddresses;\n\n        /**\n         * @type {NetworkConfig}\n         * @private\n         */\n        this._networkConfig = networkConfig;\n\n        /**\n         * @type {IBlockchain}\n         * @private\n         */\n        this._blockchain = blockchain;\n\n        /**\n         * @type {Time}\n         * @private\n         */\n        this._time = time;\n\n        /**\n         * HashMap from peerAddresses to connections.\n         * @type {HashMap.<PeerAddress, PeerConnection>}\n         * @private\n         */\n        this._connectionsByPeerAddress = new HashMap();\n        \n        /**\n         * HashMap from netAddresses to connections.\n         * @type {HashMap.<NetAddress, Array.<PeerConnection>>}\n         * @private\n         */\n        this._connectionsByNetAddress = new HashMap();\n\n        /**\n         * HashMap from subnet addresses to connections.\n         * @type {HashMap.<NetAddress, Array.<PeerConnection>>}\n         * @private\n         */\n        this._connectionsBySubnet = new HashMap();\n\n        // Total bytes sent/received on past connections.\n        /** @type {number} */\n        this._bytesSent = 0;\n        /** @type {number} */\n        this._bytesReceived = 0;\n\n        /** @type {WebSocketConnector} */\n        this._wsConnector = new WebSocketConnector(this._networkConfig);\n        this._wsConnector.on('connection', conn => this._onConnection(conn));\n        this._wsConnector.on('error', (peerAddr, e) => this._onConnectError(peerAddr, e));\n\n        /** @type {WebRtcConnector} */\n        this._rtcConnector = new WebRtcConnector(this._networkConfig);\n        this._rtcConnector.on('connection', conn => this._onConnection(conn));\n        this._rtcConnector.on('error', (peerAddr, reason) => this._onConnectError(peerAddr, reason));\n\n        // Various counters for established connections.\n        /** @type {number} */\n        this._peerCountWs = 0;\n        /** @type {number} */\n        this._peerCountRtc = 0;\n        /** @type {number} */\n        this._peerCountDumb = 0;\n        /** @type {number} */\n        this._peerCountFull = 0;\n        /** @type {number} */\n        this._peerCountLight = 0;\n        /** @type {number} */\n        this._peerCountNano = 0;\n        /** @type {number} */\n        this._peerCountOutbound = 0;\n        /** @type {number} */\n        this._peerCountFullWsOutbound = 0;\n\n        /**\n         * Number of ongoing outbound connection attempts.\n         * @type {number}\n         * @private\n         */\n        this._connectingCount = 0;\n\n        /**\n         * Number of not established inbound connections.\n         * @type {number}\n         * @private\n         */\n        this._inboundCount = 0;\n\n        /** @type {SignalProcessor} */\n        this._signalProcessor = new SignalProcessor(peerAddresses, networkConfig, this._rtcConnector);\n\n        // When true, send a signal to network to close an established connection for a incoming one\n        /** @type {boolean} */\n        this._allowInboundExchange = false;\n\n        // Whether we allow inbound connections. Does not apply to WebRTC connections.\n        /** @type {boolean} */\n        this._allowInboundConnections = false;\n\n        /** @type {HashMap.<NetAddress, number>} */\n        this._bannedIPv4IPs = new HashMap();\n\n        /** @type {HashMap.<Uint8Array, number>} */\n        this._bannedIPv6IPs = new HashMap();\n\n        setInterval(() => this._checkUnbanIps(), ConnectionPool.UNBAN_IPS_INTERVAL);\n    }\n\n    /**\n     * @returns {Array.<PeerConnection>}\n     */\n    values() {\n        return Array.from(this._connectionsByPeerAddress.values());\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {PeerConnection|null}\n     */\n    getConnectionByPeerAddress(peerAddress) {\n        return this._connectionsByPeerAddress.get(peerAddress);\n    }\n\n    /**\n     * @param {NetAddress} netAddress\n     * @returns {Array.<PeerConnection>}\n     */\n    getConnectionsByNetAddress(netAddress) {\n        return this._connectionsByNetAddress.get(netAddress) || [];\n    }\n\n    /**\n     * @param {NetAddress} netAddress\n     * @returns {Array.<PeerConnection>}\n     */\n    getConnectionsBySubnet(netAddress) {\n        return this._connectionsBySubnet.get(this._getSubnetAddress(netAddress)) || [];\n    }\n\n    /**\n     * @param {NetAddress} netAddress\n     * @returns {Array.<PeerConnection>}\n     */\n    getOutboundConnectionsBySubnet(netAddress) {\n        return (this._connectionsBySubnet.get(this._getSubnetAddress(netAddress)) || [])\n            .filter(/** @type {PeerConnection} */ peerConnection => peerConnection.networkConnection.outbound);\n    }\n\n    /**\n     * @param {NetAddress} netAddress\n     * @returns {NetAddress}\n     */\n    _getSubnetAddress(netAddress) {\n        return netAddress.subnet(netAddress.isIPv4() ? Network.IPV4_SUBNET_MASK : Network.IPV6_SUBNET_MASK);\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @returns {void}\n     * @private\n     */\n    _add(peerConnection) {\n        if (peerConnection.peerAddress) {\n            this._connectionsByPeerAddress.put(peerConnection.peerAddress, peerConnection);\n        }\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @returns {void}\n     * @private\n     */\n    _remove(peerConnection) {\n        if (peerConnection.peerAddress) {\n            this._connectionsByPeerAddress.remove(peerConnection.peerAddress);\n        }\n\n        if (peerConnection.networkConnection && peerConnection.networkConnection.netAddress) {\n            this._removeNetAddress(peerConnection, peerConnection.networkConnection.netAddress);\n        }\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @param {NetAddress} netAddress\n     * @returns {void}\n     * @private\n     */\n    _addNetAddress(peerConnection, netAddress) {\n        // Only add reliable netAddresses.\n        if (netAddress.isPseudo() || !netAddress.reliable) {\n            return;\n        }\n\n        if (this._connectionsByNetAddress.contains(netAddress)) {\n            this._connectionsByNetAddress.get(netAddress).push(peerConnection);\n        } else {\n            this._connectionsByNetAddress.put(netAddress, [peerConnection]);\n        }\n\n        const subnetAddress = this._getSubnetAddress(netAddress);\n        if (this._connectionsBySubnet.contains(subnetAddress)) {\n            this._connectionsBySubnet.get(subnetAddress).push(peerConnection);\n        } else {\n            this._connectionsBySubnet.put(subnetAddress, [peerConnection]);\n        }\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @param {NetAddress} netAddress\n     * @returns {void}\n     * @private\n     */\n    _removeNetAddress(peerConnection, netAddress) {\n        if (netAddress.isPseudo() || !netAddress.reliable) {\n            return;\n        }\n\n        if (this._connectionsByNetAddress.contains(netAddress)) {\n            const peerConnections = this._connectionsByNetAddress.get(netAddress);\n\n            const index = peerConnections.indexOf(peerConnection);\n            if (index >= 0) {\n                peerConnections.splice(index, 1);\n            }\n\n            if (peerConnections.length === 0) {\n                this._connectionsByNetAddress.remove(netAddress);\n            }\n        }\n\n        const subnetAddress = this._getSubnetAddress(netAddress);\n        if (this._connectionsBySubnet.contains(subnetAddress)) {\n            const peerConnections = this._connectionsBySubnet.get(subnetAddress);\n\n            const index = peerConnections.indexOf(peerConnection);\n            if (index >= 0) {\n                peerConnections.splice(index, 1);\n            }\n\n            if (peerConnections.length === 0) {\n                this._connectionsBySubnet.remove(subnetAddress);\n            }\n        }\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {boolean}\n     */\n    _checkOutboundConnectionRequest(peerAddress) {\n        if (peerAddress === null) {\n            return false;\n        }\n\n        if (peerAddress.protocol !== Protocol.WS && peerAddress.protocol !== Protocol.RTC) {\n            Log.e(ConnectionPool, `Cannot connect to ${peerAddress} - unsupported protocol`);\n            return false;\n        }\n\n        if (this._addresses.isBanned(peerAddress)){\n            Log.e(ConnectionPool, `Connecting to banned address ${peerAddress}`);\n            return false;\n        }\n\n        const peerConnection = this.getConnectionByPeerAddress(peerAddress);\n        if (peerConnection) {\n            Log.e(ConnectionPool, `Duplicate connection to ${peerAddress}`);\n            return false;\n        }\n\n        // Forbid connection if we have too many connections to the peer's IP address.\n        if (peerAddress.netAddress && peerAddress.netAddress.reliable) {\n            if (this.getConnectionsByNetAddress(peerAddress.netAddress).length >= Network.PEER_COUNT_PER_IP_MAX) {\n                Log.e(ConnectionPool, `connection limit per ip (${Network.PEER_COUNT_PER_IP_MAX}) reached`);\n                return false;\n            }\n\n            if (this.getOutboundConnectionsBySubnet(peerAddress.netAddress).length >= Network.OUTBOUND_PEER_COUNT_PER_SUBNET_MAX) {\n                Log.e(ConnectionPool, `connection limit per ip (${Network.OUTBOUND_PEER_COUNT_PER_SUBNET_MAX}) reached`);\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {boolean}\n     */\n    connectOutbound(peerAddress) {\n        // all checks in one step\n        if (!this._checkOutboundConnectionRequest(peerAddress)) {\n            return false;\n        }\n\n        // Connection request accepted.\n\n        // create fresh PeerConnection instance\n        const peerConnection = PeerConnection.getOutbound(peerAddress);\n        this._add(peerConnection);\n\n        // choose connector type and call\n        let connecting = false;\n        if (peerAddress.protocol === Protocol.WS) {\n            connecting = this._wsConnector.connect(peerAddress);\n        } else {\n            const signalChannel = this._addresses.getChannelByPeerId(peerAddress.peerId);\n            connecting = this._rtcConnector.connect(peerAddress, signalChannel);\n        }\n\n        if (connecting) {\n            this._connectingCount++;\n        } else {\n            this._remove(peerConnection);\n            Log.d(Network, `Outbound attempt not connecting: ${peerAddress}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @returns {boolean}\n     * @private\n     */\n    _checkConnection(peerConnection) {\n        /** @type {NetworkConnection} */\n        const conn = peerConnection.networkConnection;\n\n        // Close connection if we currently do not allow inbound connections. WebRTC connections are exempt.\n        if (conn.inbound && !this._allowInboundConnections && conn.protocol !== Protocol.RTC) {\n            conn.close(CloseType.INBOUND_CONNECTIONS_BLOCKED, 'inbound connections are blocked temporarily');\n            return false;\n        }\n\n        if (conn.netAddress && !conn.netAddress.isPseudo() && conn.netAddress.reliable) {\n            // Close connection if peer's IP is banned.\n            if (this._isIpBanned(conn.netAddress)) {\n                conn.close(CloseType.BANNED_IP, `connection with banned IP ${conn.netAddress}`);\n                return false;\n            }\n\n            // Close connection if we have too many connections to the peer's IP address.\n            if (this.getConnectionsByNetAddress(conn.netAddress).length >= Network.PEER_COUNT_PER_IP_MAX) {\n                conn.close(CloseType.CONNECTION_LIMIT_PER_IP, `connection limit per IP (${Network.PEER_COUNT_PER_IP_MAX}) reached`);\n                return false;\n            }\n\n            // Close connection if we have too many connections to the peer's subnet.\n            if (this.getConnectionsBySubnet(conn.netAddress).length >= Network.INBOUND_PEER_COUNT_PER_SUBNET_MAX) {\n                conn.close(CloseType.CONNECTION_LIMIT_PER_IP, `connection limit per subnet (${Network.INBOUND_PEER_COUNT_PER_SUBNET_MAX}) reached`);\n                return false;\n            }\n        }\n\n        // Reject peer if we have reached max peer count.\n        if (this.peerCount >= Network.PEER_COUNT_MAX\n            && !conn.outbound\n            && !(conn.inbound && this._allowInboundExchange)) {\n\n            conn.close(CloseType.MAX_PEER_COUNT_REACHED, `max peer count reached (${Network.PEER_COUNT_MAX})`);\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @listens PeerChannel#signal\n     * @listens NetworkAgent#handshake\n     * @listens NetworkAgent#close\n     * @fires ConnectionPool#connection\n     * @param {NetworkConnection} conn\n     * @returns {void}\n     * @private\n     */\n    _onConnection(conn) {\n        /** @type {PeerConnection} */\n        let peerConnection;\n        if (conn.outbound) {\n            this._connectingCount--;\n            Assert.that(this._connectingCount >= 0, 'connectingCount < 0');\n\n            peerConnection = this.getConnectionByPeerAddress(conn.peerAddress);\n\n            Assert.that(!!peerConnection, `PeerAddress not stored ${conn.peerAddress}`);\n            Assert.that(peerConnection.state === PeerConnectionState.CONNECTING,\n                `PeerConnection state not CONNECTING, but ${peerConnection.state} (${conn.peerAddress})`);\n        } else {\n            peerConnection = PeerConnection.getInbound(conn);\n            this._inboundCount++;\n        }\n\n        // Set peerConnection to CONNECTED state.\n        peerConnection.networkConnection = conn;\n\n        // Register close listener early to clean up correctly in case _checkConnection() closes the connection.\n        conn.on('close', (type, reason) => this._onClose(peerConnection, type, reason));\n\n        if (!this._checkConnection(peerConnection)) {\n            return;\n        }\n\n        // Connection accepted.\n\n        if (conn.netAddress && !conn.netAddress.isPseudo()) {\n            this._addNetAddress(peerConnection, conn.netAddress);\n        }\n\n        const connType = conn.inbound ? 'inbound' : 'outbound';\n        Log.d(ConnectionPool, `Connection established (${connType}) #${conn.id} ${conn.netAddress || conn.peerAddress || '<pending>'}`);\n\n        // Let listeners know about this connection.\n        this.fire('connection', conn);\n\n        // Create peer channel.\n        const channel = new PeerChannel(conn);\n        channel.on('signal', msg => this._signalProcessor.onSignal(channel, msg));\n \n        peerConnection.peerChannel = channel;\n\n        // Create network agent.\n        const agent = new NetworkAgent(this._blockchain, this._addresses, this._networkConfig, channel);\n        agent.on('version', peer => this._checkHandshake(peerConnection, peer));\n        agent.on('handshake', peer => this._onHandshake(peerConnection, peer));\n\n        peerConnection.networkAgent = agent;\n\n        // Initiate handshake with the peer.\n        agent.handshake();\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @param {Peer} peer\n     * @returns {boolean}\n     * @private\n     */\n    _checkHandshake(peerConnection, peer) {\n        // Close connection if peer's address is banned.\n        if (this._addresses.isBanned(peer.peerAddress)) {\n            peerConnection.peerChannel.close(CloseType.PEER_IS_BANNED,\n                `connection with banned address ${peer.peerAddress} (post version)`);\n            return false;\n        }\n\n        // Duplicate/simultaneous connection check (post version):\n        const storedConnection = this.getConnectionByPeerAddress(peer.peerAddress);\n        if (storedConnection && storedConnection.id !== peerConnection.id) {\n            // If we already have an established connection to this peer, close this connection.\n            if (storedConnection.state === PeerConnectionState.ESTABLISHED) {\n                peerConnection.peerChannel.close(CloseType.DUPLICATE_CONNECTION,\n                    'duplicate connection (post version)');\n                return false;\n            }\n        }\n\n        // Set peerConnection to NEGOTIATING state.\n        peerConnection.negotiating();\n\n        return true;\n    }\n\n    /**\n     * Handshake with this peer was successful.\n     * @fires ConnectionPool#peer-joined\n     * @fires ConnectionPool#peers-changed\n     * @fires ConnectionPool#recyling-request\n     * @param {PeerConnection} peerConnection\n     * @param {Peer} peer\n     * @returns {void}\n     * @private\n     */\n    _onHandshake(peerConnection, peer) {\n        if (peerConnection.networkConnection.inbound) {\n            // Re-check allowInboundExchange as it might have changed.\n            if (this.peerCount >= Network.PEER_COUNT_MAX && !this._allowInboundExchange) {\n                peerConnection.peerChannel.close(CloseType.MAX_PEER_COUNT_REACHED,\n                    `max peer count reached (${Network.PEER_COUNT_MAX})`);\n                return;\n            }\n\n            // Duplicate/simultaneous connection check (post handshake):\n            const storedConnection = this.getConnectionByPeerAddress(peer.peerAddress);\n            if (storedConnection && storedConnection.id !== peerConnection.id) {\n                switch (storedConnection.state) {\n                    case PeerConnectionState.CONNECTING:\n                        // Abort the stored connection attempt and accept this connection.\n                        Assert.that(peer.peerAddress.protocol === Protocol.WS, 'Duplicate connection to non-WS node');\n                        Log.d(ConnectionPool, `Aborting connection attempt to ${peer.peerAddress}, simultaneous inbound connection succeeded`);\n                        this._wsConnector.abort(peer.peerAddress);\n                        Assert.that(!this.getConnectionByPeerAddress(peer.peerAddress), 'PeerConnection not removed');\n                        break;\n\n                    case PeerConnectionState.ESTABLISHED:\n                        // If we have another established connection to this peer, close this connection.\n                        peerConnection.peerChannel.close(CloseType.DUPLICATE_CONNECTION,\n                            'duplicate connection (post handshake)');\n                        return;\n\n                    case PeerConnectionState.NEGOTIATING:\n                        // The peer with the lower peerId accepts this connection and closes his stored connection.\n                        if (this._networkConfig.peerAddress.peerId.compare(peer.peerAddress.peerId) < 0) {\n                            storedConnection.peerChannel.close(CloseType.SIMULTANEOUS_CONNECTION,\n                                'simultaneous connection (post handshake) - lower peerId');\n                            Assert.that(!this.getConnectionByPeerAddress(peer.peerAddress), 'PeerConnection not removed');\n                        }\n                        // The peer with the higher peerId closes this connection and keeps his stored connection.\n                        else {\n                            peerConnection.peerChannel.close(CloseType.SIMULTANEOUS_CONNECTION,\n                                'simultaneous connection (post handshake) - higher peerId');\n                            return;\n                        }\n                        break;\n\n                    default:\n                        // Accept this connection and close the stored connection.\n                        storedConnection.peerChannel.close(CloseType.SIMULTANEOUS_CONNECTION,\n                            `simultaneous connection (post handshake) - state ${storedConnection.state}`);\n                        Assert.that(!this.getConnectionByPeerAddress(peer.peerAddress), 'PeerConnection not removed');\n                }\n            }\n\n            Assert.that(!this.getConnectionByPeerAddress(peer.peerAddress), `PeerConnection ${peer.peerAddress} already exists`);\n            peerConnection.peerAddress = peer.peerAddress;\n            this._add(peerConnection);\n\n            this._inboundCount--;\n            Assert.that(this._inboundCount >= 0, 'inboundCount < 0');\n        }\n\n        // Handshake accepted.\n\n        // Check if we need to recycle a connection.\n        if (this.peerCount >= Network.PEER_COUNT_MAX) {\n            this.fire('recycling-request');\n        }\n\n        // Set peerConnection to ESTABLISHED state.\n        peerConnection.peer = peer;\n\n        if (peer.netAddress && !peer.netAddress.isPseudo() && this.getConnectionsByNetAddress(peer.netAddress).indexOf(peerConnection) < 0) {\n            this._addNetAddress(peerConnection, peer.netAddress);\n        }\n \n        this._updateConnectedPeerCount(peerConnection, 1);\n\n        this._addresses.established(peer.channel, peer.peerAddress);\n\n        // Let listeners know about this peer.\n        this.fire('peer-joined', peer);\n\n        // Let listeners know that the peers changed.\n        this.fire('peers-changed');\n\n        Log.d(ConnectionPool, () => `[PEER-JOINED] ${peer.peerAddress} ${peer.netAddress} (version=${peer.version}, services=${peer.peerAddress.services}, headHash=${peer.headHash.toBase64()})`);\n    }\n\n    /**\n     * This peer channel was closed.\n     * @param {PeerConnection} peerConnection\n     * @param {number} type\n     * @param {string} reason\n     * @fires ConnectionPool#peer-left\n     * @fires ConnectionPool#peers-changed\n     * @fires ConnectionPool#close\n     * @returns {void}\n     * @private\n     */\n    _onClose(peerConnection, type, reason) {\n        // Update total bytes sent/received.\n        this._bytesSent += peerConnection.networkConnection.bytesSent;\n        this._bytesReceived += peerConnection.networkConnection.bytesReceived;\n\n        // Only propagate the close type (i.e. track fails/bans) if the peerAddress is set.\n        // This is true for\n        // - all outbound connections\n        // - inbound connections post handshake (peerAddress is verified)\n        if (peerConnection.peerAddress) {\n            this._addresses.close(peerConnection.peerChannel, peerConnection.peerAddress, type);\n        }\n\n        this._remove(peerConnection);\n\n        // Check if the handshake with this peer has completed.\n        if (peerConnection.state === PeerConnectionState.ESTABLISHED) {\n            // If closing is due to a ban, also ban the IP\n            if (CloseType.isBanningType(type) && peerConnection.peer.netAddress){\n                this._banIp(peerConnection.peer.netAddress);\n            }\n\n            this._updateConnectedPeerCount(peerConnection, -1);\n\n            // Tell listeners that this peer has gone away.\n            this.fire('peer-left', peerConnection.peer);\n\n            // Let listeners know that the peers changed.\n            this.fire('peers-changed');\n\n            const kbTransferred = ((peerConnection.networkConnection.bytesSent\n                + peerConnection.networkConnection.bytesReceived) / 1000).toFixed(2);\n            Log.d(ConnectionPool, `[PEER-LEFT] ${peerConnection.peerAddress} ${peerConnection.peer.netAddress} `\n                + `(version=${peerConnection.peer.version}, transferred=${kbTransferred} kB, closeType=${type} ${reason})`);\n        } else {\n            if (peerConnection.networkConnection.inbound) {\n                this._inboundCount--;\n                Log.w(ConnectionPool, `Inbound connection #${peerConnection.networkConnection.id} closed pre-handshake: ${reason} (${type})`);\n            } else {\n                Log.w(ConnectionPool, `Connection #${peerConnection.networkConnection.id} to ${peerConnection.peerAddress} closed pre-handshake: ${reason} (${type})`);\n                this.fire('connect-error', peerConnection.peerAddress, `${reason} (${type})`);\n            }\n        }\n\n        // Let listeners know about this closing.\n        this.fire('close', peerConnection, type, reason);\n\n        // Set the peer connection to closed state.\n        peerConnection.close();\n    }\n\n    /**\n     * @param {NetAddress} netAddress\n     * @returns {void}\n     * @private\n     */\n    _banIp(netAddress) {\n        if (!netAddress.isPseudo() && netAddress.reliable) {\n            Log.w(ConnectionPool, `Banning IP ${netAddress}`);\n            if (netAddress.isIPv4()) {\n                this._bannedIPv4IPs.put(netAddress, Date.now() + ConnectionPool.DEFAULT_BAN_TIME);\n            } else if (netAddress.isIPv6()) {\n                // Ban IPv6 IPs prefix based\n                this._bannedIPv6IPs.put(netAddress.ip.subarray(0,8), Date.now() + ConnectionPool.DEFAULT_BAN_TIME);\n            }\n        }\n    }\n\n    /**\n     * @param {NetAddress} netAddress\n     * @returns {boolean}\n     * @private\n     */\n    _isIpBanned(netAddress) {\n        if (netAddress.isPseudo()) return false;\n        if (netAddress.isIPv4()) {\n            return this._bannedIPv4IPs.contains(netAddress);\n        } else if (netAddress.isIPv6()) {\n            const prefix = netAddress.ip.subarray(0, 8);\n            return this._bannedIPv6IPs.contains(prefix);\n        }\n        return false;\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _checkUnbanIps() {\n        const now = Date.now();\n        for (const netAddress of this._bannedIPv4IPs.keys()) {\n            if (this._bannedIPv4IPs.get(netAddress) < now) {\n                this._bannedIPv4IPs.remove(netAddress);\n            }\n        }\n        for (const prefix of this._bannedIPv6IPs.keys()) {\n            if (this._bannedIPv6IPs.get(prefix) < now) {\n                this._bannedIPv6IPs.remove(prefix);\n            }\n        }\n    }\n\n    /**\n     * Connection to this peer address failed.\n     * @param {PeerAddress} peerAddress\n     * @param {string|*} [reason]\n     * @fires ConnectionPool#connect-error\n     * @returns {void}\n     * @private\n     */\n    _onConnectError(peerAddress, reason) {\n        Log.w(ConnectionPool, `Connection to ${peerAddress} failed` + (typeof reason === 'string' ? ` - ${reason}` : ''));\n\n        const peerConnection = this.getConnectionByPeerAddress(peerAddress);\n        Assert.that(!!peerConnection, `PeerAddress not stored ${peerAddress}`);\n        Assert.that(peerConnection.state === PeerConnectionState.CONNECTING,\n            `PeerConnection state not CONNECTING, but ${peerConnection.state} (${peerAddress})`);\n        this._remove(peerConnection);\n\n        this._connectingCount--;\n        Assert.that(this._connectingCount >= 0, 'connectingCount < 0');\n\n        this._addresses.close(null, peerAddress, CloseType.CONNECTION_FAILED);\n\n        this.fire('connect-error', peerAddress, reason);\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @param {number} delta\n     * @returns {void}\n     * @private\n     */\n    _updateConnectedPeerCount(peerConnection, delta) {\n        const peerAddress = peerConnection.peerAddress;\n        switch (peerAddress.protocol) {\n            case Protocol.WS:\n                this._peerCountWs += delta;\n                Assert.that(this._peerCountWs >= 0, 'peerCountWs < 0');\n                break;\n            case Protocol.RTC:\n                this._peerCountRtc += delta;\n                Assert.that(this._peerCountRtc >= 0, 'peerCountRtc < 0');\n                break;\n            case Protocol.DUMB:\n                this._peerCountDumb += delta;\n                Assert.that(this._peerCountDumb >= 0, 'peerCountDumb < 0');\n                break;\n            default:\n                Log.w(PeerAddressBook, `Unknown protocol ${peerAddress.protocol}`);\n        }\n\n        if (Services.isFullNode(peerAddress.services)) {\n            this._peerCountFull += delta;\n            Assert.that(this._peerCountFull >= 0, 'peerCountFull < 0');\n        } else if (Services.isLightNode(peerAddress.services)) {\n            this._peerCountLight += delta;\n            Assert.that(this._peerCountLight >= 0, 'peerCountLight < 0');\n        } else {\n            this._peerCountNano += delta;\n            Assert.that(this._peerCountNano >= 0, 'peerCountNano < 0');\n        }\n\n        if (peerConnection.networkConnection.outbound) {\n            this._peerCountOutbound += delta;\n            if (Services.isFullNode(peerAddress.services) && peerAddress.protocol === Protocol.WS) {\n                this._peerCountFullWsOutbound += delta;\n            }\n        }\n    }\n\n\n    /**\n     * @param {string|*} reason\n     * @returns {void}\n     */\n    disconnect(reason) {\n        // Close all active connections.\n        for (const connection of this.values()) {\n            if (connection.peerChannel) {\n                connection.peerChannel.close(CloseType.MANUAL_NETWORK_DISCONNECT, reason || 'manual network disconnect');\n            }\n        }\n    }\n\n    // XXX For testing\n    disconnectWebSocket() {\n        // Close all websocket connections.\n        for (const connection of this.values()) {\n            if (connection.peerChannel && connection.peerAddress && connection.peerAddress.protocol === Protocol.WS) {\n                connection.channel.close(CloseType.MANUAL_WEBSOCKET_DISCONNECT, 'manual websocket disconnect');\n            }\n        }\n    }\n\n    /** @type {number} */\n    get peerCountWs() {\n        return this._peerCountWs;\n    }\n\n    /** @type {number} */\n    get peerCountRtc() {\n        return this._peerCountRtc;\n    }\n\n    /** @type {number} */\n    get peerCountDumb() {\n        return this._peerCountDumb;\n    }\n\n    /** @type {number} */\n    get peerCount() {\n        return this._peerCountWs + this._peerCountRtc + this._peerCountDumb;\n    }\n\n    /** @type {number} */\n    get peerCountFull() {\n        return this._peerCountFull;\n    }\n\n    /** @type {number} */\n    get peerCountLight() {\n        return this._peerCountLight;\n    }\n\n    /** @type {number} */\n    get peerCountNano() {\n        return this._peerCountNano;\n    }\n\n    /** @type {number} */\n    get peerCountOutbound() {\n        return this._peerCountOutbound;\n    }\n\n    /** @type {number} */\n    get peerCountFullWsOutbound() {\n        return this._peerCountFullWsOutbound;\n    }\n\n    /** @type {number} */\n    get connectingCount() {\n        return this._connectingCount;\n    }\n\n    /** @type {number} */\n    get count() {\n        return this._connectionsByPeerAddress.length + this._inboundCount;\n    }\n\n    /** @type {number} */\n    get bytesSent() {\n        return this._bytesSent\n            + this.values().reduce((n, peerConnection) => n + (peerConnection.networkConnection ? peerConnection.networkConnection.bytesSent : 0), 0);\n    }\n\n    /** @type {number} */\n    get bytesReceived() {\n        return this._bytesReceived\n            + this.values().reduce((n, peerConnection) => n + (peerConnection.networkConnection ? peerConnection.networkConnection.bytesReceived : 0), 0);\n    }\n\n    /** @param {boolean} value */\n    set allowInboundExchange(value) {\n        this._allowInboundExchange = value;\n    }\n\n    /** @type {boolean} */\n    get allowInboundConnections() {\n        return this._allowInboundConnections;\n    }\n\n    /** @param {boolean} value */\n    set allowInboundConnections(value) {\n        this._allowInboundConnections = value;\n    }\n\n}\nConnectionPool.DEFAULT_BAN_TIME = 1000 * 60 * 10; // 10 minutes\nConnectionPool.UNBAN_IPS_INTERVAL = 1000 * 60; // 1 minute\n\nClass.register(ConnectionPool);\n","class PeerScorer {\n    /**\n     * @constructor\n     * @param {NetworkConfig} networkConfig\n     * @param {PeerAddressBook} addresses\n     * @param {ConnectionPool} connections\n     */\n    constructor(networkConfig, addresses, connections) {\n        /**\n         * @type {NetworkConfig}\n         * @private\n         */\n        this._networkConfig = networkConfig;\n\n        /**\n         * @type {PeerAddressBook}\n         * @private\n         */\n        this._addresses = addresses;\n\n        /**\n         * @type {ConnectionPool}\n         * @private\n         */\n        this._connections = connections;\n\n        /**\n         * @type {Array.<PeerConnection>}\n         * @private\n         */\n        this._connectionScores = null;\n    }\n\n    /**\n     * @returns {?PeerAddress}\n     */\n    pickAddress() {\n        const findCandidates = (addressStates, numCandidates, allowBadPeers = false) => {\n            const numAddresses = addressStates.length;\n\n            // Pick a random start index.\n            const index = Math.floor(Math.random() * numAddresses);\n\n            // Compute address scores until we have found at 1000 candidates with score >= 0.\n            const minCandidates = Math.min(numAddresses, numCandidates);\n            const candidates = [];\n            for (let i = 0; i < numAddresses; i++) {\n                const idx = (index + i) % numAddresses;\n                const addressState = addressStates[idx];\n                const score = this._scoreAddress(addressState, allowBadPeers);\n                if (score >= 0) {\n                    candidates.push({score, addressState});\n                    if (candidates.length >= minCandidates) {\n                        break;\n                    }\n                }\n            }\n\n            return candidates;\n        };\n\n        const addressStates = this._addresses.values();\n        let candidates = findCandidates(addressStates, 1000);\n        if (candidates.length === 0 && this.needsGoodPeers()) {\n            candidates = findCandidates(addressStates, 1000, true);\n        }\n\n        if (candidates.length === 0) {\n            return null;\n        }\n\n        // Return a random candidate with a high score.\n        const scores = candidates.sort((a, b) => b.score - a.score);\n        const goodCandidates = scores.slice(0, PeerScorer.PICK_SELECTION_SIZE);\n        const winner = ArrayUtils.randomElement(goodCandidates);\n        return winner.addressState.peerAddress;\n    }\n\n    /**\n     * @param {PeerAddressState} peerAddressState\n     * @param {boolean} [allowBadPeers]\n     * @returns {number}\n     * @private\n     */\n    _scoreAddress(peerAddressState, allowBadPeers = false) {\n        const peerAddress = peerAddressState.peerAddress;\n\n        // Filter addresses that we cannot connect to.\n        if (!this._networkConfig.canConnect(peerAddress.protocol)) {\n            return -1;\n        }\n\n        // Filter addresses not matching our accepted services.\n        if ((peerAddress.services & this._networkConfig.services.accepted) === 0) {\n            return -1;\n        }\n\n        // Filter addresses that are too old.\n        if (peerAddress.exceedsAge()) {\n            return -1;\n        }\n\n        // A channel to that peer address is CONNECTING, CONNECTED, NEGOTIATING OR ESTABLISHED\n        if (this._connections.getConnectionByPeerAddress(peerAddress)) {\n            return -1;\n        }\n\n        // If we need more good peers, only allow good peers unless allowBadPeers is true.\n        if (this.needsGoodPeers() && !this.isGoodPeer(peerAddress) && !allowBadPeers) {\n            return -1;\n        }\n\n        // Give all peers the same base score. Penalize peers with failed connection attempts.\n        const score = 1;\n        switch (peerAddressState.state) {\n            case PeerAddressState.BANNED:\n                return -1;\n\n            case PeerAddressState.NEW:\n            case PeerAddressState.TRIED:\n                return score;\n\n            case PeerAddressState.FAILED:\n                // Don't pick failed addresses when they have failed the maximum number of times.\n                return (1 - ((peerAddressState.failedAttempts + 1) / peerAddressState.maxFailedAttempts)) * score;\n\n            default:\n                return -1;\n        }\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isGoodPeerSet() {\n        return !this.needsGoodPeers() && !this.needsMorePeers();\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    needsGoodPeers() {\n        return this._connections.peerCountFullWsOutbound < PeerScorer.PEER_COUNT_MIN_FULL_WS_OUTBOUND;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    needsMorePeers() {\n        return this._connections.peerCountOutbound < PeerScorer.PEER_COUNT_MIN_OUTBOUND;\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {boolean}\n     */\n    isGoodPeer(peerAddress) {\n        return Services.isFullNode(peerAddress.services) && peerAddress.protocol === Protocol.WS;\n    }\n\n    /**\n     * @returns {void}\n     */\n    scoreConnections() {\n        const candidates = [];\n\n        for (const peerConnection of this._connections.values()) {\n            if (peerConnection.state === PeerConnectionState.ESTABLISHED) {\n                // Grant new connections a grace period from recycling.\n                if (peerConnection.ageEstablished > PeerScorer._getMinAge(peerConnection.peerAddress)) {\n                    peerConnection.score = this._scoreConnection(peerConnection);\n                    candidates.push(peerConnection);\n                }\n\n                peerConnection.statistics.reset();\n            }\n        }\n\n        // sort by score\n        this._connectionScores = candidates.sort((a, b) => b.score - a.score);\n    }\n\n    /**\n     * @param {number} count\n     * @param {number} type\n     * @param {string} reason\n     * @returns {void}\n     */\n    recycleConnections(count, type, reason) {\n        if (!this._connectionScores) {\n            return;\n        }\n\n        while (count > 0 && this._connectionScores.length > 0) {\n            const peerConnection = this._connectionScores.pop();\n            if (peerConnection.state === PeerConnectionState.ESTABLISHED) {\n                peerConnection.peerChannel.close(type, `${reason}`);\n                count--;\n            }\n        }\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @returns {number}\n     * @private\n     */\n    _scoreConnection(peerConnection) {\n        // Connection age\n        const scoreAge = this._scoreConnectionAge(peerConnection);\n\n        // Connection type (inbound/outbound)\n        const scoreOutbound = peerConnection.networkConnection.inbound ? 0 : 1;\n\n        // Node type (full/light/nano)\n        const peerAddress = peerConnection.peerAddress;\n        const scoreType = Services.isFullNode(peerAddress.services)\n            ? 1\n            : Services.isLightNode(peerAddress.services) ? 0.5 : 0;\n\n        // Protocol: Prefer WebSocket when low on WebSocket connections.\n        let scoreProtocol = 0;\n        if (peerAddress.protocol === Protocol.WS) {\n            const distribution = this._connections.peerCountWs / this._connections.peerCount;\n            if (distribution < PeerScorer.BEST_PROTOCOL_WS_DISTRIBUTION || this._connections.peerCountFullWsOutbound <= PeerScorer.PEER_COUNT_MIN_FULL_WS_OUTBOUND) {\n                scoreProtocol = 1;\n            }\n        }\n\n        // Connection speed, based on ping-pong latency median\n        const medianLatency = peerConnection.statistics.latencyMedian;\n        let scoreSpeed = 0;\n        if (medianLatency > 0 && medianLatency < NetworkAgent.PING_TIMEOUT) {\n            scoreSpeed = 1 - medianLatency / NetworkAgent.PING_TIMEOUT;\n        }\n\n        return 0.15 * scoreAge + 0.25 * scoreOutbound + 0.2 * scoreType + 0.2 * scoreProtocol + 0.2 * scoreSpeed;\n    }\n\n    /**\n     * @param {PeerConnection} peerConnection\n     * @returns {number}\n     * @private\n     */\n    _scoreConnectionAge(peerConnection) {\n        const score = (age, bestAge, maxAge) => Math.max(Math.min(1 - (age - bestAge) / maxAge, 1), 0);\n\n        const age = peerConnection.ageEstablished;\n        const services = peerConnection.peerAddress.services;\n        if (Services.isFullNode(services)) {\n            return age / (2 * PeerScorer.BEST_AGE_FULL) + 0.5;\n        } else if (Services.isLightNode(services)) {\n            return score(age, PeerScorer.BEST_AGE_LIGHT, PeerScorer.MAX_AGE_LIGHT);\n        } else {\n            return score(age, PeerScorer.BEST_AGE_NANO, PeerScorer.MAX_AGE_NANO);\n        }\n    }\n\n    /**\n     * @param {PeerAddress} peerAddress\n     * @returns {number}\n     * @private\n     */\n    static _getMinAge(peerAddress) {\n        if (Services.isFullNode(peerAddress.services)) {\n            return PeerScorer.MIN_AGE_FULL;\n        } else if (Services.isLightNode(peerAddress.services)) {\n            return PeerScorer.MIN_AGE_LIGHT;\n        } else {\n            return PeerScorer.MIN_AGE_NANO;\n        }\n    }\n\n    /** @type {Number} */\n    get lowestConnectionScore() {\n        if (!this._connectionScores) {\n            return null;\n        }\n\n        // Remove all closed connections from the end of connectionScores.\n        while (this._connectionScores.length > 0\n            && this._connectionScores[this._connectionScores.length - 1].state !== PeerConnectionState.ESTABLISHED) {\n\n            this._connectionScores.pop();\n        }\n\n        return this._connectionScores.length > 0\n            ? this._connectionScores[this._connectionScores.length - 1].score\n            : null;\n    }\n}\n/**\n * @type {number}\n * @constant\n */\nPeerScorer.PEER_COUNT_MIN_FULL_WS_OUTBOUND = PlatformUtils.isNodeJs() ? 12 : 3;\n/**\n * @type {number}\n * @constant\n */\nPeerScorer.PEER_COUNT_MIN_OUTBOUND = PlatformUtils.isNodeJs() ? 12 : 6;\n/**\n * @type {number}\n * @constant\n */\nPeerScorer.PICK_SELECTION_SIZE = 100;\n\nPeerScorer.MIN_AGE_FULL = 5 * 60 * 1000; // 5 minutes\nPeerScorer.BEST_AGE_FULL = 24 * 60 * 60 * 1000; // 24 hours\n\nPeerScorer.MIN_AGE_LIGHT = 2 * 60 * 1000; // 2 minutes\nPeerScorer.BEST_AGE_LIGHT = 15 * 60 * 1000; // 15 minutes\nPeerScorer.MAX_AGE_LIGHT = 6 * 60 * 60 * 1000; // 6 hours\n\nPeerScorer.MIN_AGE_NANO = 60 * 1000; // 1 minute\nPeerScorer.BEST_AGE_NANO = 5 * 60 * 1000; // 5 minutes\nPeerScorer.MAX_AGE_NANO = 30 * 60 * 1000; // 30 minutes\n\nPeerScorer.BEST_PROTOCOL_WS_DISTRIBUTION = 0.15; // 15%\n\nClass.register(PeerScorer);\n","class NetworkConfig {\n    /**\n     * @returns {NetworkConfig}\n     */\n    static getDefault() {\n        return PlatformUtils.supportsWebRTC()\n            ? new RtcNetworkConfig()\n            : new DumbNetworkConfig();\n    }\n\n    /**\n     * @constructor\n     * @param {number} protocolMask\n     */\n    constructor(protocolMask) {\n        /** @type {number} */\n        this._protocolMask = protocolMask;\n\n        /**\n         * @type {KeyPair}\n         * @protected\n         */\n        this._keyPair = null;\n\n        /**\n         * @type {PeerId}\n         * @protected\n         */\n        this._peerId = null;\n\n        /**\n         * @type {Services}\n         * @protected\n         */\n        this._services = null;\n    }\n\n    /**\n     * @returns {void}\n     */\n    async initPersistent() {\n        const db = await PeerKeyStore.getPersistent();\n        await this._init(db);\n    }\n\n    /**\n     * @returns {void}\n     */\n    async initVolatile() {\n        const db = PeerKeyStore.createVolatile();\n        await this._init(db);\n    }\n\n    /**\n     * @private\n     * @param {PeerKeyStore} db\n     * @returns {void}\n     */\n    async _init(db) {\n        if (this._keyPair) {\n            return;\n        }\n\n        /** @type {KeyPair} */\n        let keys = await db.get('keys');\n        if (!keys) {\n            keys = KeyPair.generate();\n            await db.put('keys', keys);\n        }\n\n        this._keyPair = keys;\n        this._peerId = keys.publicKey.toPeerId();\n    }\n\n    /**\n     * Used for filtering peer addresses by protocols.\n     * @type {number}\n     */\n    get protocolMask() {\n        return this._protocolMask;\n    }\n\n    /**\n     * @type {KeyPair}\n     */\n    get keyPair() {\n        return this._keyPair;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get publicKey() {\n        return this._keyPair.publicKey;\n    }\n\n    /**\n     * @type {PeerId}\n     */\n    get peerId() {\n        return this._peerId;\n    }\n\n    /**\n     * @type {Services}\n     */\n    get services() {\n        return this._services;\n    }\n\n    /**\n     * @param {Services} services\n     */\n    set services(services) {\n        this._services = services;\n    }\n\n    /**\n     * @type {PeerAddress}\n     */\n    get peerAddress() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * @param {number} protocol\n     * @returns {boolean}\n     */\n    canConnect(protocol) {\n        return (protocol & this._protocolMask) !== 0;\n    }\n}\n\nClass.register(NetworkConfig);\n\nclass WsNetworkConfig extends NetworkConfig {\n    /**\n     * @constructor\n     * @param {string} host\n     * @param {number} port\n     * @param {string} key\n     * @param {string} cert\n     */\n    constructor(host, port, key, cert) {\n        super(Protocol.WS);\n        this._host = host;\n        this._port = port;\n        this._key = key;\n        this._cert = cert;\n\n        /* @type {{key: string, cert: string}} */\n        this._sslConfig = {\n            key: this._key,\n            cert: this._cert\n        };\n    }\n\n    /**\n     * @type {{key: string, cert: string}}\n     */\n    get sslConfig() {\n        return this._sslConfig;\n    }\n\n    /**\n     * @type {WsPeerAddress}\n     * @override\n     */\n    get peerAddress() {\n        if (!this._services || !this._keyPair) {\n            throw 'PeerAddress is not configured.';\n        }\n\n        const peerAddress = new WsPeerAddress(\n            this._services.provided, Date.now(), NetAddress.UNSPECIFIED,\n            this.publicKey, /*distance*/ 0,\n            this._host, this._port);\n\n        if (!peerAddress.globallyReachable()) {\n            throw 'PeerAddress not globally reachable.';\n        }\n        peerAddress.signature = Signature.create(this._keyPair.privateKey, this.publicKey, peerAddress.serializeContent());\n        return peerAddress;\n    }\n}\n\nClass.register(WsNetworkConfig);\n\nclass RtcNetworkConfig extends NetworkConfig {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super(Protocol.WS | Protocol.RTC);\n        this._rtcConfig = {\n            iceServers: [\n                {urls: 'stun:stun.l.google.com:19302'},\n                {urls: 'stun:stun.nimiq-network.com:19302'}\n            ]\n        };\n    }\n\n    /**\n     * @returns {?RTCConfiguration}\n     */\n    get rtcConfig() {\n        return this._rtcConfig;\n    }\n\n    /**\n     * @type {RtcPeerAddress}\n     * @override\n     */\n    get peerAddress() {\n        if (!this._services || !this._keyPair) {\n            throw 'PeerAddress is not configured.';\n        }\n\n        const peerAddress = new RtcPeerAddress(\n            this._services.provided, Date.now(), NetAddress.UNSPECIFIED,\n            this.publicKey, /*distance*/ 0);\n        peerAddress.signature = Signature.create(this._keyPair.privateKey, this.publicKey, peerAddress.serializeContent());\n        return peerAddress;\n    }\n}\n\nClass.register(RtcNetworkConfig);\n\nclass DumbNetworkConfig extends NetworkConfig {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super(Protocol.WS);\n    }\n\n    /**\n     * @type {DumbPeerAddress}\n     * @override\n     */\n    get peerAddress() {\n        if (!this._services || !this._keyPair) {\n            throw 'PeerAddress is not configured.';\n        }\n\n        const peerAddress = new DumbPeerAddress(\n            this._services.provided, Date.now(), NetAddress.UNSPECIFIED,\n            this.publicKey, /*distance*/ 0);\n        peerAddress.signature = Signature.create(this._keyPair.privateKey, this.publicKey, peerAddress.serializeContent());\n        return peerAddress;\n    }\n}\n\nClass.register(DumbNetworkConfig);\n","class Network extends Observable {\n    /**\n     * @constructor\n     * @param {IBlockchain} blockchain\n     * @param {NetworkConfig} networkConfig\n     * @param {Time} time\n     * @listens PeerAddressBook#added\n     * @listens ConnectionPool#peer-joined\n     * @listens ConnectionPool#peer-left\n     * @listens ConnectionPool#peers-changed\n     * @listens ConnectionPool#recycling-request\n     * @listens ConnectionPool#connect-error\n     */\n    constructor(blockchain, networkConfig, time) {\n        super();\n\n        /**\n         * @type {IBlockchain}\n         * @private\n         */\n        this._blockchain = blockchain;\n\n        /**\n         * @type {NetworkConfig}\n         * @private\n         */\n        this._networkConfig = networkConfig;\n\n        /**\n         * @type {Time}\n         * @private\n         */\n        this._time = time;\n\n        /**\n         * Flag indicating whether we should actively connect to other peers\n         * if our peer count is below PEER_COUNT_DESIRED.\n         * @type {boolean}\n         * @private\n         */\n        this._autoConnect = false;\n\n        /**\n         * Backoff for peer count check in seconds.\n         * @type {number}\n         * @private\n         */\n        this._backoff = Network.CONNECT_BACKOFF_INITIAL;\n\n        /**\n         * Flag indicating whether we already triggered a backoff.\n         * @type {boolean}\n         * @private\n         */\n        this._backedOff = false;\n\n        /**\n         * The network's addressbook\n         * @type {PeerAddressBook}\n         * @private\n         */\n        this._addresses = new PeerAddressBook(this._networkConfig);\n\n        // Relay new addresses to peers.\n        this._addresses.on('added', addresses => {\n            this._relayAddresses(addresses);\n            this._checkPeerCount();\n        });\n       \n        /**\n         * Peer connections database & operator\n         * @type {ConnectionPool}\n         * @private\n         */\n        this._connections = new ConnectionPool(this._addresses, networkConfig, blockchain, time);\n\n        this._connections.on('peer-joined', peer => this._onPeerJoined(peer));\n        this._connections.on('peer-left', peer => this._onPeerLeft(peer));\n        this._connections.on('peers-changed', () => this._onPeersChanged());\n        this._connections.on('recycling-request', () => this._onRecyclingRequest());\n        this._connections.on('connect-error', () => setTimeout(this._checkPeerCount.bind(this), Network.CONNECT_THROTTLE));\n\n        /**\n         * Helper object to pick addresses from PeerAddressBook.\n         * @type {PeerScorer}\n         * @private\n         */\n        this._scorer = new PeerScorer(this._networkConfig, this._addresses, this._connections);\n\n        /**\n         * @type {number|null}\n         * @private\n         */\n        this._houseKeepingIntervalId = null;\n\n        /**\n         * @type {Timers}\n         */\n        this._timers = new Timers();\n    }\n\n    /**\n     * @returns {void}\n     */\n    connect() {\n        this._autoConnect = true;\n\n        // Setup housekeeping interval.\n        this._houseKeepingIntervalId = setInterval(() => this._housekeeping(), Network.HOUSEKEEPING_INTERVAL);\n\n        // Start connecting to peers.\n        this._checkPeerCount();\n    }\n\n    /**\n     * @param {string|*} reason\n     * @returns {void}\n     */\n    disconnect(reason) {\n        this._autoConnect = false;\n\n        // Clear housekeeping interval.\n        clearInterval(this._houseKeepingIntervalId);\n\n        this._connections.disconnect(reason);\n        this._connections.allowInboundConnections = false;\n    }\n\n    // XXX For testing\n    disconnectWebSocket() {\n        this._autoConnect = false;\n\n        this._connections.disconnectWebSocket();\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {void}\n     * @fires Network#peer-joined\n     * @private\n     */\n    _onPeerJoined(peer) {\n        // Recalculate the network adjusted offset\n        this._updateTimeOffset();\n\n        // Tell others about the address that we just connected to.\n        this._relayAddresses([peer.peerAddress]);\n\n        this.fire('peer-joined', peer);\n    }\n\n    /**\n     * @param {Peer} peer\n     * @returns {void}\n     * @fires Network#peer-left\n     * @private\n     */\n    _onPeerLeft(peer) {\n        // Recalculate the network adjusted offset\n        this._updateTimeOffset();\n\n        this.fire('peer-left', peer);\n    }\n\n    /**\n     * @returns {void}\n     * @fires Network#peers-changed\n     * @private\n     */\n    _onPeersChanged() {\n        setTimeout(this._checkPeerCount.bind(this), Network.CONNECT_THROTTLE);\n\n        this.fire('peers-changed');\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _onRecyclingRequest() {\n        this._scorer.recycleConnections(1, CloseType.PEER_CONNECTION_RECYCLED_INBOUND_EXCHANGE, 'Peer connection recycled inbound exchange');\n\n        // set ability to exchange for new inbound connections\n        this._connections.allowInboundExchange = this._scorer.lowestConnectionScore !== null\n            ? this._scorer.lowestConnectionScore < Network.SCORE_INBOUND_EXCHANGE\n            : false;\n    }\n\n    /**\n     * @param {Array.<PeerAddress>} addresses\n     * @returns {void}\n     * @private\n     */\n    _relayAddresses(addresses) {\n        // Pick PEER_COUNT_RELAY random peers and relay addresses to them if:\n        // - number of addresses <= 10\n        // TODO more restrictions, see Bitcoin\n        if (addresses.length > 10) {\n            return;\n        }\n\n        // XXX We don't protect against picking the same peer more than once.\n        // The NetworkAgent will take care of not sending the addresses twice.\n        // In that case, the address will simply be relayed to less peers. Also,\n        // the peer that we pick might already know the address.\n        const peerConnections = this._connections.values();\n        for (let i = 0; i < Network.PEER_COUNT_RELAY; ++i) {\n            const peerConnection = ArrayUtils.randomElement(peerConnections);\n            if (peerConnection && peerConnection.state === PeerConnectionState.ESTABLISHED && peerConnection.networkAgent) {\n                peerConnection.networkAgent.relayAddresses(addresses);\n            }\n        }\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _checkPeerCount() {\n        if (this._autoConnect\n            && !this._scorer.isGoodPeerSet()\n            && this._connections.connectingCount < Network.CONNECTING_COUNT_MAX) {\n\n            // Pick a peer address that we are not connected to yet.\n            const peerAddress = this._scorer.pickAddress();\n\n            // We can't connect if we don't know any more addresses or only want connections to good peers.\n            const onlyGoodPeers = this._scorer.needsGoodPeers() && !this._scorer.needsMorePeers();\n            if (!peerAddress || onlyGoodPeers && !this._scorer.isGoodPeer(peerAddress)) {\n                // If no backoff has been triggered, trigger one.\n                // This helps us to check back whether we need more connections.\n                if (!this._backedOff) {\n                    this._backedOff = true;\n                    const oldBackoff = this._backoff;\n                    this._backoff = Math.min(Network.CONNECT_BACKOFF_MAX, oldBackoff * 2);\n                    setTimeout(() => {\n                        this._backedOff = false;\n                        this._checkPeerCount();\n                    }, oldBackoff);\n\n                    if (this._connections.count === 0) {\n                        // We are not connected to any peers (anymore) and don't know any more addresses to connect to.\n\n                        // Tell listeners that we are disconnected. This is primarily useful for tests.\n                        this.fire('disconnected');\n\n                        // Allow inbound connections. This is important for the first seed node on the network which\n                        // will never establish a consensus and needs to accept incoming connections eventually.\n                        this._connections.allowInboundConnections = true;\n                    }\n                }\n\n                return;\n            }\n\n            // Connect to this address.\n            if (!this._connections.connectOutbound(peerAddress)) {\n                this._addresses.close(null, peerAddress, CloseType.CONNECTION_FAILED);\n                setTimeout(() => this._checkPeerCount(), Network.CONNECT_THROTTLE);\n            }\n        }\n        this._backoff = Network.CONNECT_BACKOFF_INITIAL;\n    }\n\n    /**\n     * Updates the network time offset by calculating the median offset\n     * from all our peers.\n     * @returns {void}\n     * @private\n     */\n    _updateTimeOffset() {\n        const peerConnections = this._connections.values();\n\n        const offsets = [0]; // Add our own offset.\n        peerConnections.forEach(peerConnection => {\n            if (peerConnection.state === PeerConnectionState.ESTABLISHED) {\n                offsets.push(peerConnection.networkAgent.peer.timeOffset);\n            }\n        });\n\n        const offsetsLength = offsets.length;\n        offsets.sort((a, b) => a - b);\n\n        let timeOffset;\n        if ((offsetsLength % 2) === 0) {\n            timeOffset = Math.round((offsets[(offsetsLength / 2) - 1] + offsets[offsetsLength / 2]) / 2);\n        } else {\n            timeOffset = offsets[(offsetsLength - 1) / 2];\n        }\n\n        this._time.offset = Math.max(Math.min(timeOffset, Network.TIME_OFFSET_MAX), -Network.TIME_OFFSET_MAX);\n    }\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _housekeeping() {\n        this._scorer.scoreConnections();\n\n        // recycle\n        if (this.peerCount > Network.PEER_COUNT_RECYCLING_ACTIVE) {\n            // recycle 1% at PEER_COUNT_RECYCLING_ACTIVE, 20% at PEER_COUNT_MAX\n            const percentageToRecycle = (this.peerCount - Network.PEER_COUNT_RECYCLING_ACTIVE) * 0.19 / (Network.PEER_COUNT_MAX - Network.PEER_COUNT_RECYCLING_ACTIVE) + 0.01;\n            const connectionsToRecycle = Math.ceil(this.peerCount * percentageToRecycle);\n            this._scorer.recycleConnections(connectionsToRecycle, CloseType.PEER_CONNECTION_RECYCLED, 'Peer connection recycled');\n        }\n\n        // set ability to exchange for new inbound connections\n        this._connections.allowInboundExchange = this._scorer.lowestConnectionScore !== null\n            ? this._scorer.lowestConnectionScore < Network.SCORE_INBOUND_EXCHANGE\n            : false;\n    }\n\n    /** @type {Time} */\n    get time() {\n        return this._time;\n    }\n\n    /** @type {number} */\n    get peerCount() {\n        return this._connections.peerCount;\n    }\n\n    /** @type {number} */\n    get peerCountWebSocket() {\n        return this._connections.peerCountWs;\n    }\n\n    /** @type {number} */\n    get peerCountWebRtc() {\n        return this._connections.peerCountRtc;\n    }\n\n    /** @type {number} */\n    get peerCountDumb() {\n        return this._connections.peerCountDumb;\n    }\n\n    /** @type {number} */\n    get peerCountConnecting() {\n        return this._connections.connectingCount;\n    }\n\n    /** @type {number} */\n    get knownAddressesCount() {\n        return this._addresses.knownAddressesCount;\n    }\n\n    /** @type {number} */\n    get bytesSent() {\n        return this._connections.bytesSent;\n    }\n\n    /** @type {number} */\n    get bytesReceived() {\n        return this._connections.bytesReceived;\n    }\n\n    /** @type {boolean} */\n    get allowInboundConnections() {\n        return this._connections.allowInboundConnections;\n    }\n\n    /** @param {boolean} allowInboundConnections */\n    set allowInboundConnections(allowInboundConnections) {\n        this._connections.allowInboundConnections = allowInboundConnections;\n    }\n\n    /** @type {PeerAddressBook} */\n    get addresses() {\n        return this._addresses;\n    }\n\n    /** @type {ConnectionPool} */\n    get connections() {\n        return this._connections;\n    }\n}\n/**\n * @type {number}\n * @constant\n */\nNetwork.PEER_COUNT_MAX = PlatformUtils.isBrowser() ? 15 : 50000;\n/**\n * @type {number}\n * @constant\n */\nNetwork.INBOUND_PEER_COUNT_PER_SUBNET_MAX = PlatformUtils.isBrowser() ? 2 : 100;\n/**\n * @type {number}\n * @constant\n */\nNetwork.OUTBOUND_PEER_COUNT_PER_SUBNET_MAX = 2;\n/**\n * @type {number}\n * @constant\n */\nNetwork.PEER_COUNT_PER_IP_MAX = PlatformUtils.isBrowser() ? 1 : 20;\n/**\n * @type {number}\n * @constant\n */\nNetwork.IPV4_SUBNET_MASK = 24;\n/**\n * @type {number}\n * @constant\n */\nNetwork.IPV6_SUBNET_MASK = 96;\n/**\n * @type {number}\n * @constant\n */\nNetwork.PEER_COUNT_RECYCLING_ACTIVE = PlatformUtils.isBrowser() ? 5 : 1000;\n/**\n * @type {number}\n * @constant\n */\nNetwork.PEER_COUNT_RELAY = 4;\n/**\n * @type {number}\n * @constant\n */\nNetwork.CONNECTING_COUNT_MAX = 2;\n/**\n * @type {number}\n * @constant\n */\nNetwork.SIGNAL_TTL_INITIAL = 3;\n/**\n * @type {number}\n * @constant\n */\nNetwork.CONNECT_BACKOFF_INITIAL = 1000; // 1 second\n/**\n * @type {number}\n * @constant\n */\nNetwork.CONNECT_BACKOFF_MAX = 5 * 60 * 1000; // 5 minutes\n/**\n * @type {number}\n * @constant\n */\nNetwork.TIME_OFFSET_MAX = 15 * 60 * 1000; // 15 minutes\n/**\n * @type {number}\n * @constant\n */\nNetwork.HOUSEKEEPING_INTERVAL = 5 * 60 * 1000; // 5 minutes\n/**\n * @type {number}\n * @constant\n */\nNetwork.SCORE_INBOUND_EXCHANGE = 0.5;\n/**\n * @type {number}\n * @constant\n */\nNetwork.CONNECT_THROTTLE = 300; // 300 ms\n\nClass.register(Network);\n","class NetUtils {\n    /**\n     * @param {string|Uint8Array} ip\n     * @return {boolean}\n     */\n    static isPrivateIP(ip) {\n        if (!(ip instanceof Uint8Array)) {\n            ip = NetUtils.ipToBytes(ip);\n        }\n\n        if (NetUtils.isLocalIP(ip)) {\n            return true;\n        }\n\n        if (NetUtils.isIPv4Address(ip)) {\n            for (const subnet of NetUtils.IPv4_PRIVATE_NETWORK) {\n                if (NetUtils.isIPv4inSubnet(ip, subnet)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        if (NetUtils.isIPv6Address(ip)) {\n            // Private subnet is fc00::/7.\n            // So, we only check the first 7 bits of the address to be equal fc00.\n            if ((ip[0] & 0xfe) === 0xfc) {\n                return true;\n            }\n\n            // Link-local addresses are fe80::/10.\n            if (ip[0] === 0xfe && (ip[1] & 0xc0) === 0x80) {\n                return true;\n            }\n\n            // Does not seem to be a private IP.\n            return false;\n        }\n\n        throw new Error(`Malformed IP address ${ip}`);\n    }\n\n    /**\n     * @param {string|Uint8Array} ip\n     * @returns {boolean}\n     */\n    static isLocalIP(ip) {\n        if (!(ip instanceof Uint8Array)) {\n            ip = NetUtils.ipToBytes(ip);\n        }\n\n        if (ip.length === NetUtils.IPv4_LENGTH) {\n            return ip[0] === 127 && ip[1] === 0 && ip[2] === 0 && ip[3] === 1;\n        }\n        if (ip.length === NetUtils.IPv6_LENGTH) {\n            for (let i = 0; i < NetUtils.IPv6_LENGTH - 1; i++) {\n                if (ip[i] !== 0) return false;\n            }\n            return ip[NetUtils.IPv6_LENGTH - 1] === 1;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param {string|Uint8Array} ip\n     * @param {string} subnet\n     * @return {boolean}\n     */\n    static isIPv4inSubnet(ip, subnet) {\n        if (!(ip instanceof Uint8Array)) {\n            ip = NetUtils.ipToBytes(ip);\n        }\n\n        let [subIp, mask] = subnet.split('/');\n        mask = -1<<(32-parseInt(mask));\n        return (NetUtils._IPv4toLong(ip) & mask) === NetUtils._IPv4toLong(subIp);\n    }\n\n    /**\n     * @param {string|Uint8Array} ip\n     * @return {boolean}\n     */\n    static isIPv4Address(ip) {\n        if (ip instanceof Uint8Array) return ip.length === NetUtils.IPv4_LENGTH;\n        const match = ip.match(/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/);\n        return !!match && parseInt(match[1]) <= 255 && parseInt(match[2]) <= 255\n            && parseInt(match[3]) <= 255 && parseInt(match[4]) <= 255;\n    }\n\n    /**\n     * @param {string|Uint8Array} ip\n     * @return {boolean}\n     */\n    static isIPv6Address(ip) {\n        if (ip instanceof Uint8Array) return ip.length === NetUtils.IPv6_LENGTH;\n\n        const parts = ip.toLowerCase().split(':');\n        // An IPv6 address consists of at most 8 parts and at least 3.\n        if (parts.length > 8 || parts.length < 3) {\n            return false;\n        }\n\n        const isEmbeddedIPv4 = NetUtils.isIPv4Address(parts[parts.length - 1]);\n\n        let innerEmpty = false;\n        for (let i = 0; i < parts.length; ++i) {\n            // Check whether each part is valid.\n            // Note: the last part may be a IPv4 address!\n            // They can be embedded in the last part. Remember that they take 32bit.\n            if (!(/^[a-f0-9]{0,4}$/.test(parts[i])\n                    || (i === parts.length - 1\n                        && isEmbeddedIPv4\n                        && parts.length < 8))) {\n                return false;\n            }\n            // Inside the parts, there has to be at most one empty part.\n            if (parts[i].length === 0 && i > 0 && i < parts.length - 1) {\n                if (innerEmpty) {\n                    return false; // at least two empty parts\n                }\n                innerEmpty = true;\n            }\n        }\n\n        // In the special case of embedded IPv4 addresses, everything but the last 48 bit must be 0.\n        if (isEmbeddedIPv4) {\n            // Exclude the last two parts.\n            for (let i=0; i<parts.length-2; ++i) {\n                if (!/^0{0,4}$/.test(parts[i])) {\n                    return false;\n                }\n            }\n        }\n\n        // If the first part is empty, the second has to be empty as well (e.g., ::1).\n        if (parts[0].length === 0) {\n            return parts[1].length === 0;\n        }\n\n        // If the last part is empty, the second last has to be empty as well (e.g., 1::).\n        if (parts[parts.length - 1].length === 0) {\n            return parts[parts.length - 2].length === 0;\n        }\n\n        // If the length is less than 7 and an IPv4 address is embedded, there has to be an empty part.\n        if (isEmbeddedIPv4 && parts.length < 7) {\n            return innerEmpty;\n        }\n\n        // Otherwise if the length is less than 8, there has to be an empty part.\n        if (parts.length < 8) {\n            return innerEmpty;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {boolean}\n     */\n    static hostGloballyReachable(host) {\n        // IP addresses can't have a proper certificate\n        if (NetUtils.isIPv4Address(host) || NetUtils.isIPv6Address(host)) {\n            return false;\n        }\n        // \"the use of dotless domains is prohibited [in new gTLDs]\" [ https://www.icann.org/resources/board-material/resolutions-new-gtld-2013-08-13-en#1 ]. Old gTLDs rarely use them.\n        if (!host.match(/.+\\..+$/)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {string|Uint8Array} ip\n     * @return {number}\n     */\n    static _IPv4toLong(ip) {\n        if (!(ip instanceof Uint8Array)) {\n            ip = NetUtils.ipToBytes(ip);\n        }\n        return (ip[0]<<24) + (ip[1]<<16) + (ip[2]<<8) + ip[3];\n    }\n\n    /**\n     * @param {string} ip\n     * @returns {string}\n     * @private\n     */\n    static _IPv4toIPv6(ip) {\n        let parts = ip.split('.');\n        parts = parts.map(x => parseInt(x));\n        const mask = [];\n        for(let i = 0; i < 4; i++) {\n            mask.push(('00' + parts[i].toString(16)).slice(-2));\n        }\n        return `${mask[0]}${mask[1]}:${mask[2]}${mask[3]}`;\n    }\n\n    /**\n     * @param {string} ip\n     * @returns {Uint8Array}\n     */\n    static ipToBytes(ip) {\n        if (NetUtils.isIPv4Address(ip)) {\n            const parts = ip.split('.');\n            return new Uint8Array(parts.map(x => parseInt(x)));\n        }\n\n        if (NetUtils.isIPv6Address(ip)) {\n            let parts = ip.toLowerCase().split(':');\n\n            // Handle embedded IPv4 addresses.\n            if (NetUtils.isIPv4Address(parts[parts.length - 1])) {\n                return NetUtils.ipToBytes(parts[parts.length - 1]);\n            }\n\n            // IPv6\n            parts = NetUtils._extendIPv6(parts);\n            parts = parts.map(x => parseInt(x, 16));\n            const bytes = [];\n            for(let i = 0; i < 8; i++) {\n                bytes.push(parts[i] >> 8);\n                bytes.push(parts[i] & 0xff);\n            }\n            return new Uint8Array(bytes);\n        }\n\n        throw new Error(`Malformed IP address ${ip}`);\n    }\n\n    /**\n     * @param {Uint8Array} ip\n     * @returns {string}\n     */\n    static bytesToIp(ip) {\n        if (NetUtils.isIPv4Address(ip)) {\n            return ip.join('.');\n        }\n\n        if (NetUtils.isIPv6Address(ip)) {\n            const hexIp = Array.from(ip, x => ('00' + x.toString(16)).slice(-2));\n            const ipv6 = [];\n            for (let i = 0; i < 8; i++) {\n                ipv6.push(hexIp[i*2] + hexIp[i*2+1]);\n            }\n            return ipv6.join(':');\n        }\n\n        throw new Error(`Malformed IP address ${ip}`);\n    }\n\n    /**\n     * @param {Array.<string>} parts\n     * @returns {Array.<string>}\n     * @private\n     */\n    static _extendIPv6(parts) {\n        // Handle embedded IPv4 addresses.\n        if (NetUtils.isIPv4Address(parts[parts.length - 1])) {\n            const ipv4 = parts[parts.length - 1];\n            const ipv6 = NetUtils._IPv4toIPv6(ipv4);\n            ip = ip.replace(ipv4, ipv6);\n            parts = ip.toLowerCase().split(':');\n        }\n\n        let emptyPart = parts.indexOf('');\n        // If there is an empty part, fill it up.\n        if (emptyPart >= 0) {\n            parts[emptyPart] = '0';\n            for (let i = parts.length; i < 8; i++) {\n                parts.splice(emptyPart, 0, '0');\n            }\n        }\n        // Fill remaining empty fields with 0 as well.\n        emptyPart = parts.indexOf('');\n        while (emptyPart >= 0) {\n            parts[emptyPart] = '0';\n            emptyPart = parts.indexOf('');\n        }\n\n        return parts;\n    }\n\n    /**\n     * @param {string|Uint8Array} ip\n     * @param {number} bitCount\n     * @return {string|Uint8Array}\n     */\n    static ipToSubnet(ip, bitCount) {\n        let stringResult = false;\n        if (!(ip instanceof Uint8Array)) {\n            ip = NetUtils.ipToBytes(ip);\n            stringResult = true;\n        }\n\n        const mask = [];\n        for(let i = 0; i < ip.byteLength; i++) {\n            const n = Math.min(bitCount, 8);\n            mask.push(ip[i] & (256 - Math.pow(2, 8 - n)));\n            bitCount -= n;\n        }\n        const result = new Uint8Array(mask);\n        return stringResult ? NetUtils.bytesToIp(result) : result;\n    }\n}\nNetUtils.IPv4_LENGTH = 4;\nNetUtils.IPv6_LENGTH = 16;\nNetUtils.IPv4_PRIVATE_NETWORK = [\n    '10.0.0.0/8',\n    '172.16.0.0/12',\n    '192.168.0.0/16',\n    '100.64.0.0/10', // link-local\n\n    // Actually, the following one is only an approximation,\n    // the first and the last /24 subnets in the range should be excluded.\n    '169.254.0.0/16'\n];\nClass.register(NetUtils);\n","class PeerKeyStore {\n    /**\n     * @returns {Promise.<PeerKeyStore>}\n     */\n    static async getPersistent() {\n        if (!PeerKeyStore._instance) {\n            const jdb = new JDB.JungleDB('peer-key', PeerKeyStore.VERSION, { maxDbSize: PeerKeyStore.INITIAL_DB_SIZE });\n\n            // Initialize object stores.\n            jdb.createObjectStore(PeerKeyStore.KEY_DATABASE, { codec: new PeerKeyStoreCodec() });\n\n            // Establish connection to database.\n            await jdb.connect();\n\n            PeerKeyStore._instance = new PeerKeyStore(jdb.getObjectStore(PeerKeyStore.KEY_DATABASE));\n        }\n        return PeerKeyStore._instance;\n    }\n\n    /**\n     * @returns {PeerKeyStore}\n     */\n    static createVolatile() {\n        const store = JDB.JungleDB.createVolatileObjectStore();\n        return new PeerKeyStore(store);\n    }\n\n    /**\n     * @param {IObjectStore} store\n     */\n    constructor(store) {\n        this._store = store;\n    }\n\n    /**\n     * @param {string} key\n     * @returns {Promise.<KeyPair>}\n     */\n    get(key) {\n        return this._store.get(key);\n    }\n\n    /**\n     * @param {string} key\n     * @param {KeyPair} keyPair\n     * @returns {Promise}\n     */\n    put(key, keyPair) {\n        return this._store.put(key, keyPair);\n    }\n}\nPeerKeyStore._instance = null;\nPeerKeyStore.VERSION = 2;\nPeerKeyStore.KEY_DATABASE = 'keys';\nPeerKeyStore.INITIAL_DB_SIZE = 1024*1024*10; // 10 MB\nClass.register(PeerKeyStore);\n\n/**\n * @implements {ICodec}\n */\nclass PeerKeyStoreCodec {\n    /**\n     * @param {*} obj The object to encode before storing it.\n     * @returns {*} Encoded object.\n     */\n    encode(obj) {\n        return obj.serialize();\n    }\n\n    /**\n     * @param {*} buf The object to decode.\n     * @param {string} key The object's primary key.\n     * @returns {*} Decoded object.\n     */\n    decode(buf, key) {\n        return KeyPair.unserialize(new SerialBuffer(buf));\n    }\n\n    /**\n     * @type {string}\n     */\n    get leveldbValueEncoding() {\n        return 'binary';\n    }\n\n    /**\n     * @type {object}\n     */\n    get lmdbValueEncoding() {\n        return JDB.JungleDB.BINARY_ENCODING;\n    }\n}\n","class Peer {\n    /**\n     * @param {PeerChannel} channel\n     * @param {number} version\n     * @param {Hash} headHash\n     * @param {number} timeOffset\n     */\n    constructor(channel, version, headHash, timeOffset) {\n        /** @type {PeerChannel} */\n        this._channel = channel;\n        /** @type {number} */\n        this._version = version;\n        /** @type {Hash} */\n        this._headHash = headHash;\n        /** @type {BlockHeader} */\n        this._head = null;\n        /**\n         * Offset between the peer's time and our local time.\n         * @type {number}\n         */\n        this._timeOffset = timeOffset;\n\n        this._setNetAddress();\n    }\n\n    /**\n     * @private\n     * @returns {void}\n     */\n    _setNetAddress() {\n        // If the connector was able the determine the peer's netAddress, update the peer's advertised netAddress.\n        if (this.channel.netAddress) {\n            /*\n             * TODO What to do if it doesn't match the currently advertised one?\n             * This might happen if multiple IPs are assigned to a host.\n             */\n            if (this.peerAddress.netAddress && !this.peerAddress.netAddress.equals(this.channel.netAddress)) {\n                Log.w(Peer, `Got different netAddress ${this.channel.netAddress} for ${this.peerAddress} `\n                    + `- advertised was ${this.peerAddress.netAddress}`);\n            }\n\n            // Only set the advertised netAddress if we have the public IP of the peer.\n            // WebRTC connectors might return local IP addresses for peers on the same LAN.\n            if (!this.channel.netAddress.isPrivate()) {\n                this.peerAddress.netAddress = this.channel.netAddress;\n            }\n        }\n        // Otherwise, use the netAddress advertised for this peer if available.\n        else if (this.channel.peerAddress.netAddress) {\n            this.channel.netAddress = this.channel.peerAddress.netAddress;\n        }\n        // Otherwise, we don't know the netAddress of this peer. Use a pseudo netAddress.\n        else {\n            this.channel.netAddress = NetAddress.UNKNOWN;\n        }\n    }\n\n    /** @type {PeerChannel} */\n    get channel() {\n        return this._channel;\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {Hash} */\n    get headHash() {\n        return this._headHash;\n    }\n\n    /** @type {BlockHeader} */\n    get head() {\n        return this._head;\n    }\n\n    /** @param {BlockHeader} head */\n    set head(head) {\n        this._head = head;\n        this._headHash = head.hash();\n    }\n\n    /** @type {number} */\n    get timeOffset() {\n        return this._timeOffset;\n    }\n\n    /** @type {number} */\n    get id() {\n        return this._channel.id;\n    }\n\n    /** @type {PeerAddress} */\n    get peerAddress() {\n        return this._channel.peerAddress;\n    }\n\n    /** @type {NetAddress} */\n    get netAddress() {\n        return this._channel.netAddress;\n    }\n\n    /**\n     * @param {Peer} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Peer\n            && this._channel.equals(o.channel);\n    }\n\n    hashCode() {\n        return this._channel.hashCode();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `Peer{version=${this._version}, headHash=${this._headHash}, `\n            + `peerAddress=${this.peerAddress}, netAddress=${this.netAddress}}`;\n    }\n}\nClass.register(Peer);\n","class Miner extends Observable {\n    /**\n     * @param {IBlockchain} blockchain\n     * @param {Accounts} accounts\n     * @param {Mempool} mempool\n     * @param {Time} time\n     * @param {Address} minerAddress\n     * @param {Uint8Array} [extraData=new Uint8Array(0)]\n     *\n     * @listens Mempool#transaction-added\n     * @listens Mempool#transaction-ready\n     */\n    constructor(blockchain, accounts, mempool, time, minerAddress, extraData = new Uint8Array(0)) {\n        super();\n        /** @type {IBlockchain} */\n        this._blockchain = blockchain;\n        /** @type {Accounts} */\n        this._accounts = accounts;\n        /** @type {Mempool} */\n        this._mempool = mempool;\n        /** @type {Time} */\n        this._time = time;\n        /** @type {Address} */\n        this._address = minerAddress;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n\n        /**\n         * Number of hashes computed since the last hashrate update.\n         * @type {number}\n         * @private\n         */\n        this._hashCount = 0;\n\n        /**\n         * Timestamp of the last hashrate update.\n         * @type {number}\n         * @private\n         */\n        this._lastHashrate = 0;\n\n        /**\n         * Hashrate computation interval handle.\n         * @private\n         */\n        this._hashrateWorker = null;\n\n        /**\n         * The current hashrate of this miner.\n         * @type {number}\n         * @private\n         */\n        this._hashrate = 0;\n\n        /**\n         * The last hash counts used in the moving average.\n         * @type {Array.<number>}\n         * @private\n         */\n        this._lastHashCounts = [];\n\n        /**\n         * The total hashCount used in the current moving average.\n         * @type {number}\n         * @private\n         */\n        this._totalHashCount = 0;\n\n        /**\n         * The time elapsed for the last measurements used in the moving average.\n         * @type {Array.<number>}\n         * @private\n         */\n        this._lastElapsed = [];\n\n        /**\n         * The total time elapsed used in the current moving average.\n         * @type {number}\n         * @private\n         */\n        this._totalElapsed = 0;\n\n        /** @type {MinerWorkerPool} */\n        this._workerPool = new MinerWorkerPool();\n\n        if (typeof navigator === 'object' && navigator.hardwareConcurrency) {\n            this.threads = Math.ceil(navigator.hardwareConcurrency / 2);\n        } else if (PlatformUtils.isNodeJs()) {\n            const cores = require('os').cpus().length;\n            this.threads = Math.ceil(cores / 2);\n            if (cores === 1) this.throttleAfter = 2;\n        } else {\n            this.threads = 1;\n        }\n        this._workerPool.on('share', (obj) => this._onWorkerShare(obj));\n        this._workerPool.on('no-share', (obj) => this._onWorkerShare(obj));\n\n        /**\n         * Flag indicating that the mempool has changed since we started mining the current block.\n         * @type {boolean}\n         * @private\n         */\n        this._mempoolChanged = false;\n\n        /** @type {boolean} */\n        this._restarting = false;\n\n        /** @type {number} */\n        this._lastRestart = 0;\n\n        /** @type {boolean} */\n        this._submittingBlock = false;\n\n        // Listen to changes in the mempool which evicts invalid transactions\n        // after every blockchain head change and then fires 'transactions-ready'\n        // when the eviction process finishes. Restart work on the next block\n        // with fresh transactions when this fires.\n        this._mempool.on('transactions-ready', () => this._startWork());\n\n        // Immediately start processing transactions when they come in.\n        this._mempool.on('transaction-added', () => this._mempoolChanged = true);\n    }\n\n    startWork() {\n        if (this.working) {\n            return;\n        }\n\n        // Initialize hashrate computation.\n        this._hashCount = 0;\n        this._lastElapsed = [];\n        this._lastHashCounts = [];\n        this._totalHashCount = 0;\n        this._totalElapsed = 0;\n        this._lastHashrate = Date.now();\n        this._hashrateWorker = setInterval(() => this._updateHashrate(), 1000);\n        this._retry = 0;\n\n        // Tell listeners that we've started working.\n        this.fire('start', this);\n\n        // Kick off the mining process.\n        this._startWork().catch(Log.w.tag(Miner));\n    }\n\n    async _startWork() {\n        // XXX Needed as long as we cannot unregister from transactions-ready events.\n        if (!this.working || this._restarting) {\n            return;\n        }\n        try {\n            this._lastRestart = Date.now();\n            this._restarting = true;\n            this._mempoolChanged = false;\n\n            // Construct next block.\n            this._retry = 0;\n            const block = await this.getNextBlock();\n\n            Log.i(Miner, `Starting work on ${block.header}, transactionCount=${block.transactionCount}, hashrate=${this._hashrate} H/s`);\n\n            this._workerPool.startMiningOnBlock(block).catch(Log.w.tag(Miner));\n        } catch (e) {\n            Log.w(Miner, 'Failed to start work, retrying in 100ms');\n            this.stopWork();\n            setTimeout(() => this.startWork(), 100);\n        } finally {\n            this._restarting = false;\n        }\n    }\n\n    /**\n     * @param {{hash: Hash, nonce: number, block: Block}} obj\n     * @private\n     */\n    async _onWorkerShare(obj) {\n        this._hashCount += this._workerPool.noncesPerRun;\n        if (obj.block && obj.block.prevHash.equals(this._blockchain.headHash)) {\n            Log.d(Miner, () => `Received share: ${obj.nonce} / ${obj.hash.toHex()}`);\n            if (BlockUtils.isProofOfWork(obj.hash, obj.block.target) && !this._submittingBlock) {\n                obj.block.header.nonce = obj.nonce;\n                this._submittingBlock = true;\n                if (await obj.block.header.verifyProofOfWork()) {\n                    // Tell listeners that we've mined a block.\n                    this.fire('block-mined', obj.block, this);\n\n                    // Push block into blockchain.\n                    if ((await this._blockchain.pushBlock(obj.block)) < 0) {\n                        this._submittingBlock = false;\n                        this._startWork().catch(Log.w.tag(Miner));\n                        return;\n                    } else {\n                        this._submittingBlock = false;\n                    }\n                } else {\n                    Log.d(Miner, `Ignoring invalid share: ${await obj.block.header.pow()}`);\n                }\n            }\n        }\n        if (this._mempoolChanged && this._lastRestart + Miner.MIN_TIME_ON_BLOCK < Date.now()) {\n            this._startWork().catch(Log.w.tag(Miner));\n        }\n    }\n\n    /**\n     * @return {Promise.<Block>}\n     * @private\n     */\n    async getNextBlock() {\n        this._retry++;\n        try {\n            const nextTarget = await this._blockchain.getNextTarget();\n            const interlink = await this._getNextInterlink(nextTarget);\n            const body = await this._getNextBody(interlink.serializedSize);\n            const header = await this._getNextHeader(nextTarget, interlink, body);\n            if ((await this._blockchain.getNextTarget()) !== nextTarget) return this.getNextBlock();\n            return new Block(header, interlink, body);\n        } catch (e) {\n            // Retry up to three times.\n            if (this._retry <= 3) return this.getNextBlock();\n            throw e;\n        }\n    }\n\n    /**\n     * @param {number} nextTarget\n     * @param {BlockInterlink} interlink\n     * @param {BlockBody} body\n     * @return {Promise.<BlockHeader>}\n     * @private\n     */\n    async _getNextHeader(nextTarget, interlink, body) {\n        const prevHash = this._blockchain.headHash;\n        const interlinkHash = interlink.hash();\n        const height = this._blockchain.height + 1;\n\n        // Compute next accountsHash.\n        const accounts = await this._accounts.transaction();\n        let accountsHash;\n        try {\n            await accounts.commitBlockBody(body, height, this._blockchain.transactionCache);\n            accountsHash = await accounts.hash();\n            await accounts.abort();\n        } catch (e) {\n            await accounts.abort();\n            throw new Error(`Invalid block body: ${e.message}`);\n        }\n\n        const bodyHash = body.hash();\n        const timestamp = this._getNextTimestamp();\n        const nBits = BlockUtils.targetToCompact(nextTarget);\n        const nonce = 0;\n        return new BlockHeader(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce);\n    }\n\n    /**\n     * @param {number} nextTarget\n     * @returns {Promise.<BlockInterlink>}\n     * @private\n     */\n    _getNextInterlink(nextTarget) {\n        return this._blockchain.head.getNextInterlink(nextTarget);\n    }\n\n    /**\n     * @param {number} interlinkSize\n     * @return {BlockBody}\n     * @private\n     */\n    async _getNextBody(interlinkSize) {\n        const maxSize = Policy.BLOCK_SIZE_MAX\n            - BlockHeader.SERIALIZED_SIZE\n            - interlinkSize\n            - BlockBody.getMetadataSize(this._extraData);\n        const transactions = await this._mempool.getTransactionsForBlock(maxSize);\n        const prunedAccounts = await this._accounts.gatherToBePrunedAccounts(transactions, this._blockchain.height + 1, this._blockchain.transactionCache);\n        return new BlockBody(this._address, transactions, this._extraData, prunedAccounts);\n    }\n\n    /**\n     * @return {number}\n     * @private\n     */\n    _getNextTimestamp() {\n        const now = Math.floor(this._time.now() / 1000);\n        return Math.max(now, this._blockchain.head.timestamp + 1);\n    }\n\n    /**\n     * @fires Miner#stop\n     */\n    stopWork() {\n        // TODO unregister from blockchain head-changed events.\n        if (!this.working) {\n            return;\n        }\n\n        clearInterval(this._hashrateWorker);\n        this._hashrateWorker = null;\n        this._hashrate = 0;\n        this._lastElapsed = [];\n        this._lastHashCounts = [];\n        this._totalHashCount = 0;\n        this._totalElapsed = 0;\n\n        // Tell listeners that we've stopped working.\n        this._workerPool.stop();\n        this.fire('stop', this);\n\n        Log.i(Miner, 'Stopped work');\n    }\n\n    /**\n     * @fires Miner#hashrate-changed\n     * @private\n     */\n    _updateHashrate() {\n        const elapsed = (Date.now() - this._lastHashrate) / 1000;\n        const hashCount = this._hashCount;\n        // Enable next measurement.\n        this._hashCount = 0;\n        this._lastHashrate = Date.now();\n\n        // Update stored information on moving average.\n        this._lastElapsed.push(elapsed);\n        this._lastHashCounts.push(hashCount);\n        this._totalElapsed += elapsed;\n        this._totalHashCount += hashCount;\n\n        if (this._lastElapsed.length > Miner.MOVING_AVERAGE_MAX_SIZE) {\n            const oldestElapsed = this._lastElapsed.shift();\n            const oldestHashCount = this._lastHashCounts.shift();\n            this._totalElapsed -= oldestElapsed;\n            this._totalHashCount -= oldestHashCount;\n        }\n\n        this._hashrate = Math.round(this._totalHashCount / this._totalElapsed);\n\n        // Tell listeners about our new hashrate.\n        this.fire('hashrate-changed', this._hashrate, this);\n    }\n\n    /** @type {Address} */\n    get address() {\n        return this._address;\n    }\n\n    /** @type {boolean} */\n    get working() {\n        return !!this._hashrateWorker;\n    }\n\n    /** @type {number} */\n    get hashrate() {\n        return this._hashrate;\n    }\n\n    /** @type {number} */\n    get threads() {\n        return this._workerPool.poolSize;\n    }\n\n    /**\n     * @param {number} threads\n     */\n    set threads(threads) {\n        this._workerPool.poolSize = threads;\n    }\n\n    /** @type {number} */\n    get throttleWait() {\n        return this._workerPool.cycleWait;\n    }\n\n    /**\n     * @param {number} throttleWait\n     */\n    set throttleWait(throttleWait) {\n        this._workerPool.cycleWait = throttleWait;\n    }\n\n    /** @type {number} */\n    get throttleAfter() {\n        return this._workerPool.runsPerCycle;\n    }\n\n    /**\n     * @param {number} throttleAfter\n     */\n    set throttleAfter(throttleAfter) {\n        this._workerPool.runsPerCycle = throttleAfter;\n    }\n}\n\nMiner.MIN_TIME_ON_BLOCK = 10000;\nMiner.MOVING_AVERAGE_MAX_SIZE = 10;\nClass.register(Miner);\n","class Wallet {\n    /**\n     * Create a new Wallet.\n     * @returns {Promise.<Wallet>} Newly created Wallet.\n     */\n    static async generate() {\n        return new Wallet(KeyPair.generate());\n    }\n\n    /**\n     * @param {Uint8Array|string} buf\n     * @return {Wallet}\n     */\n    static loadPlain(buf) {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (!buf || buf.byteLength === 0) {\n            throw new Error('Invalid wallet seed');\n        }\n        return new Wallet(KeyPair.unserialize(new SerialBuffer(buf)));\n    }\n\n    /**\n     * @param {Uint8Array|string} buf\n     * @param {Uint8Array|string} key\n     * @return {Promise.<Wallet>}\n     */\n    static async loadEncrypted(buf, key) {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (typeof key === 'string') key = BufferUtils.fromAscii(key);\n        return new Wallet(await KeyPair.fromEncrypted(new SerialBuffer(buf), key));\n    }\n\n    /**\n     * Create a new Wallet object.\n     * @param {KeyPair} keyPair KeyPair owning this Wallet.\n     * @returns {Wallet} A newly generated Wallet.\n     */\n    constructor(keyPair) {\n        /** @type {KeyPair} */\n        this._keyPair = keyPair;\n        /** @type {Address} */\n        this._address = this._keyPair.publicKey.toAddress();\n    }\n\n    /**\n     * Create a Transaction that is signed by the owner of this Wallet.\n     * @param {Address} recipient Address of the transaction receiver\n     * @param {number} value Number of Satoshis to send.\n     * @param {number} fee Number of Satoshis to donate to the Miner.\n     * @param {number} validityStartHeight The validityStartHeight for the transaction.\n     * @returns {Transaction} A prepared and signed Transaction object. This still has to be sent to the network.\n     */\n    createTransaction(recipient, value, fee, validityStartHeight) {\n        const transaction = new BasicTransaction(this._keyPair.publicKey, recipient, value, fee, validityStartHeight);\n        transaction.signature = Signature.create(this._keyPair.privateKey, this._keyPair.publicKey, transaction.serializeContent());\n        return transaction;\n    }\n\n    /**\n     * Sign a transaction by the owner of this Wallet.\n     * @param {Transaction} transaction The transaction to sign.\n     * @returns {SignatureProof} A signature proof for this transaction.\n     */\n    signTransaction(transaction) {\n        const signature = Signature.create(this._keyPair.privateKey, this._keyPair.publicKey, transaction.serializeContent());\n        return SignatureProof.singleSig(this._keyPair.publicKey, signature);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    exportPlain() {\n        return this._keyPair.serialize();\n    }\n\n    /**\n     * @param {Uint8Array|string} key\n     * @param {Uint8Array|string} [unlockKey]\n     * @return {Promise.<Uint8Array>}\n     */\n    exportEncrypted(key, unlockKey) {\n        if (typeof key === 'string') key = BufferUtils.fromAscii(key);\n        if (typeof unlockKey === 'string') unlockKey = BufferUtils.fromAscii(unlockKey);\n        return this._keyPair.exportEncrypted(key, unlockKey);\n    }\n\n    /** @type {boolean} */\n    get isLocked() {\n        return this.keyPair.isLocked;\n    }\n\n    /**\n     * @param {Uint8Array|string} key\n     * @returns {Promise.<void>}\n     */\n    lock(key) {\n        if (typeof key === 'string') key = BufferUtils.fromAscii(key);\n        return this.keyPair.lock(key);\n    }\n\n    relock() {\n        this.keyPair.relock();\n    }\n\n    /**\n     * @param {Uint8Array|string} key\n     * @returns {Promise.<void>}\n     */\n    unlock(key) {\n        if (typeof key === 'string') key = BufferUtils.fromAscii(key);\n        return this.keyPair.unlock(key);\n    }\n\n    /**\n     * @param {Wallet} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Wallet && this.keyPair.equals(o.keyPair) && this.address.equals(o.address);\n    }\n\n    /**\n     * The address of the Wallet owner.\n     * @type {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * The public key of the Wallet owner\n     * @type {PublicKey}\n     */\n    get publicKey() {\n        return this._keyPair.publicKey;\n    }\n\n    /** @type {KeyPair} */\n    get keyPair() {\n        return this._keyPair;\n    }\n}\n\nClass.register(Wallet);\n","class MultiSigWallet extends Wallet {\n    /**\n     * Create a new MultiSigWallet object.\n     * @param {KeyPair} keyPair KeyPair owning this Wallet.\n     * @param {number} minSignatures Number of signatures required.\n     * @param {Array.<PublicKey>} publicKeys A list of all owners' public keys.\n     * @returns {MultiSigWallet} A newly generated MultiSigWallet.\n     */\n    static fromPublicKeys(keyPair, minSignatures, publicKeys) {\n        if (publicKeys.length === 0) throw new Error('publicKeys may not be empty');\n        if (minSignatures <= 0) throw new Error('minSignatures must be greater than 0');\n        if (!publicKeys.some(key => key.equals(keyPair.publicKey))) throw new Error('Own publicKey must be part of publicKeys');\n\n        // Sort public keys so that the order when signing and construction does not matter.\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        const combinations = [...ArrayUtils.k_combinations(publicKeys, minSignatures)];\n        const multiSigKeys = combinations.map(arr => PublicKey.sum(arr));\n        return new MultiSigWallet(keyPair, minSignatures, multiSigKeys);\n    }\n\n    /**\n     * @param {KeyPair} keyPair\n     * @param {SerialBuffer} buf\n     * @returns {MultiSigWallet}\n     * @private\n     */\n    static _loadMultiSig(keyPair, buf) {\n        const minSignatures = buf.readUint8();\n        const numPublicKeys = buf.readUint8();\n        const publicKeys = [];\n        for (let i = 0; i < numPublicKeys; ++i) {\n            publicKeys.push(PublicKey.unserialize(buf));\n        }\n        return new MultiSigWallet(keyPair, minSignatures, publicKeys);\n    }\n\n    /**\n     * @param {Uint8Array|string} buf\n     * @return {MultiSigWallet}\n     */\n    static loadPlain(buf) {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (!buf || buf.byteLength === 0) {\n            throw new Error('Invalid wallet seed');\n        }\n\n        const serialBuf = new SerialBuffer(buf);\n        const keyPair = KeyPair.unserialize(serialBuf);\n        return MultiSigWallet._loadMultiSig(keyPair, serialBuf);\n    }\n\n    /**\n     * @param {Uint8Array|string} buf\n     * @param {Uint8Array|string} key\n     * @return {Promise.<MultiSigWallet>}\n     */\n    static async loadEncrypted(buf, key) {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (typeof key === 'string') key = BufferUtils.fromAscii(key);\n\n        const serialBuf = new SerialBuffer(buf);\n        const keyPair = await KeyPair.fromEncrypted(serialBuf, key);\n        return MultiSigWallet._loadMultiSig(keyPair, serialBuf);\n    }\n\n    /**\n     * Create a new MultiSigWallet object.\n     * @param {KeyPair} keyPair KeyPair owning this Wallet.\n     * @param {number} minSignatures Number of signatures required.\n     * @param {Array.<PublicKey>} publicKeys A list of all aggregated public keys.\n     * @returns {MultiSigWallet} A newly generated MultiSigWallet.\n     */\n    constructor(keyPair, minSignatures, publicKeys) {\n        super(keyPair);\n        /** @type {number} minSignatures */\n        this._minSignatures = minSignatures;\n        /** @type {Array.<PublicKey>} publicKeys */\n        this._publicKeys = publicKeys;\n        this._publicKeys.sort((a, b) => a.compare(b));\n\n        const merkleRoot = MerkleTree.computeRoot(this._publicKeys);\n        /** @type {Address} */\n        this._address = Address.fromHash(merkleRoot);\n    }\n\n    /**\n     * @override\n     * @returns {Uint8Array}\n     */\n    exportPlain() {\n        const buf = new SerialBuffer(this.exportedSize);\n        this._keyPair.serialize(buf);\n        buf.writeUint8(this._minSignatures);\n        buf.writeUint8(this._publicKeys.length);\n        for (const pubKey of this._publicKeys) {\n            pubKey.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @override\n     * @param {Uint8Array|string} key\n     * @param {Uint8Array|string} [unlockKey]\n     * @return {Promise.<Uint8Array>}\n     */\n    async exportEncrypted(key, unlockKey) {\n        if (typeof key === 'string') key = BufferUtils.fromAscii(key);\n        if (typeof unlockKey === 'string') unlockKey = BufferUtils.fromAscii(unlockKey);\n        const buf = new SerialBuffer(this.encryptedExportedSize);\n        buf.write(await this._keyPair.exportEncrypted(key, unlockKey));\n        buf.writeUint8(this._minSignatures);\n        buf.writeUint8(this._publicKeys.length);\n        for (const pubKey of this._publicKeys) {\n            pubKey.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get encryptedExportedSize() {\n        return this._keyPair.encryptedSize\n            + /*minSignatures*/ 1\n            + /*count*/ 1\n            + this._publicKeys.reduce((sum, pubKey) => sum + pubKey.serializedSize, 0);\n    }\n\n    /** @type {number} */\n    get exportedSize() {\n        return this._keyPair.serializedSize\n            + /*minSignatures*/ 1\n            + /*count*/ 1\n            + this._publicKeys.reduce((sum, pubKey) => sum + pubKey.serializedSize, 0);\n    }\n\n    /**\n     * Create a Transaction that still needs to be signed.\n     * @param {Address} recipientAddr Address of the transaction receiver\n     * @param {number} value Number of Satoshis to send.\n     * @param {number} fee Number of Satoshis to donate to the Miner.\n     * @param {number} validityStartHeight The validityStartHeight for the transaction.\n     * @returns {Transaction} A prepared Transaction object.\n     * @override\n     */\n    createTransaction(recipientAddr, value, fee, validityStartHeight) {\n        return new ExtendedTransaction(this._address, Account.Type.BASIC,\n            recipientAddr, Account.Type.BASIC, value, fee, validityStartHeight,\n            Transaction.Flag.NONE, new Uint8Array(0));\n    }\n\n    /**\n     * Creates a commitment pair for signing a transaction.\n     * @returns {CommitmentPair} The commitment pair.\n     */\n    createCommitment() {\n        return CommitmentPair.generate();\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Commitment} aggregatedCommitment\n     * @param {RandomSecret} secret\n     * @returns {PartialSignature}\n     */\n    partiallySignTransaction(transaction, publicKeys, aggregatedCommitment, secret) {\n        // Sort public keys to get the right combined public key.\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n\n        return PartialSignature.create(this._keyPair.privateKey, this._keyPair.publicKey, publicKeys,\n            secret, aggregatedCommitment, transaction.serializeContent());\n    }\n\n    /**\n     * Sign a transaction by the owner of this Wallet.\n     * @param {Transaction} transaction The transaction to sign.\n     * @param {PublicKey} aggregatedPublicKey\n     * @param {Commitment} aggregatedCommitment\n     * @param {Array.<PartialSignature>} signatures\n     * @returns {SignatureProof} A signature proof for this transaction.\n     */\n    signTransaction(transaction, aggregatedPublicKey, aggregatedCommitment, signatures) {\n        if (signatures.length !== this._minSignatures) {\n            throw 'Not enough signatures to complete this transaction';\n        }\n\n        const signature = Signature.fromPartialSignatures(aggregatedCommitment, signatures);\n        return SignatureProof.multiSig(aggregatedPublicKey, this._publicKeys, signature);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {PublicKey} aggregatedPublicKey\n     * @param {Commitment} aggregatedCommitment\n     * @param {Array.<PartialSignature>} signatures\n     * @returns {Transaction}\n     */\n    completeTransaction(transaction, aggregatedPublicKey, aggregatedCommitment, signatures) {\n        const proof = this.signTransaction(transaction, aggregatedPublicKey, aggregatedCommitment, signatures);\n        transaction.proof = proof.serialize();\n        return transaction;\n    }\n\n    /** @type {number} */\n    get minSignatures() {\n        return this._minSignatures;\n    }\n\n    /** @type {Array.<PublicKey>} */\n    get publicKeys() {\n        return this._publicKeys;\n    }\n}\nClass.register(MultiSigWallet);\n","// TODO: Move outside of Nimiq Core library?\nclass WalletStore {\n    /**\n     * @returns {Promise.<WalletStore>}\n     */\n    constructor(dbName = 'wallet') {\n        this._jdb = new JDB.JungleDB(dbName, WalletStore.VERSION, {\n            maxDbSize: WalletStore.INITIAL_DB_SIZE,\n            autoResize: true,\n            minResize: WalletStore.MIN_RESIZE\n        });\n        /** @type {ObjectStore} */\n        this._walletStore = null;\n        /** @type {ObjectStore} */\n        this._multiSigStore = null;\n\n        return this._init();\n    }\n\n    /**\n     * @returns {Promise.<WalletStore>}\n     */\n    async _init() {\n        // Initialize object stores.\n        this._walletStore = this._jdb.createObjectStore(WalletStore.WALLET_DATABASE, { codec: new WalletStoreCodec() });\n        this._multiSigStore = this._jdb.createObjectStore(WalletStore.MULTISIG_WALLET_DATABASE, { codec: new WalletStoreCodec() });\n\n        // Establish connection to database.\n        await this._jdb.connect();\n\n        return this;\n    }\n\n    /**\n     * @returns {Promise.<boolean>}\n     */\n    async hasDefault(key) {\n        const defaultAddress = await this._walletStore.get('default');\n        return !!defaultAddress;\n    }\n\n    /**\n     * @param {Uint8Array|string} [key]\n     * @returns {Promise.<?Wallet>}\n     */\n    async getDefault(key) {\n        const defaultAddress = await this._walletStore.get('default');\n        if (!defaultAddress) {\n            const defaultWallet = await Wallet.generate();\n            await this.put(defaultWallet);\n            await this.setDefault(defaultWallet.address);\n            return defaultWallet;\n        }\n        const base64Address = new Address(defaultAddress);\n        return this.get(base64Address, key);\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise}\n     */\n    setDefault(address) {\n        const defaultAddress = address.serialize();\n        return this._walletStore.put('default', defaultAddress);\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Uint8Array|string} [key]\n     * @returns {Promise.<?Wallet>}\n     */\n    async get(address, key) {\n        const base64Address = address.toBase64();\n        const buf = await this._walletStore.get(base64Address);\n        if (!buf) return null;\n        if (key) {\n            return Wallet.loadEncrypted(buf, key);\n        }\n        return Wallet.loadPlain(buf);\n    }\n\n    /**\n     * @param {Wallet} wallet\n     * @param {Uint8Array|string} [key]\n     * @param {Uint8Array|string} [unlockKey]\n     * @returns {Promise}\n     */\n    async put(wallet, key, unlockKey) {\n        const base64Address = wallet.address.toBase64();\n        /** @type {Uint8Array} */\n        let buf = null;\n        if (key) {\n            buf = await wallet.exportEncrypted(key, unlockKey);\n        } else {\n            buf = wallet.exportPlain();\n        }\n        return this._walletStore.put(base64Address, buf);\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise}\n     */\n    async remove(address) {\n        const base64Address = address.toBase64();\n        const tx = this._walletStore.transaction();\n        tx.removeSync(base64Address);\n        // Remove default address as well if they coincide.\n        let defaultAddress = await this._walletStore.get('default');\n        if (defaultAddress) {\n            defaultAddress = new Address(defaultAddress);\n            if (address.equals(defaultAddress)) {\n                tx.removeSync('default');\n            }\n        }\n        return tx.commit();\n    }\n\n    /**\n     * @returns {Promise<Array.<Address>>}\n     */\n    async list() {\n        const keys = await this._walletStore.keys();\n        return Array.from(keys).filter(key => key !== 'default').map(key => Address.fromBase64(key));\n    }\n\n    /**\n     * @param {Address} address\n     * @param {Uint8Array|string} [key]\n     * @returns {Promise.<?MultiSigWallet>}\n     */\n    async getMultiSig(address, key) {\n        const base64Address = address.toBase64();\n        const buf = await this._multiSigStore.get(base64Address);\n        if (!buf) return null;\n        if (key) {\n            return MultiSigWallet.loadEncrypted(buf, key);\n        }\n        return MultiSigWallet.loadPlain(buf);\n    }\n\n    /**\n     * @param {MultiSigWallet} wallet\n     * @param {Uint8Array|string} [key]\n     * @param {Uint8Array|string} [unlockKey]\n     * @returns {Promise}\n     */\n    async putMultiSig(wallet, key, unlockKey) {\n        const base64Address = wallet.address.toBase64();\n        /** @type {Uint8Array} */\n        let buf = null;\n        if (key) {\n            buf = await wallet.exportEncrypted(key, unlockKey);\n        } else {\n            buf = wallet.exportPlain();\n        }\n        return this._multiSigStore.put(base64Address, buf);\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise}\n     */\n    removeMultiSig(address) {\n        const base64Address = address.toBase64();\n        return this._multiSigStore.remove(base64Address);\n    }\n\n    /**\n     * @returns {Promise<Array.<Address>>}\n     */\n    async listMultiSig() {\n        const keys = await this._multiSigStore.keys();\n        return Array.from(keys).map(key => Address.fromBase64(key));\n    }\n\n    close() {\n        return this._jdb.close();\n    }\n}\nClass.register(WalletStore);\nWalletStore._instance = null;\nWalletStore.VERSION = 1;\nWalletStore.INITIAL_DB_SIZE = 1024*1024*10; // 10 MB initially\nWalletStore.MIN_RESIZE = 1024*1024*10; // 10 MB\nWalletStore.WALLET_DATABASE = 'wallets';\nWalletStore.MULTISIG_WALLET_DATABASE = 'multisig-wallets';\n\n/**\n * @implements {ICodec}\n */\nclass WalletStoreCodec {\n    /**\n     * @param {*} obj The object to encode before storing it.\n     * @returns {*} Encoded object.\n     */\n    encode(obj) {\n        return obj;\n    }\n\n    /**\n     * @param {*} buf The object to decode.\n     * @param {string} key The object's primary key.\n     * @returns {*} Decoded object.\n     */\n    decode(buf, key) {\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @type {string}\n     */\n    get leveldbValueEncoding() {\n        return 'binary';\n    }\n\n    /**\n     * @type {object}\n     */\n    get lmdbValueEncoding() {\n        return JDB.JungleDB.BINARY_ENCODING;\n    }\n}\n","/**\n * @interface\n */\nclass MinerWorker {\n    /**\n     * @param blockHeader\n     * @param compact\n     * @param minNonce\n     * @param maxNonce\n     * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n     */\n    async multiMine(blockHeader, compact, minNonce, maxNonce) {}\n}\nClass.register(MinerWorker);\n","class MinerWorkerImpl extends IWorker.Stub(MinerWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n    }\n\n    async multiMine(input, compact, minNonce, maxNonce) {\n        const hash = new Uint8Array(32);\n        let wasmOut, wasmIn;\n        try {\n            wasmOut = Module._malloc(hash.length);\n            wasmIn = Module._malloc(input.length);\n            Module.HEAPU8.set(input, wasmIn);\n            const nonce = Module._nimiq_argon2_target(wasmOut, wasmIn, input.length, compact, minNonce, maxNonce, 512);\n            if (nonce === maxNonce) return false;\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hash.length));\n            return {hash, nonce};\n        } catch (e) {\n            Log.w(MinerWorkerImpl, e);\n            throw e;\n        } finally {\n            if (wasmOut !== undefined) Module._free(wasmOut);\n            if (wasmIn !== undefined) Module._free(wasmIn);\n        }\n    }\n}\n\nIWorker.prepareForWorkerUse(MinerWorker, new MinerWorkerImpl());\n","/**\n *\n */\nclass MinerWorkerPool extends IWorker.Pool(MinerWorker) {\n    constructor(size = 1) {\n        super((name) => IWorker.startWorkerForProxy(MinerWorker, name), 'miner', size);\n        /** @type {boolean} */\n        this._miningEnabled = false;\n        /** @type {Array.<{minNonce: number, maxNonce: number}>} */\n        this._activeNonces = [];\n        /** @type {Block} */\n        this._block = null;\n        /** @type {number} */\n        this._noncesPerRun = 256;\n        /** @type {Observable} */\n        this._observable = new Observable();\n        /** @type {number} */\n        this._shareCompact = Policy.BLOCK_TARGET_MAX;\n        /** @type {number} */\n        this._runsPerCycle = Infinity;\n        /** @type {number} */\n        this._cycleWait = 100;\n\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superUpdateToSize = super._updateToSize;\n\n        if (PlatformUtils.isNodeJs()) {\n            /**\n             * @param {SerialBuffer} blockHeader\n             * @param {number} compact\n             * @param {number} minNonce\n             * @param {number} maxNonce\n             * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n             */\n            this.multiMine = function (blockHeader, compact, minNonce, maxNonce) {\n                return new Promise((resolve, fail) => {\n                    NodeNative.node_argon2_target_async(async (nonce) => {\n                        try {\n                            if (nonce === maxNonce) {\n                                resolve(false);\n                            } else {\n                                blockHeader.writePos -= 4;\n                                blockHeader.writeUint32(nonce);\n                                const hash = await (await CryptoWorker.getInstanceAsync()).computeArgon2d(blockHeader);\n                                resolve({hash, nonce});\n                            }\n                        } catch (e) {\n                            fail(e);\n                        }\n                    }, blockHeader, compact, minNonce, maxNonce, 512);\n                });\n            };\n        }\n    }\n\n    /**\n     * @type {number}\n     */\n    get noncesPerRun() {\n        return this._noncesPerRun;\n    }\n\n    /**\n     * @param {number} nonces\n     */\n    set noncesPerRun(nonces) {\n        this._noncesPerRun = nonces;\n    }\n\n    /**\n     * @type {number}\n     */\n    get runsPerCycle() {\n        return this._runsPerCycle;\n    }\n\n    /**\n     * @param {number} runsPerCycle\n     */\n    set runsPerCycle(runsPerCycle) {\n        this._runsPerCycle = runsPerCycle;\n    }\n\n    /**\n     * @type {number}\n     */\n    get cycleWait() {\n        return this._cycleWait;\n    }\n\n    /**\n     * @param {number} cycleWait\n     */\n    set cycleWait(cycleWait) {\n        this._cycleWait = cycleWait;\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) { this._observable.on(type, callback); }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) { this._observable.off(type, id); }\n\n    /**\n     * @param {Block} block\n     * @param {number} [shareCompact] target of a share, in compact format.\n     */\n    async startMiningOnBlock(block, shareCompact = block.nBits) {\n        this._block = block;\n        this._shareCompact = shareCompact;\n        if (!this._miningEnabled) {\n            await this._updateToSize();\n            this._activeNonces = [];\n            this._miningEnabled = true;\n            for (let i = 0; i < this.poolSize; ++i) {\n                this._startMiner();\n            }\n        } else {\n            this._activeNonces = [{minNonce:0, maxNonce:0}];\n        }\n    }\n\n    stop() {\n        this._miningEnabled = false;\n    }\n\n    async _updateToSize() {\n        if (!PlatformUtils.isNodeJs()) {\n            await this._superUpdateToSize.call(this);\n        }\n\n        while (this._miningEnabled && this._activeNonces.length < this.poolSize) {\n            this._startMiner();\n        }\n    }\n\n    _startMiner() {\n        const minNonce = this._activeNonces.length === 0 ? 0 : Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n        const maxNonce = minNonce + this._noncesPerRun;\n        const nonceRange = {minNonce, maxNonce};\n        this._activeNonces.push(nonceRange);\n        this._singleMiner(nonceRange).catch((e) => Log.e(MinerWorkerPool, e));\n    }\n\n    /**\n     * @param {{minNonce: number, maxNonce: number}} nonceRange\n     * @return {Promise.<void>}\n     * @private\n     */\n    async _singleMiner(nonceRange) {\n        let i = 0;\n        while (this._miningEnabled && (IWorker.areWorkersAsync || PlatformUtils.isNodeJs() || i === 0) && i < this._runsPerCycle) {\n            i++;\n            const block = this._block;\n            const result = await this.multiMine(block.header.serialize(), this._shareCompact, nonceRange.minNonce, nonceRange.maxNonce);\n            if (result) {\n                const hash = new Hash(result.hash);\n                this._observable.fire('share', {\n                    block,\n                    nonce: result.nonce,\n                    hash\n                });\n            } else {\n                this._observable.fire('no-share', {\n                    nonce: nonceRange.maxNonce\n                });\n            }\n            if (this._activeNonces.length > this.poolSize) {\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1);\n                return;\n            } else {\n                const newMin = Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n                const newRange = {minNonce: newMin, maxNonce: newMin + this._noncesPerRun};\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1, newRange);\n                nonceRange = newRange;\n            }\n        }\n        if (this._miningEnabled) {\n            setTimeout(() => this._singleMiner(nonceRange), this._cycleWait);\n        }\n    }\n}\n\nClass.register(MinerWorkerPool);\n","    exports._loaded = true;\n    if (typeof exports._onload === 'function') exports._onload();\n    return exports;\n})(Nimiq);\n"]}