{"version":3,"sources":["src/main/platform/browser/index.prefix.js","src/main/platform/browser/Class.js","src/main/platform/browser/utils/LogNative.js","src/main/generic/utils/Log.js","src/main/generic/utils/Observable.js","src/main/platform/browser/crypto/CryptoLib.js","src/main/generic/utils/array/ArrayUtils.js","src/main/generic/utils/assert/Assert.js","src/main/generic/utils/buffer/BufferUtils.js","src/main/generic/utils/buffer/SerialBuffer.js","src/main/generic/utils/number/BigNumber.js","src/main/generic/utils/number/NumberUtils.js","src/main/generic/utils/merkle/MerklePath.js","src/main/generic/utils/platform/PlatformUtils.js","src/main/generic/utils/string/StringUtils.js","src/main/generic/consensus/Policy.js","src/main/generic/consensus/base/primitive/Serializable.js","src/main/generic/consensus/base/primitive/Hash.js","src/main/generic/consensus/base/primitive/PrivateKey.js","src/main/generic/consensus/base/primitive/PublicKey.js","src/main/generic/consensus/base/primitive/KeyPair.js","src/main/generic/consensus/base/primitive/RandomSecret.js","src/main/generic/consensus/base/primitive/Signature.js","src/main/generic/consensus/base/primitive/Commitment.js","src/main/generic/consensus/base/primitive/CommitmentPair.js","src/main/generic/consensus/base/primitive/PartialSignature.js","src/main/generic/consensus/base/account/Address.js","src/main/generic/consensus/base/account/Account.js","src/main/generic/consensus/base/transaction/Transaction.js","src/main/generic/consensus/base/transaction/SignatureProof.js","src/main/generic/consensus/base/transaction/BasicTransaction.js","src/main/generic/consensus/base/transaction/ExtendedTransaction.js","src/main/generic/utils/IWorker.js","src/main/generic/utils/WasmHelper.js","src/main/generic/utils/crypto/CryptoWorker.js","src/main/generic/consensus/GenesisConfigOffline.js","src/main/platform/browser/index.suffix.js"],"names":["Nimiq","window","Proxy","exports","_currentScript","document","currentScript","scripts","getElementsByTagName","length","_path","src","indexOf","substring","lastIndexOf","Class","scope","self","[object Object]","cls","name","register","LogNative","this","_global_level","Log","INFO","_tag_levels","localStorage","c","getItem","JSON","parse","e","console","warn","tag","level","setItem","stringify","args","isLoggable","unshift","Level","toStringTag","Date","toTimeString","substr","error","ERROR","apply","WARNING","info","debug","DEBUG","trace","TRACE","log","instance","_instance","native","_native","setLoggable","get","l","i","toString","constructor","msg","message","arguments","Array","prototype","slice","call","undefined","VERBOSE","ASSERT","v","isNaN","parseInt","toLowerCase","d","bind","w","t","Observable","WILDCARD","_listeners","Map","clear","type","callback","has","push","set","id","promises","listeners","key","res","Promise","all","observable","types","fire","on","CryptoLib","getRandomValues","crypto","msCrypto","ArrayUtils","arr","Math","floor","random","uintarr","begin","end","clamp","min","max","byteLength","len","Uint8Array","buffer","byteOffset","list","k","n","indices","from","x","map","reverseRange","found","j","Assert","condition","Error","BufferUtils","String","fromCharCode","string","buf","charCodeAt","u8","TextDecoder","_ISO_8859_15_DECODER","decode","replace","num","_BASE64_LOOKUP","start","tmp","output","_tripletToBase64","join","extraBytes","parts","len2","_base64encodeChunk","PlatformUtils","isNodeJs","Buffer","btoa","_codePointTextDecoder","_base64fromByteArray","base64","SerialBuffer","atob","toBase64","alphabet","BASE32_ALPHABET","NIMIQ","byte","symbol","shift","carry","base32","charmap","toUpperCase","split","forEach","char","hex","code","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","a","b","viewA","viewB","BASE64_ALPHABET","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","super","_view","DataView","_readPos","_writePos","subarray","readPos","value","writePos","array","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","pow","NumberUtils","isUint64","readUint8","readUint16","readUint32","readUint64","writeUint8","writeUint16","writeUint32","writeUint64","getFloat64","setFloat64","bytes","read","toAscii","isMultibyte","fromAscii","write","view","padding","isUint8","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","s","z","r","compare","y","xc","yc","intCheck","isArray","obj","Object","isOdd","toExponential","str","charAt","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","isNum","test","round","search","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","hasOwnProperty","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","maxOrMin","lt","minimum","gt","dp","rand","Uint32Array","copy","pop","splice","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","rm","concat","multiply","base","m","temp","xlo","xhi","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","format","c0","ne","method","normalise","p1","p2","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","equals","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","val","Number","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","MerklePath","nodes","some","it","MerklePathNode","_nodes","values","leafValue","fnHash","MerkleTree","_hash","leafHash","path","_compute","hash","containsLeaf","inner","Hash","light","mid","left","right","leftLeaf","leftHash","rightLeaf","rightHash","concatTypedArrays","serialize","root","node","serializedSize","count","leftBitsSize","leftBits","unserialize","_compress","reduce","sum","o","every","_left","isBrowser","process","require","RTCPeerConnection","webkitRTCPeerConnection","navigator","onLine","isHex","str1","str2","Policy","coins","SATOSHIS_PER_COIN","satoshis","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","remaining","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","BLOCK_TARGET_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","arg","algorithm","Algorithm","BLAKE2B","getSize","_obj","_algorithm","blake2b","computeBlake2b","argon2d","CryptoWorker","getInstanceAsync","computeArgon2d","ARGON2D","computeSha256","SHA256","sha256","SIZE","fromBase64","fromHex","size","input","NodeNative","node_blake2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","_nimiq_blake2","stackRestore","node_sha256","_nimiq_sha256","SHA512","NULL","PrivateKey","privateKey","lib","publicKey","publicKeysHash","PublicKey","node_ed25519_derive_delinearized_private_key","wasmInPrivateKey","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_derive_delinearized_private_key","delinearizedPrivateKey","CryptoWorkerImpl","_publicKeyDerive","publicKeys","sort","_delinearizeAndAggregatePublicKeys","Address","fromHash","PeerId","publicKeysObj","_publicKeysHash","raw","_publicKeysDelinearizeAndAggregate","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","KeyPair","locked","lockSalt","_locked","_lockedInternally","_lockSalt","_publicKey","_internalPrivateKey","generate","derive","hexBuf","roundsLog","rounds","encryptedKey","salt","EXPORT_SALT_LENGTH","check","EXPORT_CHECKSUM_LENGTH","_otpKdf","keyPair","pubHash","_privateKey","isLocked","_unlockedPrivateKey","unlockKey","wasLocked","unlock","encryptedSize","log2","EXPORT_KDF_ROUNDS","relock","overwrite","_otpPrivateKey","_clearUnlockedPrivateKey","LOCK_KDF_ROUNDS","iterations","xor","kdf","RandomSecret","Signature","data","_signatureCreate","commitment","signatures","_combinePartialSignatures","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","Commitment","commitments","_commitmentsAggregate","concatenatedCommitments","node_ed25519_aggregate_commitments","wasmInCommitments","_ed25519_aggregate_commitments","aggCommitments","CommitmentPair","secret","_secret","_commitment","randomness","RANDOMNESS_SIZE","_commitmentCreate","node_ed25519_create_commitment","wasmOutCommitment","wasmOutSecret","_ed25519_create_commitment","SERIALIZED_SIZE","aggregateCommitment","_delinearizedPartialSignatureCreate","node_ed25519_delinearized_partial_sign","wasmInSecret","wasmInCommitment","_ed25519_delinearized_partial_sign","partialSignature","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","withSpaces","toBase32","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","transaction","transactionsCache","revert","validityStartHeight","withBalance","fee","newBalance","containsTransaction","INITIAL","isInitial","Type","BASIC","VESTING","HTLC","Transaction","sender","senderType","recipient","recipientType","flags","proof","networkId","GenesisConfig","NETWORK_ID","isUint32","Flag","isUint16","_format","_sender","_senderType","_recipient","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","_proof","getContractCreationAddress","FORMAT_MAP","serializedContentSize","_valid","_verify","verifyOutgoingTransaction","verifyIncomingTransaction","serializeContent","compareBlockOrder","recCompare","senderCompare","tx","feePerByte","flag","Format","EXTENDED","NONE","ALL","SignatureProof","verify","signerKey","merklePath","compute","_merklePath","_signature","isSignedBy","merkleRoot","computeRoot","BasicTransaction","senderPubKey","singleSig","toAddress","_signatureProof","that","ExtendedTransaction","dataSize","proofSize","IWorker","clazz","worker","workerScript","_workersSupported","createProxy","Worker","URL","createObjectURL","Blob","_workerImplementation","init","Pool","startWorkerForProxy","command","postMessage","status","result","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","global","baseClazz","impl","onmessage","stubBaseOnMessage","url","resolve","head","script","createElement","ret","setTimeout","onreadystatechange","onload","appendChild","proxyClass","_name","_messageId","_worker","_receive","_waiting","_invoke","then","cb","delete","WorkerProxy","funcName","getOwnPropertyNames","Stub","finalRes","_result","_onmessage","close","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_updateToSize","poolSize","_size","catch","_step","destroy","workerPromises","createdWorkers","idx","_moduleLoadedCallbacks","WasmHelper","_importStarted","importWasmBrowser","importScriptBrowser","_importFinished","importWasmNodeJs","importScriptNodeJs","wasm","module","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","open","responseType","wasmBinary","response","onerror","send","fs","readFileSync","u","toUint8Array","asm","_adjustScriptPath","moduleSettings","async","reject","onRuntimeInitialized","importScripts","_loadBrowserScript","__dirname","_workerAsync","startWorkerPoolForProxy","inputs","block","transactionValid","timeNow","genesisHash","CONFIGS","_config","NETWORK_NAME","main","dev","bounty","_loaded","_onload"],"mappings":"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","file":"web-offline.js","sourcesContent":["if (typeof Nimiq === 'undefined') {\n    var Nimiq = typeof window !== 'undefined' ? window : {};\n}\nvar Proxy; // ensure Proxy exists\n(function (exports) {\n    exports = typeof exports !== 'undefined' ? exports : {};\n    Nimiq = exports;\n    if (!Nimiq._currentScript) {\n        Nimiq._currentScript = document.currentScript;\n    }\n    if (!Nimiq._currentScript) {\n        // Heuristic\n        const scripts = document.getElementsByTagName('script');\n        Nimiq._currentScript = scripts[scripts.length - 1];\n    }\n    if (!Nimiq._path) {\n        if (Nimiq._currentScript && Nimiq._currentScript.src.indexOf('/') !== -1) {\n            Nimiq._path = Nimiq._currentScript.src.substring(0, Nimiq._currentScript.src.lastIndexOf('/') + 1);\n        } else {\n            // Fallback\n            Nimiq._path = './';\n        }\n    }\n","class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        if (typeof self !== 'undefined') return self;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","class Observable {\n    /**\n     * @returns {string}\n     * @constant\n     */\n    static get WILDCARD() {\n        return '*';\n    }\n\n    constructor() {\n        /** @type {Map.<string, Array.<Function>>} */\n        this._listeners = new Map();\n    }\n\n    _offAll() {\n        this._listeners.clear();\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) {\n        if (!this._listeners.has(type)) {\n            this._listeners.set(type, [callback]);\n            return 0;\n        } else {\n            return this._listeners.get(type).push(callback) - 1;\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) {\n        if (!this._listeners.has(type) || !this._listeners.get(type)[id]) return;\n        delete this._listeners.get(type)[id];\n    }\n\n    /**\n     * @param {string} type\n     * @param {...*} args\n     * @returns {Promise|null}\n     */\n    fire(type, ...args) {\n        const promises = [];\n        // Notify listeners for this event type.\n        if (this._listeners.has(type)) {\n            const listeners = this._listeners.get(type);\n            for (const key in listeners) {\n                // Skip non-numeric properties.\n                if (isNaN(key)) continue;\n\n                const listener = listeners[key];\n                const res = listener.apply(null, args);\n                if (res instanceof Promise) promises.push(res);\n            }\n        }\n\n        // Notify wildcard listeners. Pass event type as first argument\n        if (this._listeners.has(Observable.WILDCARD)) {\n            const listeners = this._listeners.get(Observable.WILDCARD);\n            for (const key in listeners) {\n                // Skip non-numeric properties.\n                if (isNaN(key)) continue;\n\n                const listener = listeners[key];\n                const res = listener.apply(null, arguments);\n                if (res instanceof Promise) promises.push(res);\n            }\n        }\n\n        if (promises.length > 0) return Promise.all(promises);\n        return null;\n    }\n\n    /**\n     * @param {Observable} observable\n     * @param {...string} types\n     */\n    bubble(observable, ...types) {\n        for (const type of types) {\n            let callback;\n            if (type === Observable.WILDCARD) {\n                callback = function() {\n                    this.fire.apply(this, arguments);\n                };\n            } else {\n                callback = function() {\n                    this.fire.apply(this, [type, ...arguments]);\n                };\n            }\n            observable.on(type, callback.bind(this));\n        }\n    }\n}\nClass.register(Observable);\n","class CryptoLib {\n    /**\n     * @return {SubtleCrypto|*}\n     */\n    static get instance() {\n        if (!CryptoLib._instance) {\n            const instance = {};\n            instance.getRandomValues = (window.crypto || window.msCrypto).getRandomValues.bind(window.crypto);\n\n            CryptoLib._instance = instance;\n        }\n        return CryptoLib._instance;\n    }\n}\nCryptoLib._instance = null;\nClass.register(CryptoLib);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @return {Generator}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return new Buffer(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n",";(function (globalObject) {\n    'use strict';\n\n    /*\n     *      bignumber.js v7.0.1\n     *      A JavaScript library for arbitrary-precision arithmetic.\n     *      https://github.com/MikeMcl/bignumber.js\n     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n     *      MIT Licensed.\n     *\n     *      BigNumber.prototype methods     |  BigNumber methods\n     *                                      |\n     *      absoluteValue            abs    |  clone\n     *      comparedTo                      |  config               set\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\n     *      dividedBy                div    |      ROUNDING_MODE\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n     *      exponentiatedBy          pow    |      RANGE\n     *      integerValue                    |      CRYPTO\n     *      isEqualTo                eq     |      MODULO_MODE\n     *      isFinite                        |      POW_PRECISION\n     *      isGreaterThan            gt     |      FORMAT\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n     *      isInteger                       |  isBigNumber\n     *      isLessThan               lt     |  maximum              max\n     *      isLessThanOrEqualTo      lte    |  minimum              min\n     *      isNaN                           |  random\n     *      isNegative                      |\n     *      isPositive                      |\n     *      isZero                          |\n     *      minus                           |\n     *      modulo                   mod    |\n     *      multipliedBy             times  |\n     *      negated                         |\n     *      plus                            |\n     *      precision                sd     |\n     *      shiftedBy                       |\n     *      squareRoot               sqrt   |\n     *      toExponential                   |\n     *      toFixed                         |\n     *      toFormat                        |\n     *      toFraction                      |\n     *      toJSON                          |\n     *      toNumber                        |\n     *      toPrecision                     |\n     *      toString                        |\n     *      valueOf                         |\n     *\n     */\n\n\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        // EDITABLE\n        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n        // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function clone(configObject) {\n        var div, convertBase, parseNumeric,\n            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n            ONE = new BigNumber(1),\n\n\n            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n            // The default values below must be integers within the inclusive ranges stated.\n            // The values can also be changed at run-time using BigNumber.set.\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            // The rounding mode used when rounding to the above decimal places, and when using\n            // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n            // UP         0 Away from zero.\n            // DOWN       1 Towards zero.\n            // CEIL       2 Towards +Infinity.\n            // FLOOR      3 Towards -Infinity.\n            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            // The modulo mode used when calculating the modulus: a mod n.\n            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n            // The remainder (r) is calculated as: r = a - n * q.\n            //\n            // UP        0 The remainder is positive if the dividend is negative, else is negative.\n            // DOWN      1 The remainder has the same sign as the dividend.\n            //             This modulo mode is commonly known as 'truncated division' and is\n            //             equivalent to (a % n) in JavaScript.\n            // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n            //             The remainder is always positive.\n            //\n            // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n            // modes are commonly used for the modulus operation.\n            // Although the other rounding modes can also be used, they may not give useful results.\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the exponentiatedBy operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 0,                    // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            },\n\n            // The alphabet used for base conversion.\n            // It must be at least 2 characters long, with no '.' or repeated character.\n            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n        //------------------------------------------------------------------------------------------\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\n         */\n        function BigNumber(n, b) {\n            var alphabet, c, e, i, isNum, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // Don't throw on constructor call without new (#81).\n                // '[BigNumber Error] Constructor call without new: {n}'\n                //throw Error(bignumberError + ' Constructor call without new: ' + n);\n                return new BigNumber(n, b);\n            }\n\n            if (b == null) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    return;\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum && n * 0 == 0) {\n\n                    // Use `1 / n` to handle minus zero also.\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Faster path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n            } else {\n\n                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n                intCheck(b, 2, ALPHABET.length, 'Base');\n                str = n + '';\n\n                // Allow exponential notation to be used with base 10 argument, while\n                // also rounding to DECIMAL_PLACES as with other bases.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum) {\n\n                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                    if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n                        throw Error\n                        (tooManyDigits + n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    isNum = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n\n                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                    if (b > 10 && b < 37) str = str.toLowerCase();\n                }\n\n                alphabet = ALPHABET.slice(0, b);\n                e = i = 0;\n\n                // Check that str is a valid base b number.\n                // Don't use RegExp so alphabet can contain special characters.\n                for (len = str.length; i < len; i++) {\n                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                        if (c == '.') {\n\n                            // If '.' is not the first character and it has not be found before.\n                            if (i > e) {\n                                e = len;\n                                continue;\n                            }\n                        }\n\n                        return parseNumeric(x, n + '', isNum, b);\n                    }\n                }\n\n                str = convertBase(str, b, 10, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n\n            str = str.slice(i, ++len);\n\n            if (str) {\n                len -= i;\n\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (isNum && BigNumber.DEBUG &&\n                    len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    throw Error\n                    (tooManyDigits + (x.s * n));\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.clone = clone;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object with the following optional properties (if the value of a property is\n         * a number, it must be an integer within the inclusive range stated):\n         *\n         *   DECIMAL_PLACES   {number}           0 to MAX\n         *   ROUNDING_MODE    {number}           0 to 8\n         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n         *   CRYPTO           {boolean}          true or false\n         *   MODULO_MODE      {number}           0 to 9\n         *   POW_PRECISION       {number}           0 to MAX\n         *   ALPHABET         {string}           A string of two or more unique characters, and not\n         *                                       containing '.'. The empty string, null or undefined\n         *                                       resets the alphabet to its default value.\n         *   FORMAT           {object}           An object with some of the following properties:\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n         *\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = BigNumber.set = function (obj) {\n            var p, v;\n\n            if (obj != null) {\n\n                if (typeof obj == 'object') {\n\n                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        DECIMAL_PLACES = v;\n                    }\n\n                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 8, p);\n                        ROUNDING_MODE = v;\n                    }\n\n                    // EXPONENTIAL_AT {number|number[]}\n                    // Integer, -MAX to MAX inclusive or\n                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, 0, p);\n                            intCheck(v[1], 0, MAX, p);\n                            TO_EXP_NEG = v[0];\n                            TO_EXP_POS = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                        }\n                    }\n\n                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                    if (obj.hasOwnProperty(p = 'RANGE')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, -1, p);\n                            intCheck(v[1], 1, MAX, p);\n                            MIN_EXP = v[0];\n                            MAX_EXP = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            if (v) {\n                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                            } else {\n                                throw Error\n                                (bignumberError + p + ' cannot be zero: ' + v);\n                            }\n                        }\n                    }\n\n                    // CRYPTO {boolean} true or false.\n                    // '[BigNumber Error] CRYPTO not true or false: {v}'\n                    // '[BigNumber Error] crypto unavailable'\n                    if (obj.hasOwnProperty(p = 'CRYPTO')) {\n                        v = obj[p];\n                        if (v === !!v) {\n                            if (v) {\n                                if (typeof crypto != 'undefined' && crypto &&\n                                    (crypto.getRandomValues || crypto.randomBytes)) {\n                                    CRYPTO = v;\n                                } else {\n                                    CRYPTO = !v;\n                                    throw Error\n                                    (bignumberError + 'crypto unavailable');\n                                }\n                            } else {\n                                CRYPTO = v;\n                            }\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' not true or false: ' + v);\n                        }\n                    }\n\n                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 9, p);\n                        MODULO_MODE = v;\n                    }\n\n                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        POW_PRECISION = v;\n                    }\n\n                    // FORMAT {object}\n                    // '[BigNumber Error] FORMAT not an object: {v}'\n                    if (obj.hasOwnProperty(p = 'FORMAT')) {\n                        v = obj[p];\n                        if (typeof v == 'object') FORMAT = v;\n                        else throw Error\n                        (bignumberError + p + ' not an object: ' + v);\n                    }\n\n                    // ALPHABET {string}\n                    // '[BigNumber Error] ALPHABET invalid: {v}'\n                    if (obj.hasOwnProperty(p = 'ALPHABET')) {\n                        v = obj[p];\n\n                        // Disallow if only one character, or contains '.' or a repeated character.\n                        if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n                            ALPHABET = v;\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' invalid: ' + v);\n                        }\n                    }\n\n                } else {\n\n                    // '[BigNumber Error] Object expected: {v}'\n                    throw Error\n                    (bignumberError + 'Object expected: ' + obj);\n                }\n            }\n\n            return {\n                DECIMAL_PLACES: DECIMAL_PLACES,\n                ROUNDING_MODE: ROUNDING_MODE,\n                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n                RANGE: [MIN_EXP, MAX_EXP],\n                CRYPTO: CRYPTO,\n                MODULO_MODE: MODULO_MODE,\n                POW_PRECISION: POW_PRECISION,\n                FORMAT: FORMAT,\n                ALPHABET: ALPHABET\n            };\n        };\n\n\n        /*\n         * Return true if v is a BigNumber instance, otherwise return false.\n         *\n         * v {any}\n         */\n        BigNumber.isBigNumber = function (v) {\n            return v instanceof BigNumber || v && v._isBigNumber === true || false;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.maximum = BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.minimum = BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n         * '[BigNumber Error] crypto unavailable'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n                ? function () { return mathfloor(Math.random() * pow2_53); }\n                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                    (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                if (dp == null) dp = DECIMAL_PLACES;\n                else intCheck(dp, 0, MAX);\n\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        throw Error\n                        (bignumberError + 'crypto unavailable');\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Called by BigNumber and BigNumber.prototype.toString.\n        convertBase = (function () {\n            var decimal = '0123456789';\n\n            /*\n             * Convert string of baseIn to an array of numbers of baseOut.\n             * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n             */\n            function toBaseOut(str, baseIn, baseOut, alphabet) {\n                var j,\n                    arr = [0],\n                    arrL,\n                    i = 0,\n                    len = str.length;\n\n                for (; i < len;) {\n                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n                    arr[0] += alphabet.indexOf(str.charAt(i++));\n\n                    for (j = 0; j < arr.length; j++) {\n\n                        if (arr[j] > baseOut - 1) {\n                            if (arr[j + 1] == null) arr[j + 1] = 0;\n                            arr[j + 1] += arr[j] / baseOut | 0;\n                            arr[j] %= baseOut;\n                        }\n                    }\n                }\n\n                return arr.reverse();\n            }\n\n            // Convert a numeric string of baseIn to a numeric string of baseOut.\n            // If the caller is toString, we are converting from base 10 to baseOut.\n            // If the caller is BigNumber, we are converting from baseIn to base 10.\n            return function (str, baseIn, baseOut, sign, callerIsToString) {\n                var alphabet, d, e, k, r, x, xc, y,\n                    i = str.indexOf('.'),\n                    dp = DECIMAL_PLACES,\n                    rm = ROUNDING_MODE;\n\n                // Non-integer.\n                if (i >= 0) {\n                    k = POW_PRECISION;\n\n                    // Unlimited precision.\n                    POW_PRECISION = 0;\n                    str = str.replace('.', '');\n                    y = new BigNumber(baseIn);\n                    x = y.pow(str.length - i);\n                    POW_PRECISION = k;\n\n                    // Convert str as if an integer, then restore the fraction part by dividing the\n                    // result by its base raised to a power.\n\n                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n                        10, baseOut, decimal);\n                    y.e = y.c.length;\n                }\n\n                // Convert the number as integer.\n\n                xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n                    ? (alphabet = ALPHABET, decimal)\n                    : (alphabet = decimal, ALPHABET));\n\n                // xc now represents str as an integer and converted to baseOut. e is the exponent.\n                e = k = xc.length;\n\n                // Remove trailing zeros.\n                for (; xc[--k] == 0; xc.pop());\n\n                // Zero?\n                if (!xc[0]) return alphabet.charAt(0);\n\n                // Does str represent an integer? If so, no need for the division.\n                if (i < 0) {\n                    --e;\n                } else {\n                    x.c = xc;\n                    x.e = e;\n\n                    // The sign is needed for correct rounding.\n                    x.s = sign;\n                    x = div(x, y, dp, rm, baseOut);\n                    xc = x.c;\n                    r = x.r;\n                    e = x.e;\n                }\n\n                // xc now represents str converted to baseOut.\n\n                // THe index of the rounding digit.\n                d = e + dp + 1;\n\n                // The rounding digit: the digit to the right of the digit that may be rounded up.\n                i = xc[d];\n\n                // Look at the rounding digits and mode to determine whether to round up.\n\n                k = baseOut / 2;\n                r = r || d < 0 || xc[d + 1] != null;\n\n                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                    : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n\n                // If the index of the rounding digit is not greater than zero, or xc represents\n                // zero, then the result of the base conversion is zero or, if rounding up, a value\n                // such as 0.00001.\n                if (d < 1 || !xc[0]) {\n\n                    // 1^-dp or 0\n                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\n                        : alphabet.charAt(0);\n                } else {\n\n                    // Truncate xc to the required number of decimal places.\n                    xc.length = d;\n\n                    // Round up?\n                    if (r) {\n\n                        // Rounding up may mean the previous digit has to be rounded up and so on.\n                        for (--baseOut; ++xc[--d] > baseOut;) {\n                            xc[d] = 0;\n\n                            if (!d) {\n                                ++e;\n                                xc = [1].concat(xc);\n                            }\n                        }\n                    }\n\n                    // Determine trailing zeros.\n                    for (k = xc.length; !xc[--k];);\n\n                    // E.g. [4, 11, 15] becomes 4bf.\n                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n                    // Add leading zeros, decimal point and trailing zeros as required.\n                    str = toFixedPoint(str, e, alphabet.charAt(0));\n                }\n\n                // The caller will add the sign.\n                return str;\n            };\n        })();\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x = [carry].concat(x);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                        // Return NaN if either NaN, or both Infinity or 0.\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz = [0].concat(yz);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  product = divisor multiplied by trial digit (n).\n                            //  Compare product and remainder.\n                            //  If product is greater than remainder:\n                            //    Subtract divisor from product, decrement trial digit.\n                            //  Subtract product from remainder.\n                            //  If product was less than remainder at the last compare:\n                            //    Compare new remainder and divisor.\n                            //    If remainder is greater than divisor:\n                            //      Subtract divisor from remainder, increment trial digit.\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder then trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod = [0].concat(prod);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.splice(0, 1);\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n: a BigNumber.\n         * i: the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm: the rounding mode.\n         * id: 1 (toExponential) or 2 (toPrecision).\n         */\n        function format(n, i, rm, id) {\n            var c0, e, ne, len, str;\n\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n\n            if (!n.c) return n.toString();\n\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = id == 1 || id == 2 && ne <= TO_EXP_NEG\n                    ? toExponential(str, ne)\n                    : toFixedPoint(str, ne, '0');\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e, '0');\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m, n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, isNum, b) {\n                var base,\n                    s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                    x.c = x.e = null;\n                } else {\n                    if (!isNum) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // '[BigNumber Error] Not a number: {n}'\n                    // '[BigNumber Error] Not a base {b} number: {n}'\n                    if (BigNumber.DEBUG) {\n                        throw Error\n                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n                    }\n\n                    // NaN\n                    x.c = x.e = x.s = null;\n                }\n            }\n        })();\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round(x, sd, rm, r) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                        // Are there any non-zero digits after the rounding digit?\n                        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n                        rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (; ;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return\n         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         *   0 if they have the same value,\n         *   or null if the value of either is NaN.\n         */\n        P.comparedTo = function (y, b) {\n            return compare(this, new BigNumber(y, b));\n        };\n\n\n        /*\n         * If dp is undefined or null or true or false, return the number of decimal places of the\n         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         *\n         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.decimalPlaces = P.dp = function (dp, rm) {\n            var c, n, v,\n                x = this;\n\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), dp + x.e + 1, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function (y, b) {\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.idiv = function (y, b) {\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n         *\n         * If m is present, return the result modulo m.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n         *\n         * n {number|string|BigNumber} The exponent. An integer.\n         * [m] {number|string|BigNumber} The modulus.\n         *\n         * '[BigNumber Error] Exponent not an integer: {n}'\n         */\n        P.exponentiatedBy = P.pow = function (n, m) {\n            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\n                x = this;\n\n            n = new BigNumber(n);\n\n            // Allow NaN and ±Infinity, but not other non-integers.\n            if (n.c && !n.isInteger()) {\n                throw Error\n                (bignumberError + 'Exponent not an integer: ' + n);\n            }\n\n            if (m != null) m = new BigNumber(m);\n\n            // Exponent of MAX_SAFE_INTEGER is 15.\n            nIsBig = n.e > 14;\n\n            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n                // The sign of the result of pow when x is negative depends on the evenness of n.\n                // If +n overflows to ±Infinity, the evenness of n would be not be known.\n                y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n                return m ? y.mod(m) : y;\n            }\n\n            nIsNeg = n.s < 0;\n\n            if (m) {\n\n                // x % m returns NaN if abs(m) is zero, or m is NaN.\n                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n                isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n                if (isModExp) x = x.mod(m);\n\n                // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n                // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n                // [1, 240000000]\n                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n                // [80000000000000]  [99999750000000]\n                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n                // If x is negative and n is odd, k = -0, else k = 0.\n                k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n                // If x >= 1, k = ±Infinity.\n                if (x.e > -1) k = 1 / k;\n\n                // If n is negative return ±0, else return ±Infinity.\n                return new BigNumber(nIsNeg ? 1 / k : k);\n\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            if (nIsBig) {\n                half = new BigNumber(0.5);\n                nIsOdd = isOdd(n);\n            } else {\n                nIsOdd = n % 2;\n            }\n\n            if (nIsNeg) n.s = 1;\n\n            y = new BigNumber(ONE);\n\n            // Performs 54 loop iterations for n of 9007199254740991.\n            for (; ;) {\n\n                if (nIsOdd) {\n                    y = y.times(x);\n                    if (!y.c) break;\n\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (isModExp) {\n                        y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                    }\n                }\n\n                if (nIsBig) {\n                    n = n.times(half);\n                    round(n, n.e + 1, 1);\n                    if (!n.c[0]) break;\n                    nIsBig = n.e > 14;\n                    nIsOdd = isOdd(n);\n                } else {\n                    n = mathfloor(n / 2);\n                    if (!n) break;\n                    nIsOdd = n % 2;\n                }\n\n                x = x.times(x);\n\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (isModExp) {\n                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n                }\n            }\n\n            if (isModExp) return y;\n            if (nIsNeg) y = ONE.div(y);\n\n            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n         */\n        P.integerValue = function (rm) {\n            var n = new BigNumber(this);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(n, n.e + 1, rm);\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isEqualTo = P.eq = P.equals = function (y, b) {\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise return false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isGreaterThan = P.gt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isLessThan = P.lt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isLessThanOrEqualTo = P.lte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise return false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise return false.\n         */\n        P.isNegative = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is positive, otherwise return false.\n         */\n        P.isPositive = function () {\n            return this.s > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = function (y, b) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                        ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q, s,\n                x = this;\n\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            y = x.minus(q.times(y));\n\n            // To match JavaScript %, ensure sign of zero is sign of dividend.\n            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n            return y;\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n         * of BigNumber(y, b).\n         */\n        P.multipliedBy = P.times = function (y, b) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.splice(0, 1);\n            }\n\n            return normalise(y, zc, e);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc = [a].concat(xc);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         * If sd is undefined or null or true or false, return the number of significant digits of\n         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         * If sd is true include integer-part trailing zeros in the count.\n         *\n         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n         *                     boolean: whether to count integer-part trailing zeros: true or false.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.precision = P.sd = function (sd, rm) {\n            var c, n, v,\n                x = this;\n\n            if (sd != null && sd !== !!sd) {\n                intCheck(sd, 1, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), sd, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (sd && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n         */\n        P.shiftedBy = function (k) {\n            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n            return this.times('1e' + k);\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt(N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt(I) =  I\n         *  sqrt(0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (; ;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c  ).slice(0, s) === (n =\n                        coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toExponential = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp++;\n            }\n            return format(this, dp, rm, 1);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFixed = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp = dp + this.e + 1;\n            }\n            return format(this, dp, rm);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.set).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFormat = function (dp, rm) {\n            var str = this.toFixed(dp, rm);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\n                    ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n                        '$&' + FORMAT.fractionGroupSeparator)\n                    : fractionPart)\n                    : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n         *\n         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\n                x = this,\n                xc = x.c;\n\n            if (md != null) {\n                n = new BigNumber(md);\n\n                // Throw if md is less than one or is not an integer, unless it is Infinity.\n                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                    throw Error\n                    (bignumberError + 'Argument ' +\n                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n                }\n            }\n\n            if (!xc) return x.toString();\n\n            d = new BigNumber(ONE);\n            n1 = d0 = new BigNumber(ONE);\n            d1 = n0 = new BigNumber(ONE);\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (; ;)  {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.comparedTo(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\n                ? [n1.toString(), d1.toString()]\n                : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.toPrecision = function (sd, rm) {\n            if (sd != null) intCheck(sd, 1, MAX);\n            return format(this, sd, rm, 2);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n         *\n         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                        ? toExponential(str, e)\n                        : toFixedPoint(str, e, '0');\n                } else {\n                    intCheck(b, 2, ALPHABET.length, 'Base');\n                    str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return as toString, but do not accept a base argument, and include the minus sign for\n         * negative zero.\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                ? toExponential(str, e)\n                : toFixedPoint(str, e, '0');\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n\n        P._isBigNumber = true;\n\n        if (configObject != null) BigNumber.set(configObject);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\n     */\n    function intCheck(n, min, max, name) {\n        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n            throw Error\n            (bignumberError + (name || 'Argument') + (typeof n == 'number'\n                ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n                : ' not a primitive number: ') + n);\n        }\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    // Assumes finite n.\n    function isOdd(n) {\n        var k = n.c.length - 1;\n        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n            (e < 0 ? 'e' : 'e+') + e;\n    }\n\n\n    function toFixedPoint(str, e, z) {\n        var len, zs;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (zs = z + '.'; ++e; zs += z);\n            str = zs + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (zs = z, e -= len; --e; zs += z);\n                str += zs;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n    globalObject.BigNumber = BigNumber;\n})(Class.scope);\nBigNumber = Class.scope.BigNumber;\nBigNumber.config({ DECIMAL_PLACES: 10 });\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @return {boolean}\n     */\n    static isNodeJs() {\n        return !PlatformUtils.isBrowser() && typeof process === 'object' && typeof require === 'function';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        let RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return (!PlatformUtils.isBrowser() || !('onLine' in window.navigator)) || window.navigator.onLine;\n    }\n}\nClass.register(PlatformUtils);\n","class StringUtils {\n    /**\n     * @param {string} str\n     * @returns {boolean}\n     */\n    static isMultibyte(str) {\n        return /[\\uD800-\\uDFFF]/.test(str);\n    }\n\n    /**\n     * @param {string} str\n     * @returns {boolean}\n     */\n    static isHex(str) {\n        return /^[0-9A-Fa-f]*$/.test(str);\n    }\n\n    /**\n     * @param {string} str\n     * @param {number} [length]\n     * @returns {boolean}\n     */\n    static isHexBytes(str, length) {\n        if (!StringUtils.isHex(str)) return false;\n        if (str.length % 2 !== 0) return false;\n        if (typeof length === 'number' && str.length / 2 !== length) return false;\n        return true;\n    }\n\n    /**\n     * @param {string} str1\n     * @param {string} str2\n     * @returns {string}\n     */\n    static commonPrefix(str1, str2) {\n        let i = 0;\n        for (; i < str1.length; ++i) {\n            if (str1[i] !== str2[i]) break;\n        }\n        return str1.substr(0, i);\n    }\n\n}\nClass.register(StringUtils);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis\n     */\n    static coinsToSatoshis(coins) {\n        return Math.round(coins * Policy.SATOSHIS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} satoshis Number of Satoshis.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {BigNumber}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = new BigNumber(2).pow(240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.SATOSHIS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in satoshis.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in satoshis.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in satoshis until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.15;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PrivateKey extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PrivateKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @return {PrivateKey}\n     */\n    static generate() {\n        const privateKey = new Uint8Array(PrivateKey.SIZE);\n        CryptoWorker.lib.getRandomValues(privateKey);\n        return new PrivateKey(privateKey);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PrivateKey}\n     */\n    static unserialize(buf) {\n        return new PrivateKey(buf.read(PrivateKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PrivateKey.SIZE;\n    }\n\n    /**\n     * Overwrite this private key with a replacement in-memory\n     * @param {PrivateKey} privateKey\n     */\n    overwrite(privateKey) {\n        this._obj.set(privateKey._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PrivateKey && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _privateKeyDelinearize(privateKey, publicKey, publicKeysHash) {\n        if (privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_derive_delinearized_private_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_derive_delinearized_private_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey, wasmInPrivateKey);\n                const delinearizedPrivateKey = new Uint8Array(PrivateKey.SIZE);\n                delinearizedPrivateKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PrivateKey.SIZE));\n                return delinearizedPrivateKey;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPrivateKey.SIZE = 32;\n\nClass.register(PrivateKey);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class KeyPair extends Serializable {\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {boolean} locked\n     * @param {Uint8Array} lockSalt\n     * @private\n     */\n    constructor(privateKey, publicKey, locked = false, lockSalt = null) {\n        if (!(privateKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        if (!(publicKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        super();\n\n        /** @type {boolean} */\n        this._locked = locked;\n        /** @type {boolean} */\n        this._lockedInternally = locked;\n        /** @type {Uint8Array} */\n        this._lockSalt = lockSalt;\n        /** @type {PublicKey} */\n        this._publicKey = publicKey;\n        /** @type {PrivateKey} */\n        this._internalPrivateKey = new PrivateKey(privateKey.serialize());\n    }\n\n    /**\n     * @return {KeyPair}\n     */\n    static generate() {\n        const privateKey = PrivateKey.generate();\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {KeyPair}\n     */\n    static derive(privateKey) {\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    /**\n     * @param {string} hexBuf\n     * @return {KeyPair}\n     */\n    static fromHex(hexBuf) {\n        return KeyPair.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    /**\n     *\n     * @param {SerialBuffer} buf\n     * @param {Uint8Array} key\n     * @return {Promise<KeyPair>}\n     */\n    static async fromEncrypted(buf, key) {\n        const type = buf.readUint8();\n        if (type !== 1) throw new Error('Unsupported type');\n        const roundsLog = buf.readUint8();\n        if (roundsLog > 32) throw new Error('Rounds out-of-bounds');\n        const rounds = Math.pow(2, roundsLog);\n        const encryptedKey = PrivateKey.unserialize(buf);\n        const salt = buf.read(KeyPair.EXPORT_SALT_LENGTH);\n        const check = buf.read(KeyPair.EXPORT_CHECKSUM_LENGTH);\n\n        const privateKey = new PrivateKey(await KeyPair._otpKdf(encryptedKey.serialize(), key, salt, rounds));\n        const keyPair = KeyPair.derive(privateKey);\n        const pubHash = keyPair.publicKey.hash();\n        if (!BufferUtils.equals(pubHash.subarray(0, 4), check)) {\n            throw new Error('Invalid key');\n        }\n        return keyPair;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {KeyPair}\n     */\n    static unserialize(buf) {\n        const privateKey = PrivateKey.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        let locked = false;\n        let lockSalt = null;\n        if (buf.readPos < buf.byteLength) {\n            const extra = buf.readUint8();\n            if (extra === 1) {\n                locked = true;\n                lockSalt = buf.read(32);\n            }\n        }\n        return new KeyPair(privateKey, publicKey, locked, lockSalt);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._privateKey.serialize(buf);\n        this.publicKey.serialize(buf);\n        if (this._locked) {\n            buf.writeUint8(1);\n            buf.write(this._lockSalt);\n        } else {\n            buf.writeUint8(0);\n        }\n        return buf;\n    }\n\n    /**\n     * The unlocked private key.\n     * @type {PrivateKey}\n     */\n    get privateKey() {\n        if (this.isLocked) throw new Error('Wallet is locked');\n        return this._privateKey;\n    }\n\n    /**\n     * The private key in its current state, i.e., depending on this._locked.\n     * If this._locked, it is the internally locked private key.\n     * If !this._locked, it is either the internally unlocked private key (if !this._lockedInternally)\n     * or this._unlockedPrivateKey.\n     * @type {PrivateKey}\n     */\n    get _privateKey() {\n        return this._unlockedPrivateKey || this._internalPrivateKey;\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey || (this._publicKey = new PublicKey(this._obj.publicKey));\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._privateKey.serializedSize + this.publicKey.serializedSize + (this._locked ? this._lockSalt.byteLength + 1 : 1);\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} [unlockKey]\n     * @return {Promise.<Uint8Array>}\n     */\n    async exportEncrypted(key, unlockKey) {\n        const wasLocked = this._locked;\n        if (this._locked) {\n            try {\n                await this.unlock(unlockKey || key);\n            } catch (e) {\n                throw new Error('KeyPair is locked and lock key mismatches');\n            }\n        }\n\n        const salt = new Uint8Array(KeyPair.EXPORT_SALT_LENGTH);\n        CryptoWorker.lib.getRandomValues(salt);\n\n        const buf = new SerialBuffer(this.encryptedSize);\n        buf.writeUint8(1); // Argon2 KDF\n        buf.writeUint8(Math.log2(KeyPair.EXPORT_KDF_ROUNDS));\n        buf.write(await KeyPair._otpKdf(this.privateKey.serialize(), key, salt, KeyPair.EXPORT_KDF_ROUNDS));\n        buf.write(salt);\n        buf.write(this.publicKey.hash().subarray(0, KeyPair.EXPORT_CHECKSUM_LENGTH));\n\n        if (wasLocked) this.relock();\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get encryptedSize() {\n        return 2 + this.privateKey.serializedSize + KeyPair.EXPORT_SALT_LENGTH + KeyPair.EXPORT_CHECKSUM_LENGTH;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} [lockSalt]\n     */\n    async lock(key, lockSalt) {\n        if (this._locked) throw new Error('KeyPair already locked');\n\n        if (lockSalt) this._lockSalt = lockSalt;\n        if (!this._lockSalt || this._lockSalt.length === 0) {\n            this._lockSalt = new Uint8Array(32);\n            CryptoWorker.lib.getRandomValues(this._lockSalt);\n        }\n\n        this._internalPrivateKey.overwrite(await this._otpPrivateKey(key));\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n        this._lockedInternally = true;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     */\n    async unlock(key) {\n        if (!this._locked) throw new Error('KeyPair not locked');\n\n        const privateKey = await this._otpPrivateKey(key);\n        const verifyPub = PublicKey.derive(privateKey);\n        if (verifyPub.equals(this.publicKey)) {\n            // Only set this._internalPrivateKey, but keep this._obj locked.\n            this._unlockedPrivateKey = privateKey;\n            this._locked = false;\n        } else {\n            throw new Error('Invalid key');\n        }\n    }\n\n    /**\n     * Destroy cached unlocked private key if the internal key is in locked state.\n     */\n    relock() {\n        if (this._locked) throw new Error('KeyPair already locked');\n        if (!this._lockedInternally) throw new Error('KeyPair was never locked');\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n    }\n\n    _clearUnlockedPrivateKey() {\n        // If this wallet is not locked internally and unlocked, this method does not have any effect.\n        if (!this._lockedInternally || this._locked) return;\n\n        // Overwrite cached key in this._unlockedPrivateKey with 0s.\n        this._unlockedPrivateKey.overwrite(PrivateKey.unserialize(new SerialBuffer(this._unlockedPrivateKey.serializedSize)));\n        // Then, reset it.\n        this._unlockedPrivateKey = null;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @return {Promise<PrivateKey>}\n     * @private\n     */\n    async _otpPrivateKey(key) {\n        return new PrivateKey(await KeyPair._otpKdf(this._privateKey.serialize(), key, this._lockSalt, KeyPair.LOCK_KDF_ROUNDS));\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise<Uint8Array>}\n     * @private\n     */\n    static async _otpKdf(message, key, salt, iterations) {\n        return BufferUtils.xor(message, await (await CryptoWorker.getInstanceAsync()).kdf(key, salt, iterations));\n    }\n\n    get isLocked() {\n        return this._locked;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof KeyPair && super.equals(o);\n    }\n}\nKeyPair.LOCK_KDF_ROUNDS = 256;\nKeyPair.EXPORT_KDF_ROUNDS = 256;\nKeyPair.EXPORT_CHECKSUM_LENGTH = 4;\nKeyPair.EXPORT_SALT_LENGTH = 16;\n\nClass.register(KeyPair);\n","class RandomSecret extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== RandomSecret.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {RandomSecret}\n     */\n    static unserialize(buf) {\n        return new RandomSecret(buf.read(RandomSecret.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return RandomSecret.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof RandomSecret && super.equals(o);\n    }\n}\n\nRandomSecret.SIZE = 32;\n\nClass.register(RandomSecret);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Commitment extends Serializable {\n    /**\n     * @param {Commitment} o\n     * @returns {Commitment}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new Commitment(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Array.<Commitment>} commitments\n     * @return {Commitment}\n     */\n    static sum(commitments) {\n        return new Commitment(Commitment._commitmentsAggregate(commitments.map(c => c._obj)));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Commitment.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Commitment}\n     */\n    static unserialize(buf) {\n        return new Commitment(buf.read(Commitment.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Commitment.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Commitment && super.equals(o);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} commitments\n     * @returns {Uint8Array}\n     */\n    static _commitmentsAggregate(commitments) {\n        if (commitments.some(commitment => commitment.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedCommitments = new Uint8Array(commitments.length * PublicKey.SIZE);\n        for (let i = 0; i < commitments.length; ++i) {\n            concatenatedCommitments.set(commitments[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_commitments(out, concatenatedCommitments, commitments.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInCommitments = Module.stackAlloc(concatenatedCommitments.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInCommitments, concatenatedCommitments.length).set(concatenatedCommitments);\n                Module._ed25519_aggregate_commitments(wasmOut, wasmInCommitments, commitments.length);\n                const aggCommitments = new Uint8Array(PublicKey.SIZE);\n                aggCommitments.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggCommitments;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nCommitment.SIZE = 32;\n\nClass.register(Commitment);\n","class CommitmentPair extends Serializable {\n    /**\n     * @param {RandomSecret} arg\n     * @param {Commitment} arg\n     * @private\n     */\n    constructor(secret, commitment) {\n        super();\n        if (!(secret instanceof RandomSecret)) throw new Error('Primitive: Invalid type');\n        if (!(commitment instanceof Commitment)) throw new Error('Primitive: Invalid type');\n        this._secret = secret;\n        this._commitment = commitment;\n    }\n\n    /**\n     * @return {CommitmentPair}\n     */\n    static generate() {\n        const randomness = new Uint8Array(CommitmentPair.RANDOMNESS_SIZE);\n        CryptoWorker.lib.getRandomValues(randomness);\n        const raw = CommitmentPair._commitmentCreate(randomness);\n        return new CommitmentPair(new RandomSecret(raw.secret), new Commitment(raw.commitment));\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {CommitmentPair}\n     */\n    static unserialize(buf) {\n        const secret = RandomSecret.unserialize(buf);\n        const commitment = Commitment.unserialize(buf);\n        return new CommitmentPair(secret, commitment);\n    }\n\n    /**\n     * @param {string} hexBuf\n     * @return {CommitmentPair}\n     */\n    static fromHex(hexBuf) {\n        return this.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this.secret.serialize(buf);\n        this.commitment.serialize(buf);\n        return buf;\n    }\n\n    /** @type {RandomSecret} */\n    get secret() {\n        return this._secret;\n    }\n\n    /** @type {Commitment} */\n    get commitment() {\n        return this._commitment;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this.secret.serializedSize + this.commitment.serializedSize;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof CommitmentPair && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} randomness\n     * @returns {{commitment:Uint8Array, secret:Uint8Array}}\n     */\n    static _commitmentCreate(randomness) {\n        if (PlatformUtils.isNodeJs()) {\n            const commitment = new Uint8Array(PublicKey.SIZE);\n            const secret = new Uint8Array(PrivateKey.SIZE);\n            NodeNative.node_ed25519_create_commitment(secret, commitment, randomness);\n            return {commitment, secret};\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutCommitment = Module.stackAlloc(PublicKey.SIZE);\n                const wasmOutSecret = Module.stackAlloc(PrivateKey.SIZE);\n                const wasmIn = Module.stackAlloc(randomness.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, randomness.length).set(randomness);\n                const res = Module._ed25519_create_commitment(wasmOutSecret, wasmOutCommitment, wasmIn);\n                if (res !== 1) {\n                    throw new Error(`Secret must not be 0 or 1: ${res}`);\n                }\n                const commitment = new Uint8Array(PublicKey.SIZE);\n                const secret = new Uint8Array(PrivateKey.SIZE);\n                commitment.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutCommitment, PublicKey.SIZE));\n                secret.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSecret, PrivateKey.SIZE));\n                return {commitment, secret};\n            } catch (e) {\n                Log.w(CommitmentPair, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nCommitmentPair.SERIALIZED_SIZE = RandomSecret.SIZE + Signature.SIZE;\nCommitmentPair.RANDOMNESS_SIZE = 32;\n\nClass.register(CommitmentPair);\n","class PartialSignature extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PartialSignature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {RandomSecret} secret\n     * @param {Commitment} aggregateCommitment\n     * @param {Uint8Array} data\n     * @return {PartialSignature}\n     */\n    static create(privateKey, publicKey, publicKeys, secret, aggregateCommitment, data) {\n        const raw = PartialSignature._delinearizedPartialSignatureCreate(publicKeys.map(o => o._obj), privateKey._obj,\n            publicKey._obj, secret._obj, aggregateCommitment._obj, data);\n        return new PartialSignature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PartialSignature}\n     */\n    static unserialize(buf) {\n        return new PartialSignature(buf.read(PartialSignature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PartialSignature.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PartialSignature && super.equals(o);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} secret\n     * @param {Uint8Array} aggregateCommitment\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _delinearizedPartialSignatureCreate(publicKeys, privateKey, publicKey, secret, aggregateCommitment, message) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || secret.byteLength !== RandomSecret.SIZE\n            || aggregateCommitment.byteLength !== Commitment.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_delinearized_partial_sign(out, new Uint8Array(message), new Uint8Array(aggregateCommitment), new Uint8Array(secret), new Uint8Array(concatenatedPublicKeys), publicKeys.length, new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInSecret = Module.stackAlloc(secret.length);\n                const wasmInCommitment = Module.stackAlloc(aggregateCommitment.length);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInSecret, secret.length).set(secret);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInCommitment, aggregateCommitment.length).set(aggregateCommitment);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInMessage, message.length).set(message);\n                Module._ed25519_delinearized_partial_sign(wasmOut, wasmInMessage, message.length, wasmInCommitment, wasmInSecret, wasmInPublicKeys, publicKeys.length, wasmInPublicKey, wasmInPrivateKey);\n                const partialSignature = new Uint8Array(PartialSignature.SIZE);\n                partialSignature.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PartialSignature.SIZE));\n                return partialSignature;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPartialSignature.SIZE = 32;\nClass.register(PartialSignature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):Promise.<boolean>, verifyIncomingTransaction: function(transaction: Transaction):Promise.<boolean>}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => window.setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","class WasmHelper {\n\n    static async doImportBrowser() {\n        if (PlatformUtils.isNodeJs()) return;\n        if (WasmHelper._importStarted) {\n            Log.e(WasmHelper, 'doImportBrowser invoked twice');\n            return;\n        }\n        WasmHelper._importStarted = true;\n        if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n            await WasmHelper.importScriptBrowser('worker-wasm.js');\n        } else {\n            await WasmHelper.importScriptBrowser('worker-js.js');\n        }\n        WasmHelper._importFinished = true;\n    }\n\n    static doImportNodeJs() {\n        if (!PlatformUtils.isNodeJs()) return;\n        if (WasmHelper.importWasmNodeJs('worker-wasm.wasm')) {\n            WasmHelper.importScriptNodeJs('worker-wasm.js');\n        } else {\n            WasmHelper.importScriptNodeJs('worker-js.js');\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static importWasmNodeJs(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return false;\n        }\n\n        const toUint8Array = function (buf) {\n            const u = new Uint8Array(buf.length);\n            for (let i = 0; i < buf.length; ++i) {\n                u[i] = buf[i];\n            }\n            return u;\n        };\n        const fs = require('fs');\n        try {\n            const data = fs.readFileSync(wasm);\n            WasmHelper._global[module] = WasmHelper._global[module] || {};\n            WasmHelper._global[module].wasmBinary = toUint8Array(data);\n            return true;\n        } catch (e) {\n            Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}: ${e}`);\n            return false;\n        }\n    }\n\n    static importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static importScriptNodeJs(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n\n        if (typeof require === 'function') {\n            WasmHelper._global[module] = require(script)(moduleSettings);\n            if (!module) return true;\n        }\n        return false;\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class GenesisConfig {\n    static main() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['main']);\n    }\n\n    static test() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['test']);\n    }\n\n    static dev() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['dev']);\n    }\n\n    static bounty() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['bounty']);\n    }\n\n    /**\n     * @param {{NETWORK_ID:number,NETWORK_NAME:string}} config\n     */\n    static init(config) {\n        if (GenesisConfig._config) throw new Error('GenesisConfig already initialized');\n        if (!config.NETWORK_ID) throw new Error('Config is missing network id');\n        if (!config.NETWORK_NAME) throw new Error('Config is missing network name');\n\n        GenesisConfig._config = config;\n    }\n\n    /**\n     * @type {number}\n     */\n    static get NETWORK_ID() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_ID;\n    }\n\n    /**\n     * @type {string}\n     */\n    static get NETWORK_NAME() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_NAME;\n    }\n}\nClass.register(GenesisConfig);\n\nGenesisConfig.CONFIGS = {\n    'main': {\n        NETWORK_ID: 42,\n        NETWORK_NAME: 'main'\n    },\n\n    'test': {\n        NETWORK_ID: 1,\n        NETWORK_NAME: 'test'\n    },\n\n    'dev': {\n        NETWORK_ID: 2,\n        NETWORK_NAME: 'dev'\n    },\n\n    'bounty': {\n        NETWORK_ID: 3,\n        NETWORK_NAME: 'bounty'\n    }\n};\n","    exports._loaded = true;\n    if (typeof exports._onload === 'function') exports._onload();\n    return exports;\n})(Nimiq);\n"]}